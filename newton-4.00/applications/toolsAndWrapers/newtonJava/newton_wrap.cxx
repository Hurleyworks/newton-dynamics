/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

	#pragma warning(disable:4127 4316 4456 4701 4706)



#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	#include <ndNewton.h>
	#include <newtonWorld.h>
	#include "newtonConfig.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_newtonJNI_dGetWorkingFileName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  dGetWorkingFileName((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndGetZeroMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndMatrix *) &ndGetZeroMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndGetIdentityMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndMatrix *) &ndGetIdentityMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPitchMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 *argp1 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  result = ndPitchMatrix(arg1);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndYawMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 *argp1 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  result = ndYawMatrix(arg1);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRollMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 *argp1 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  result = ndRollMatrix(arg1);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndMatrix *)new ndMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndFloat32 *arg1 = (ndFloat32 *) (ndFloat32 *)0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndFloat32 **)&jarg1; 
  result = (ndMatrix *)new ndMatrix((ndFloat32 const *)arg1);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1,(ndVector const &)*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndQuaternion const &)*arg1,(ndVector const &)*arg2);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndMatrix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1,(ndVector const &)*arg2);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1GetElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg2 = *argp2; 
  result = (ndVector *) &(arg1)->operator [](arg2);
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1Inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = ((ndMatrix const *)arg1)->Inverse();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1Inverse4x4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = ((ndMatrix const *)arg1)->Inverse4x4();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1Transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = ((ndMatrix const *)arg1)->Transpose();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1Transpose4X4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = ((ndMatrix const *)arg1)->Transpose4X4();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1RotateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->RotateVector((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1UnrotateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UnrotateVector((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1TransformVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformVector((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1UntransformVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UntransformVector((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1TransformPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndPlane *arg2 = 0 ;
  ndPlane result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndPlane **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndPlane const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformPlane((ndPlane const &)*arg2);
  *(ndPlane **)&jresult = new ndPlane((const ndPlane &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1UntransformPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndPlane *arg2 = 0 ;
  ndPlane result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndPlane **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndPlane const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UntransformPlane((ndPlane const &)*arg2);
  *(ndPlane **)&jresult = new ndPlane((const ndPlane &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1TransformVector1x4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformVector1x4((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1SolveByGaussianElimination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->SolveByGaussianElimination((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1TransformBBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg5 = *(ndVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndMatrix const *)arg1)->TransformBBox((ndVector const &)*arg2,(ndVector const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1CalcPitchYawRoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndMatrix const *)arg1)->CalcPitchYawRoll(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1TransformTriplex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndFloat32 *arg2 = (ndFloat32 *) (ndFloat32 *)0 ;
  ndInt32 arg3 ;
  ndFloat32 *arg4 = (ndFloat32 *) (ndFloat32 *)0 ;
  ndInt32 arg5 ;
  ndInt32 arg6 ;
  ndInt32 *argp3 ;
  ndInt32 *argp5 ;
  ndInt32 *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(ndFloat32 **)&jarg4; 
  argp5 = *(ndInt32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ndInt32 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg6 = *argp6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(ndFloat32 const *)arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1TransformTriplex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndFloat64 *arg2 = (ndFloat64 *) (ndFloat64 *)0 ;
  ndInt32 arg3 ;
  ndFloat64 *arg4 = (ndFloat64 *) (ndFloat64 *)0 ;
  ndInt32 arg5 ;
  ndInt32 arg6 ;
  ndInt32 *argp3 ;
  ndInt32 *argp5 ;
  ndInt32 *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndFloat64 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(ndFloat64 **)&jarg4; 
  argp5 = *(ndInt32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ndInt32 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg6 = *argp6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(ndFloat64 const *)arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1TransformTriplex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndFloat64 *arg2 = (ndFloat64 *) (ndFloat64 *)0 ;
  ndInt32 arg3 ;
  ndFloat32 *arg4 = (ndFloat32 *) (ndFloat32 *)0 ;
  ndInt32 arg5 ;
  ndInt32 arg6 ;
  ndInt32 *argp3 ;
  ndInt32 *argp5 ;
  ndInt32 *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndFloat64 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(ndFloat32 **)&jarg4; 
  argp5 = *(ndInt32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ndInt32 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg6 = *argp6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(ndFloat32 const *)arg4,arg5,arg6);
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndMatrix_1TestIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestIdentity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndMatrix_1TestSymetric3x3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestSymetric3x3();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndMatrix_1TestOrthogonal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ndMatrix const *)arg1)->TestOrthogonal(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndMatrix_1TestOrthogonal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestOrthogonal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1Multiply3X3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->Multiply3X3((ndMatrix const &)*arg2);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1GetElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->operator *((ndMatrix const &)*arg2);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1EigenVectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result = (arg1)->EigenVectors();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1PolarDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ndMatrix **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg4 = *(ndMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix & reference is null");
    return ;
  } 
  ((ndMatrix const *)arg1)->PolarDecomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMatrix_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *arg3 = 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ndMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndMatrix const &)*arg1,(ndVector const &)*arg2,(ndMatrix const &)*arg3);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1m_1front_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_front = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1m_1front_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result =  ((arg1)->m_front);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1m_1up_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_up = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1m_1up_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result =  ((arg1)->m_up);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1m_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_right = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1m_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result =  ((arg1)->m_right);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMatrix_1m_1posit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_posit = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMatrix_1m_1posit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1; 
  result =  ((arg1)->m_posit);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndQuaternion *)new ndQuaternion();
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndVector const &)*arg1);
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndQuaternion const &)*arg1);
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndMatrix const &)*arg1);
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 arg4 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndFloat32 *argp4 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg4 = *argp4; 
  result = (ndQuaternion *)new ndQuaternion(arg1,arg2,arg3,arg4);
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndQuaternion_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  ndQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  result = (ndQuaternion *)new ndQuaternion((ndVector const &)*arg1,arg2);
  *(ndQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndQuaternion **)&jarg1; 
  result = ((ndQuaternion const *)arg1)->Normalize();
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndQuaternion **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  result = ((ndQuaternion const *)arg1)->Scale(arg2);
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndQuaternion **)&jarg1; 
  result = ((ndQuaternion const *)arg1)->Inverse();
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndQuaternion **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator +((ndQuaternion const &)*arg2);
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndQuaternion **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator -((ndQuaternion const &)*arg2);
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndQuaternion **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator *((ndQuaternion const &)*arg2);
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1Slerp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndQuaternion **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = ((ndQuaternion const *)arg1)->Slerp((ndQuaternion const &)*arg2,arg3);
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndQuaternion_1CalcAverageOmega(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndQuaternion **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return 0;
  } 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = ((ndQuaternion const *)arg1)->CalcAverageOmega((ndQuaternion const &)*arg2,arg3);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndQuaternion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_m_1box_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ndShapeID result;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeID)m_box;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeMaterial *)new ndShapeMaterial();
  *(ndShapeMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1m_1userId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndInt64 arg2 ;
  ndInt64 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  argp2 = *(ndInt64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt64");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_userId = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1m_1userId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndInt64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  result =  ((arg1)->m_userId);
  *(ndInt64 **)&jresult = new ndInt64((const ndInt64 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1nData_1m_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::nData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->m_userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1nData_1m_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::nData **)&jarg1; 
  result = (void *) ((arg1)->m_userData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1nData_1m_1alignPad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  ndUnsigned64 arg2 ;
  ndUnsigned64 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::nData **)&jarg1; 
  argp2 = *(ndUnsigned64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndUnsigned64");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_alignPad = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1nData_1m_1alignPad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  ndUnsigned64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::nData **)&jarg1; 
  result =  ((arg1)->m_alignPad);
  *(ndUnsigned64 **)&jresult = new ndUnsigned64((const ndUnsigned64 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeMaterial_1nData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeMaterial::nData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeMaterial::nData *)new ndShapeMaterial::nData();
  *(ndShapeMaterial::nData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeMaterial_1nData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeMaterial::nData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1m_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::nData *arg2 = (ndShapeMaterial::nData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  arg2 = *(ndShapeMaterial::nData **)&jarg2; 
  if (arg1) (arg1)->m_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::nData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  result = (ndShapeMaterial::nData *)& ((arg1)->m_data);
  *(ndShapeMaterial::nData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1dExtraData_1m_1intData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  ndUnsigned64 arg2 ;
  ndUnsigned64 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::dExtraData **)&jarg1; 
  argp2 = *(ndUnsigned64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndUnsigned64");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_intData = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1dExtraData_1m_1intData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  ndUnsigned64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::dExtraData **)&jarg1; 
  result =  ((arg1)->m_intData);
  *(ndUnsigned64 **)&jresult = new ndUnsigned64((const ndUnsigned64 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1dExtraData_1m_1floatData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::dExtraData **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_floatData = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1dExtraData_1m_1floatData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial::dExtraData **)&jarg1; 
  result =  ((arg1)->m_floatData);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeMaterial_1dExtraData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeMaterial::dExtraData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeMaterial::dExtraData *)new ndShapeMaterial::dExtraData();
  *(ndShapeMaterial::dExtraData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeMaterial_1dExtraData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeMaterial::dExtraData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeMaterial_1m_1userParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::dExtraData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  arg2 = *(ndShapeMaterial::dExtraData **)&jarg2; 
  {
    size_t ii;
    ndShapeMaterial::dExtraData *b = (ndShapeMaterial::dExtraData *) arg1->m_userParam;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((ndShapeMaterial::dExtraData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeMaterial_1m_1userParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::dExtraData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  result = (ndShapeMaterial::dExtraData *)(ndShapeMaterial::dExtraData *) ((arg1)->m_userParam);
  *(ndShapeMaterial::dExtraData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeMaterial **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBoxInfo_1m_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBoxInfo_1m_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  result =  ((arg1)->m_x);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBoxInfo_1m_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBoxInfo_1m_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  result =  ((arg1)->m_y);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBoxInfo_1m_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_z = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBoxInfo_1m_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBoxInfo **)&jarg1; 
  result =  ((arg1)->m_z);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBoxInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndBoxInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndBoxInfo *)new ndBoxInfo();
  *(ndBoxInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBoxInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBoxInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPointInfo_1m_1noUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPointInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPointInfo_1m_1noUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPointInfo **)&jarg1; 
  result =  ((arg1)->m_noUsed);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndPointInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndPointInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndPointInfo *)new ndPointInfo();
  *(ndPointInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndPointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndPointInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndSphereInfo_1m_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndSphereInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndSphereInfo_1m_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndSphereInfo **)&jarg1; 
  result =  ((arg1)->m_radius);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndSphereInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndSphereInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndSphereInfo *)new ndSphereInfo();
  *(ndSphereInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndSphereInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndSphereInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCylinderInfo_1m_1radio0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCylinderInfo_1m_1radio0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  result =  ((arg1)->m_radio0);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCylinderInfo_1m_1radio1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCylinderInfo_1m_1radio1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  result =  ((arg1)->m_radio1);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCylinderInfo_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCylinderInfo_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  result =  ((arg1)->m_height);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndCylinderInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndCylinderInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndCylinderInfo *)new ndCylinderInfo();
  *(ndCylinderInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndCylinderInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndCylinderInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1radio0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1radio0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  result =  ((arg1)->m_radio0);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1radio1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1radio1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  result =  ((arg1)->m_radio1);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCapsuleInfo_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  result =  ((arg1)->m_height);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndCapsuleInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndCapsuleInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndCapsuleInfo *)new ndCapsuleInfo();
  *(ndCapsuleInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndCapsuleInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndCapsuleInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConeInfo_1m_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConeInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConeInfo_1m_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConeInfo **)&jarg1; 
  result =  ((arg1)->m_radius);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConeInfo_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConeInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConeInfo_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConeInfo **)&jarg1; 
  result =  ((arg1)->m_height);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndConeInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndConeInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndConeInfo *)new ndConeInfo();
  *(ndConeInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndConeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndConeInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndChamferCylinderInfo_1m_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndChamferCylinderInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_r = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndChamferCylinderInfo_1m_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndChamferCylinderInfo **)&jarg1; 
  result =  ((arg1)->m_r);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndChamferCylinderInfo_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndChamferCylinderInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndChamferCylinderInfo_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndChamferCylinderInfo **)&jarg1; 
  result =  ((arg1)->m_height);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndChamferCylinderInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndChamferCylinderInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndChamferCylinderInfo *)new ndChamferCylinderInfo();
  *(ndChamferCylinderInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndChamferCylinderInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndChamferCylinderInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1vertexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1vertexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  result =  ((arg1)->m_vertexCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1strideInBytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_strideInBytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1strideInBytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  result =  ((arg1)->m_strideInBytes);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1faceCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1faceCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  result =  ((arg1)->m_faceCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1vertex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndVector *arg2 = (ndVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  arg2 = *(ndVector **)&jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndConvexHullInfo_1m_1vertex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  result = (ndVector *) ((arg1)->m_vertex);
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndConvexHullInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndConvexHullInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndConvexHullInfo *)new ndConvexHullInfo();
  *(ndConvexHullInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndConvexHullInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndConvexHullInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCoumpoundInfo_1m_1noUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCoumpoundInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCoumpoundInfo_1m_1noUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCoumpoundInfo **)&jarg1; 
  result =  ((arg1)->m_noUsed);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndCoumpoundInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndCoumpoundInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndCoumpoundInfo *)new ndCoumpoundInfo();
  *(ndCoumpoundInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndCoumpoundInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndCoumpoundInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndProceduralInfoInfo_1m_1noUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndProceduralInfoInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndProceduralInfoInfo_1m_1noUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndProceduralInfoInfo **)&jarg1; 
  result =  ((arg1)->m_noUsed);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndProceduralInfoInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndProceduralInfoInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndProceduralInfoInfo *)new ndProceduralInfoInfo();
  *(ndProceduralInfoInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndProceduralInfoInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndProceduralInfoInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCollisionBvhInfo_1m_1vertexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCollisionBvhInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCollisionBvhInfo_1m_1vertexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCollisionBvhInfo **)&jarg1; 
  result =  ((arg1)->m_vertexCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndCollisionBvhInfo_1m_1indexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCollisionBvhInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_indexCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndCollisionBvhInfo_1m_1indexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndCollisionBvhInfo **)&jarg1; 
  result =  ((arg1)->m_indexCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndCollisionBvhInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndCollisionBvhInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndCollisionBvhInfo *)new ndCollisionBvhInfo();
  *(ndCollisionBvhInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndCollisionBvhInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndCollisionBvhInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_width = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_width);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_height);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1gridsDiagonals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gridsDiagonals = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1gridsDiagonals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_gridsDiagonals);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1verticalScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_verticalScale = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1verticalScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_verticalScale);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1horizonalScale_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_horizonalScale_x = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1horizonalScale_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_horizonalScale_x);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1horizonalScale_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_horizonalScale_z = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1horizonalScale_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result =  ((arg1)->m_horizonalScale_z);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1elevation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndReal *arg2 = (ndReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  arg2 = *(ndReal **)&jarg2; 
  if (arg1) (arg1)->m_elevation = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1elevation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result = (ndReal *) ((arg1)->m_elevation);
  *(ndReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1atributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt8 *arg2 = (ndInt8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  arg2 = *(ndInt8 **)&jarg2; 
  if (arg1) (arg1)->m_atributes = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndHeighfieldInfo_1m_1atributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndInt8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  result = (ndInt8 *) ((arg1)->m_atributes);
  *(ndInt8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndHeighfieldInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndHeighfieldInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndHeighfieldInfo *)new ndHeighfieldInfo();
  *(ndHeighfieldInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndHeighfieldInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndHeighfieldInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1offsetMatrix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_offsetMatrix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1offsetMatrix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_offsetMatrix);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_scale = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result =  ((arg1)->m_scale);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1shapeMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeMaterial *arg2 = (ndShapeMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndShapeMaterial **)&jarg2; 
  if (arg1) (arg1)->m_shapeMaterial = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1shapeMaterial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndShapeMaterial *)& ((arg1)->m_shapeMaterial);
  *(ndShapeMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1collisionType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = (ndShapeID)jarg2; 
  if (arg1) (arg1)->m_collisionType = arg2;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_ndShapeInfo_1m_1collisionType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndShapeID) ((arg1)->m_collisionType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1box_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndBoxInfo *arg2 = (ndBoxInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndBoxInfo **)&jarg2; 
  if (arg1) (arg1)->m_box = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1box_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndBoxInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndBoxInfo *)& ((arg1)->m_box);
  *(ndBoxInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1cone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConeInfo *arg2 = (ndConeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndConeInfo **)&jarg2; 
  if (arg1) (arg1)->m_cone = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1cone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConeInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndConeInfo *)& ((arg1)->m_cone);
  *(ndConeInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndPointInfo *arg2 = (ndPointInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndPointInfo **)&jarg2; 
  if (arg1) (arg1)->m_point = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1point_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndPointInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndPointInfo *)& ((arg1)->m_point);
  *(ndPointInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1sphere_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndSphereInfo *arg2 = (ndSphereInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndSphereInfo **)&jarg2; 
  if (arg1) (arg1)->m_sphere = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1sphere_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndSphereInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndSphereInfo *)& ((arg1)->m_sphere);
  *(ndSphereInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1capsule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCapsuleInfo *arg2 = (ndCapsuleInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndCapsuleInfo **)&jarg2; 
  if (arg1) (arg1)->m_capsule = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1capsule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCapsuleInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndCapsuleInfo *)& ((arg1)->m_capsule);
  *(ndCapsuleInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1bvh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCollisionBvhInfo *arg2 = (ndCollisionBvhInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndCollisionBvhInfo **)&jarg2; 
  if (arg1) (arg1)->m_bvh = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1bvh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCollisionBvhInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndCollisionBvhInfo *)& ((arg1)->m_bvh);
  *(ndCollisionBvhInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1cylinder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCylinderInfo *arg2 = (ndCylinderInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndCylinderInfo **)&jarg2; 
  if (arg1) (arg1)->m_cylinder = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1cylinder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCylinderInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndCylinderInfo *)& ((arg1)->m_cylinder);
  *(ndCylinderInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1compound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCoumpoundInfo *arg2 = (ndCoumpoundInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndCoumpoundInfo **)&jarg2; 
  if (arg1) (arg1)->m_compound = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1compound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCoumpoundInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndCoumpoundInfo *)& ((arg1)->m_compound);
  *(ndCoumpoundInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1convexhull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConvexHullInfo *arg2 = (ndConvexHullInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndConvexHullInfo **)&jarg2; 
  if (arg1) (arg1)->m_convexhull = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1convexhull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConvexHullInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndConvexHullInfo *)& ((arg1)->m_convexhull);
  *(ndConvexHullInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1heightfield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndHeighfieldInfo *arg2 = (ndHeighfieldInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndHeighfieldInfo **)&jarg2; 
  if (arg1) (arg1)->m_heightfield = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1heightfield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndHeighfieldInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndHeighfieldInfo *)& ((arg1)->m_heightfield);
  *(ndHeighfieldInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1procedural_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndProceduralInfoInfo *arg2 = (ndProceduralInfoInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndProceduralInfoInfo **)&jarg2; 
  if (arg1) (arg1)->m_procedural = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1procedural_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndProceduralInfoInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndProceduralInfoInfo *)& ((arg1)->m_procedural);
  *(ndProceduralInfoInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1chamferCylinder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndChamferCylinderInfo *arg2 = (ndChamferCylinderInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndChamferCylinderInfo **)&jarg2; 
  if (arg1) (arg1)->m_chamferCylinder = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1chamferCylinder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndChamferCylinderInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndChamferCylinderInfo *)& ((arg1)->m_chamferCylinder);
  *(ndChamferCylinderInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInfo_1m_1paramArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndFloat32 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2; 
  {
    size_t ii;
    ndFloat32 *b = (ndFloat32 *) arg1->m_paramArray;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((ndFloat32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInfo_1m_1paramArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndFloat32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInfo **)&jarg1; 
  result = (ndFloat32 *)(ndFloat32 *) ((arg1)->m_paramArray);
  *(ndFloat32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeInfo *)new ndShapeInfo();
  *(ndShapeInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetRefCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetRefCount();
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->Release();
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1AddRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShape *)((ndShape const *)arg1)->AddRef();
  *(ndShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeBox *)(arg1)->GetAsShapeBox();
  *(ndShapeBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeNull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeNull *)(arg1)->GetAsShapeNull();
  *(ndShapeNull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeCone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeCone *)(arg1)->GetAsShapeCone();
  *(ndShapeCone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapePoint *)(arg1)->GetAsShapePoint();
  *(ndShapePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeConvex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeConvex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeConvex *)(arg1)->GetAsShapeConvex();
  *(ndShapeConvex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeSphere *)(arg1)->GetAsShapeSphere();
  *(ndShapeSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeCapsule *)(arg1)->GetAsShapeCapsule();
  *(ndShapeCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeCylinder *)(arg1)->GetAsShapeCylinder();
  *(ndShapeCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeCompound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCompound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeCompound *)(arg1)->GetAsShapeCompound();
  *(ndShapeCompound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeStaticBVH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeStatic_bvh *)(arg1)->GetAsShapeStaticBVH();
  *(ndShapeStatic_bvh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeStaticMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeStaticMesh *)(arg1)->GetAsShapeStaticMesh();
  *(ndShapeStaticMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeHeightfield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeHeightfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeHeightfield *)(arg1)->GetAsShapeHeightfield();
  *(ndShapeHeightfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeAsConvexPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeConvexPolygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeConvexPolygon *)(arg1)->GetAsShapeAsConvexPolygon();
  *(ndShapeConvexPolygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeChamferCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeChamferCylinder *)(arg1)->GetAsShapeChamferCylinder();
  *(ndShapeChamferCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetAsShapeStaticProceduralMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStaticProceduralMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeStaticProceduralMesh *)(arg1)->GetAsShapeStaticProceduralMesh();
  *(ndShapeStaticProceduralMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetConvexVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetConvexVertexCount();
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetObbSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetObbSize();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetObbOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetObbOrigin();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetUmbraClipSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetUmbraClipSize();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShape_1MassProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndShape *arg1 = (ndShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  (arg1)->MassProperties();
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShape_1DebugShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  arg3 = *(ndShapeDebugNotify **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeDebugNotify & reference is null");
    return ;
  } 
  ((ndShape const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetShapeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetShapeInfo();
  *(ndShapeInfo **)&jresult = new ndShapeInfo((const ndShapeInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetVolume();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetBoxMinRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetBoxMinRadius();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1GetBoxMaxRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = ((ndShape const *)arg1)->GetBoxMaxRadius();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShape_1CalculateAabb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndShape const *)arg1)->CalculateAabb((ndMatrix const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1SupportVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndInt32 *arg3 = (ndInt32 *) (ndInt32 *)0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndInt32 **)&jarg3; 
  result = ((ndShape const *)arg1)->SupportVertex((ndVector const &)*arg2,arg3);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1SupportVertexSpecialProjectPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndShape const *)arg1)->SupportVertexSpecialProjectPoint((ndVector const &)*arg2,(ndVector const &)*arg3);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1SupportVertexSpecial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndFloat32 arg3 ;
  ndInt32 *arg4 = (ndInt32 *) (ndInt32 *)0 ;
  ndFloat32 *argp3 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(ndInt32 **)&jarg4; 
  result = ((ndShape const *)arg1)->SupportVertexSpecial((ndVector const &)*arg2,arg3,arg4);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1CalculatePlaneIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4; 
  result = ((ndShape const *)arg1)->CalculatePlaneIntersection((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1CalculateVolumeIntegral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndShapeInstance **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  result = ((ndShape const *)arg1)->CalculateVolumeIntegral((ndMatrix const &)*arg2,(ndVector const &)*arg3,(ndShapeInstance const &)*arg4);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1RayCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndFloat32 arg5 ;
  ndBody *arg6 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg7 = 0 ;
  ndFloat32 *argp5 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndRayCastNotify **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndRayCastNotify & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(ndBody **)&jarg6; 
  arg7 = *(ndContactPoint **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactPoint & reference is null");
    return 0;
  } 
  result = ((ndShape const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,arg5,(ndBody const *)arg6,*arg7);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1CalculateInertiaAndCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndMatrix *arg4 = 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = ((ndShape const *)arg1)->CalculateInertiaAndCenterOfMass((ndMatrix const &)*arg2,(ndVector const &)*arg3,(ndMatrix const &)*arg4);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShape_1CalculateMassProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return 0;
  } 
  arg5 = *(ndVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return 0;
  } 
  result = ((ndShape const *)arg1)->CalculateMassProperties((ndMatrix const &)*arg2,*arg3,*arg4,*arg5);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShape_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndShape const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeBox *)new ndShapeBox((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndShapeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (ndShapeBox *)new ndShapeBox(arg1,arg2,arg3);
  *(ndShapeBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeBox *arg1 = (ndShapeBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeBox_1GetAsShapeBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeBox *arg1 = (ndShapeBox *) 0 ;
  ndShapeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeBox **)&jarg1; 
  result = (ndShapeBox *)(arg1)->GetAsShapeBox();
  *(ndShapeBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1CONE_1SEGMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndShapeCone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  result = (ndShapeCone *)new ndShapeCone(arg1,arg2);
  *(ndShapeCone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeCone *)new ndShapeCone((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeCone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCone *arg1 = (ndShapeCone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCone_1GetAsShapeCone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCone *arg1 = (ndShapeCone *) 0 ;
  ndShapeCone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCone **)&jarg1; 
  result = (ndShapeCone *)(arg1)->GetAsShapeCone();
  *(ndShapeCone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1CLIP_1MAX_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(512);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1CLIP_1MAX_1POINT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(64);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1twin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  arg2 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg2; 
  if (arg1) (arg1)->m_twin = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1twin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_twin);
  *(ndShapeConvex::ndConvexSimplexEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  arg2 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg2; 
  if (arg1) (arg1)->m_next = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_next);
  *(ndShapeConvex::ndConvexSimplexEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  arg2 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg2; 
  if (arg1) (arg1)->m_prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_prev);
  *(ndShapeConvex::ndConvexSimplexEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1vertex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvex_1ndConvexSimplexEdge_1m_1vertex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  result =  ((arg1)->m_vertex);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeConvex_1ndConvexSimplexEdge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeConvex::ndConvexSimplexEdge *)new ndShapeConvex::ndConvexSimplexEdge();
  *(ndShapeConvex::ndConvexSimplexEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeConvex_1ndConvexSimplexEdge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeConvex::ndConvexSimplexEdge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1SPHERE_1VERTEX_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(18);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 *argp1 ;
  ndShapeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  result = (ndShapeSphere *)new ndShapeSphere(arg1);
  *(ndShapeSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeSphere *)new ndShapeSphere((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeSphere *arg1 = (ndShapeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeSphere **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeSphere_1GetAsShapeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeSphere *arg1 = (ndShapeSphere *) 0 ;
  ndShapeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeSphere **)&jarg1; 
  result = (ndShapeSphere *)(arg1)->GetAsShapeSphere();
  *(ndShapeSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeDebugNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeDebugNotify **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeDebugNotify_1DrawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  ndInt32 arg2 ;
  ndVector *arg3 = (ndVector *) (ndVector *)0 ;
  ndShapeDebugNotify::ndEdgeType *arg4 = (ndShapeDebugNotify::ndEdgeType *) (ndShapeDebugNotify::ndEdgeType *)0 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeDebugNotify **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(ndVector **)&jarg3; 
  arg4 = *(ndShapeDebugNotify::ndEdgeType **)&jarg4; 
  (arg1)->DrawPolygon(arg2,(ndVector const *)arg3,(ndShapeDebugNotify::ndEdgeType const *)arg4);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeDebugNotify_1m_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeDebugNotify **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_instance = (ndShapeInstance const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeDebugNotify_1m_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeDebugNotify **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_instance);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1ndDistanceCalculator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndScene *arg1 = (ndScene *) (ndScene *)0 ;
  ndShapeInstance::ndDistanceCalculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndScene **)&jarg1; 
  result = (ndShapeInstance::ndDistanceCalculator *)new ndShapeInstance::ndDistanceCalculator(arg1);
  *(ndShapeInstance::ndDistanceCalculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1ndDistanceCalculator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ndScene *arg1 = (ndScene *) (ndScene *)0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndMatrix *arg3 = 0 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndMatrix *arg5 = 0 ;
  ndShapeInstance::ndDistanceCalculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ndScene **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  arg3 = *(ndMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg4 = *(ndShapeInstance **)&jarg4; 
  arg5 = *(ndMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = (ndShapeInstance::ndDistanceCalculator *)new ndShapeInstance::ndDistanceCalculator(arg1,arg2,(ndMatrix const &)*arg3,arg4,(ndMatrix const &)*arg5);
  *(ndShapeInstance::ndDistanceCalculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1ClosestPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (bool)(arg1)->ClosestPoint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1matrix0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_matrix0 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1matrix0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_matrix0);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1matrix1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_matrix1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1matrix1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_matrix1);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1point0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_point0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1point0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result =  ((arg1)->m_point0);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1point1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_point1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1point1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result =  ((arg1)->m_point1);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result =  ((arg1)->m_normal);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1scene_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndScene *arg2 = (ndScene *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  arg2 = *(ndScene **)&jarg2; 
  if (arg1) (arg1)->m_scene = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1scene_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndScene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (ndScene *) ((arg1)->m_scene);
  *(ndScene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1shape0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_shape0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1shape0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_shape0);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1shape1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_shape1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1ndDistanceCalculator_1m_1shape1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_shape1);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeInstance_1ndDistanceCalculator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeInstance::ndDistanceCalculator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShape *arg1 = (ndShape *) (ndShape *)0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShape **)&jarg1; 
  result = (ndShapeInstance *)new ndShapeInstance(arg1);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  result = (ndShapeInstance *)new ndShapeInstance((ndShapeInstance const &)*arg1);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = 0 ;
  ndShape *arg2 = (ndShape *) (ndShape *)0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  arg2 = *(ndShape **)&jarg2; 
  result = (ndShapeInstance *)new ndShapeInstance((ndShapeInstance const &)*arg1,arg2);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeInstance_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  nd::TiXmlNode *arg1 = (nd::TiXmlNode *) (nd::TiXmlNode *)0 ;
  ndShapeLoaderCache *arg2 = 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nd::TiXmlNode **)&jarg1; 
  arg2 = *(ndShapeLoaderCache **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeLoaderCache const & reference is null");
    return 0;
  } 
  result = (ndShapeInstance *)new ndShapeInstance((nd::TiXmlNode const *)arg1,(ndShapeLoaderCache const &)*arg2);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeInstance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1Assigment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *arg2 = 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  result = (ndShapeInstance *) &(arg1)->operator =((ndShapeInstance const &)*arg2);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1CalculateInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->CalculateInertia();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1CalculateObb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndShapeInstance const *)arg1)->CalculateObb(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1CalculateAabb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndShapeInstance const *)arg1)->CalculateAabb((ndMatrix const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1DebugShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  arg3 = *(ndShapeDebugNotify **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeDebugNotify & reference is null");
    return ;
  } 
  ((ndShapeInstance const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1RayCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndBody *arg5 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg6 = 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndRayCastNotify **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndRayCastNotify & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg5 = *(ndBody **)&jarg5; 
  arg6 = *(ndContactPoint **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactPoint & reference is null");
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,(ndBody const *)arg5,*arg6);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetShapeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetShapeInfo();
  *(ndShapeInfo **)&jresult = new ndShapeInfo((const ndShapeInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndShapeInstance const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1CalculateBuoyancyCenterOfPresure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return 0;
  } 
  arg3 = *(ndMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->CalculateBuoyancyCenterOfPresure(*arg2,(ndMatrix const &)*arg3,(ndVector const &)*arg4);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetBoxPadding(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  result = ndShapeInstance::GetBoxPadding();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetShape_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShape *)(arg1)->GetShape();
  *(ndShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *arg2 = (ndShape *) (ndShape *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShape **)&jarg2; 
  (arg1)->SetShape(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1SupportVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->SupportVertex((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetScaledTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->GetScaledTransform((ndMatrix const &)*arg2);
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1SupportVertexSpecial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndInt32 *arg3 = (ndInt32 *) (ndInt32 *)0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndInt32 **)&jarg3; 
  result = ((ndShapeInstance const *)arg1)->SupportVertexSpecial((ndVector const &)*arg2,arg3);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1SupportVertexSpecialProjectPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->SupportVertexSpecialProjectPoint((ndVector const &)*arg2,(ndVector const &)*arg3);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetLocalMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetLocalMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetLocalMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetLocalMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetGlobalMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetGlobalMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetGlobalMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetGlobalMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndShapeInstance_1GetCollisionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (bool)((ndShapeInstance const *)arg1)->GetCollisionMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetCollisionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCollisionMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetConvexVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetConvexVertexCount();
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetMaterial();
  *(ndShapeMaterial **)&jresult = new ndShapeMaterial((const ndShapeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShapeMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeMaterial const & reference is null");
    return ;
  } 
  (arg1)->SetMaterial((ndShapeMaterial const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndVector *) &((ndShapeInstance const *)arg1)->GetScale();
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetInvScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndVector *) &((ndShapeInstance const *)arg1)->GetInvScale();
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetAlignmentMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetAlignmentMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetScale((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetGlobalScale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetGlobalScale((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1SetGlobalScale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetGlobalScale((ndMatrix const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1CalculatePlaneIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4; 
  result = ((ndShapeInstance const *)arg1)->CalculatePlaneIntersection((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetVolume();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetBoxMinRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetBoxMinRadius();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetBoxMaxRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetBoxMaxRadius();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_ndShapeInstance_1GetScaleType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShapeInstance::ndScaleType)((ndShapeInstance const *)arg1)->GetScaleType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetUmbraClipSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetUmbraClipSize();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1GetUserDataID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndUnsigned64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetUserDataID();
  *(ndUnsigned64 **)&jresult = new ndUnsigned64((const ndUnsigned64 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1globalMatrix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_globalMatrix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1globalMatrix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_globalMatrix);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1localMatrix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_localMatrix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1localMatrix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_localMatrix);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1alignmentMatrix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2; 
  if (arg1) (arg1)->m_alignmentMatrix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1alignmentMatrix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndMatrix *)& ((arg1)->m_alignmentMatrix);
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_scale = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result =  ((arg1)->m_scale);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1invScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invScale = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1invScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result =  ((arg1)->m_invScale);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1maxScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_maxScale = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1maxScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result =  ((arg1)->m_maxScale);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1shapeMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *arg2 = (ndShapeMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShapeMaterial **)&jarg2; 
  if (arg1) (arg1)->m_shapeMaterial = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1shapeMaterial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShapeMaterial *)& ((arg1)->m_shapeMaterial);
  *(ndShapeMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *arg2 = (ndShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShape **)&jarg2; 
  if (arg1) (arg1)->m_shape = (ndShape const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShape *) ((arg1)->m_shape);
  *(ndShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1ownerBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndBody *arg2 = (ndBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  if (arg1) (arg1)->m_ownerBody = (ndBody const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1ownerBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndBody *) ((arg1)->m_ownerBody);
  *(ndBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1subCollisionHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->m_subCollisionHandle = (void const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1subCollisionHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (void *) ((arg1)->m_subCollisionHandle);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_parent = (ndShapeInstance const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_parent);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1skinMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeInstance_1m_1skinMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result =  ((arg1)->m_skinMargin);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1scaleType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = (ndShapeInstance::ndScaleType)jarg2; 
  if (arg1) (arg1)->m_scaleType = arg2;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_ndShapeInstance_1m_1scaleType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShapeInstance::ndScaleType) ((arg1)->m_scaleType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeInstance_1m_1collisionMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_collisionMode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndShapeInstance_1m_1collisionMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (bool) ((arg1)->m_collisionMode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCapsule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeCapsule *)new ndShapeCapsule((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCapsule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndShapeCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (ndShapeCapsule *)new ndShapeCapsule(arg1,arg2,arg3);
  *(ndShapeCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCapsule_1GetAsShapeCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCapsule *arg1 = (ndShapeCapsule *) 0 ;
  ndShapeCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCapsule **)&jarg1; 
  result = (ndShapeCapsule *)(arg1)->GetAsShapeCapsule();
  *(ndShapeCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCapsule *arg1 = (ndShapeCapsule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCapsule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1COMPOUND_1STACK_1DEPTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(256);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1ndTreeArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeCompound::ndTreeArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeCompound::ndTreeArray *)new ndShapeCompound::ndTreeArray();
  *(ndShapeCompound::ndTreeArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeCompound_1ndTreeArray_1AddNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  ndShapeCompound::ndTreeArray *arg1 = (ndShapeCompound::ndTreeArray *) 0 ;
  ndShapeCompound::ndNodeBase *arg2 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  ndInt32 arg3 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndInt32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ndShapeCompound::ndTreeArray **)&jarg1; 
  arg2 = *(ndShapeCompound::ndNodeBase **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(ndShapeInstance **)&jarg4; 
  (arg1)->AddNode(arg2,arg3,(ndShapeInstance const *)arg4);
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCompound_1ndTreeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCompound::ndTreeArray *arg1 = (ndShapeCompound::ndTreeArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCompound::ndTreeArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeCompound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeCompound *)new ndShapeCompound();
  *(ndShapeCompound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCompound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeCompound *)new ndShapeCompound((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeCompound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCompound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCompound **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeCompound_1SetOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeCompound **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  (arg1)->SetOwner((ndShapeInstance const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCompound_1GetTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeCompound::ndTreeArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCompound **)&jarg1; 
  result = (ndShapeCompound::ndTreeArray *) &((ndShapeCompound const *)arg1)->GetTree();
  *(ndShapeCompound::ndTreeArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeCompound_1BeginAddRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCompound **)&jarg1; 
  (arg1)->BeginAddRemove();
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCompound_1AddCollision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeCompound::ndTreeArray::ndNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeCompound **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  result = (ndShapeCompound::ndTreeArray::ndNode *)(arg1)->AddCollision(arg2);
  *(ndShapeCompound::ndTreeArray::ndNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeCompound_1EndAddRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCompound **)&jarg1; 
  (arg1)->EndAddRemove();
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1ndNodeBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase();
  *(ndShapeCompound::ndNodeBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1ndNodeBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCompound::ndNodeBase *arg1 = 0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCompound::ndNodeBase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeCompound::ndNodeBase const & reference is null");
    return 0;
  } 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase((ndShapeCompound::ndNodeBase const &)*arg1);
  *(ndShapeCompound::ndNodeBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1ndNodeBase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeInstance *arg1 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeInstance **)&jarg1; 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase(arg1);
  *(ndShapeCompound::ndNodeBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCompound_1ndNodeBase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  ndShapeCompound::ndNodeBase *arg2 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeCompound::ndNodeBase **)&jarg1; 
  arg2 = *(ndShapeCompound::ndNodeBase **)&jarg2; 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase(arg1,arg2);
  *(ndShapeCompound::ndNodeBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCompound_1ndNodeBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCompound::ndNodeBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCompound_1ndNodeBase_1GetShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCompound::ndNodeBase **)&jarg1; 
  result = (ndShapeInstance *)((ndShapeCompound::ndNodeBase const *)arg1)->GetShape();
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1TAPED_1CYLINDER_1SEGMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCylinder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeCylinder *)new ndShapeCylinder((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeCylinder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndShapeCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (ndShapeCylinder *)new ndShapeCylinder(arg1,arg2,arg3);
  *(ndShapeCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeCylinder *arg1 = (ndShapeCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeCylinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCylinder_1GetAsShapeCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeCylinder *arg1 = (ndShapeCylinder *) 0 ;
  ndShapeCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeCylinder **)&jarg1; 
  result = (ndShapeCylinder *)(arg1)->GetAsShapeCylinder();
  *(ndShapeCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeStatic_1bvh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndPolygonSoupBuilder *arg1 = 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndPolygonSoupBuilder **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndPolygonSoupBuilder const & reference is null");
    return 0;
  } 
  result = (ndShapeStatic_bvh *)new ndShapeStatic_bvh((ndPolygonSoupBuilder const &)*arg1);
  *(ndShapeStatic_bvh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeStatic_1bvh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeStatic_bvh *)new ndShapeStatic_bvh((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeStatic_bvh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeStatic_1bvh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeStatic_bvh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeStatic_1bvh_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeStatic_bvh **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)(arg1)->operator new(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeStatic_1bvh_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeStatic_bvh **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->operator delete(arg2);
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1MAX_1COLLIDING_1FACES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(512);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_D_1MAX_1COLLIDING_1INDICES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((512*(4*2+3)));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalFaceIndexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndInt32 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  {
    size_t ii;
    ndInt32 *b = (ndInt32 *) arg1->m_globalFaceIndexCount;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((ndInt32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalFaceIndexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  result = (ndInt32 *)(ndInt32 *) ((arg1)->m_globalFaceIndexCount);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalFaceIndexStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndInt32 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  {
    size_t ii;
    ndInt32 *b = (ndInt32 *) arg1->m_globalFaceIndexStart;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((ndInt32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalFaceIndexStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  result = (ndInt32 *)(ndInt32 *) ((arg1)->m_globalFaceIndexStart);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalHitDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndFloat32 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2; 
  {
    size_t ii;
    ndFloat32 *b = (ndFloat32 *) arg1->m_globalHitDistance;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((ndFloat32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1ndMesh_1m_1globalHitDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  ndFloat32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  result = (ndFloat32 *)(ndFloat32 *) ((arg1)->m_globalHitDistance);
  *(ndFloat32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndPolygonMeshDesc_1ndMesh(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc::ndMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndPolygonMeshDesc::ndMesh *)new ndPolygonMeshDesc::ndMesh();
  *(ndPolygonMeshDesc::ndMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndPolygonMeshDesc_1ndMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndPolygonMeshDesc::ndMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndPolygonMeshDesc_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndPolygonMeshDesc *)new ndPolygonMeshDesc();
  *(ndPolygonMeshDesc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndPolygonMeshDesc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  ndContactSolver *arg1 = 0 ;
  bool arg2 ;
  ndPolygonMeshDesc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndContactSolver **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactSolver & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (ndPolygonMeshDesc *)new ndPolygonMeshDesc(*arg1,arg2);
  *(ndPolygonMeshDesc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1SortFaceArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  (arg1)->SortFaceArray();
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetSeparetionDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = ((ndPolygonMeshDesc const *)arg1)->GetSeparetionDistance();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1SetDistanceTravel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetDistanceTravel((ndVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetFaceIndexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg2 = *argp2; 
  result = ((ndPolygonMeshDesc const *)arg1)->GetFaceIndexCount(arg2);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetAdjacentFaceEdgeNormalArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) (ndInt32 *)0 ;
  ndInt32 arg3 ;
  ndInt32 *argp3 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg3 = *argp3; 
  result = (ndInt32 *)((ndPolygonMeshDesc const *)arg1)->GetAdjacentFaceEdgeNormalArray((ndInt32 const *)arg2,arg3);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetNormalIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) (ndInt32 *)0 ;
  ndInt32 arg3 ;
  ndInt32 *argp3 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg3 = *argp3; 
  result = ((ndPolygonMeshDesc const *)arg1)->GetNormalIndex((ndInt32 const *)arg2,arg3);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetFaceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) (ndInt32 *)0 ;
  ndInt32 arg3 ;
  ndInt32 *argp3 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg3 = *argp3; 
  result = ((ndPolygonMeshDesc const *)arg1)->GetFaceId((ndInt32 const *)arg2,arg3);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1GetFaceSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) (ndInt32 *)0 ;
  ndInt32 arg3 ;
  ndInt32 *argp3 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  argp3 = *(ndInt32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg3 = *argp3; 
  result = ((ndPolygonMeshDesc const *)arg1)->GetFaceSize((ndInt32 const *)arg2,arg3);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1boxDistanceTravelInMeshSpace_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndVector");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_boxDistanceTravelInMeshSpace = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1boxDistanceTravelInMeshSpace_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_boxDistanceTravelInMeshSpace);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_faceCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1vertexStrideInBytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vertexStrideInBytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1vertexStrideInBytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_vertexStrideInBytes);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1skinMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1skinMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_skinMargin);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1convexInstance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_convexInstance = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1convexInstance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_convexInstance);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1polySoupInstance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2; 
  if (arg1) (arg1)->m_polySoupInstance = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1polySoupInstance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_polySoupInstance);
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1vertex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 *arg2 = (ndFloat32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1vertex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndFloat32 *) ((arg1)->m_vertex);
  *(ndFloat32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceIndexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  if (arg1) (arg1)->m_faceIndexCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceIndexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndInt32 *) ((arg1)->m_faceIndexCount);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceVertexIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  if (arg1) (arg1)->m_faceVertexIndex = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceVertexIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndInt32 *) ((arg1)->m_faceVertexIndex);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1meshData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndPolygonMeshDesc::ndMesh *arg2 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndPolygonMeshDesc::ndMesh **)&jarg2; 
  if (arg1) (arg1)->m_meshData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1meshData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndPolygonMeshDesc::ndMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndPolygonMeshDesc::ndMesh *)& ((arg1)->m_meshData);
  *(ndPolygonMeshDesc::ndMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceIndexStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 = (ndInt32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  if (arg1) (arg1)->m_faceIndexStart = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1faceIndexStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndInt32 *) ((arg1)->m_faceIndexStart);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1hitDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 *arg2 = (ndFloat32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2; 
  if (arg1) (arg1)->m_hitDistance = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1hitDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndFloat32 *) ((arg1)->m_hitDistance);
  *(ndFloat32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1me_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeStaticMesh *arg2 = (ndShapeStaticMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndShapeStaticMesh **)&jarg2; 
  if (arg1) (arg1)->m_me = (ndShapeStaticMesh const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1me_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndShapeStaticMesh *) ((arg1)->m_me);
  *(ndShapeStaticMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1globalFaceVertexIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = *(ndInt32 **)&jarg2; 
  {
    size_t ii;
    ndInt32 *b = (ndInt32 *) arg1->m_globalFaceVertexIndex;
    for (ii = 0; ii < (size_t)(512*(4*2+3)); ii++) b[ii] = *((ndInt32 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1globalFaceVertexIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (ndInt32 *)(ndInt32 *) ((arg1)->m_globalFaceVertexIndex);
  *(ndInt32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1maxT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_maxT = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1maxT_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_maxT);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1globalIndexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_globalIndexCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1globalIndexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_globalIndexCount);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1threadId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_threadId = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1threadId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result =  ((arg1)->m_threadId);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1doContinueCollisionTest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_doContinueCollisionTest = arg2;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndPolygonMeshDesc_1m_1doContinueCollisionTest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  result = (bool) ((arg1)->m_doContinueCollisionTest);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndPolygonMeshDesc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndPolygonMeshDesc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeStaticMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ndShapeID arg1 ;
  ndShapeStaticMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ndShapeID)jarg1; 
  result = (ndShapeStaticMesh *)new ndShapeStaticMesh(arg1);
  *(ndShapeStaticMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeStaticMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeStaticMesh *)new ndShapeStaticMesh((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeStaticMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeStaticMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeStaticMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeStaticMesh_1DebugShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndShapeStaticMesh **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  arg3 = *(ndShapeDebugNotify **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeDebugNotify & reference is null");
    return ;
  } 
  ((ndShapeStaticMesh const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeStaticMesh_1RayCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndFloat32 arg5 ;
  ndBody *arg6 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg7 = 0 ;
  ndFloat32 *argp5 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(ndShapeStaticMesh **)&jarg1; 
  arg2 = *(ndRayCastNotify **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndRayCastNotify & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(ndBody **)&jarg6; 
  arg7 = *(ndContactPoint **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactPoint & reference is null");
    return 0;
  } 
  result = ((ndShapeStaticMesh const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,arg5,(ndBody const *)arg6,*arg7);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeStaticMesh_1GetCollidingFaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndPolygonMeshDesc *arg2 = (ndPolygonMeshDesc *) (ndPolygonMeshDesc *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeStaticMesh **)&jarg1; 
  arg2 = *(ndPolygonMeshDesc **)&jarg2; 
  ((ndShapeStaticMesh const *)arg1)->GetCollidingFaces(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeStaticMesh_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeStaticMesh **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndShapeStaticMesh const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeConvexHull_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeConvexHull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeConvexHull *)new ndShapeConvexHull((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeConvexHull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeConvexHull_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ndInt32 arg1 ;
  ndInt32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 *arg4 = (ndFloat32 *) (ndFloat32 *)0 ;
  ndInt32 *argp1 ;
  ndInt32 *argp2 ;
  ndFloat32 *argp3 ;
  ndShapeConvexHull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndInt32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(ndFloat32 **)&jarg4; 
  result = (ndShapeConvexHull *)new ndShapeConvexHull(arg1,arg2,arg3,(ndFloat32 const *)arg4);
  *(ndShapeConvexHull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeConvexHull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeConvexHull *arg1 = (ndShapeConvexHull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeConvexHull **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_i0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_i0);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_i1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_i1);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_i2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1i2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_i2);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1material_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1material_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_material);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_normal);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge01_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal_edge01 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge01_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_normal_edge01);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal_edge12 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge12_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_normal_edge12);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge20_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal_edge20 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1normal_1edge20_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_normal_edge20);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1area_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_area = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndTriangle_1m_1area_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  ndInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  result =  ((arg1)->m_area);
  *(ndInt32 **)&jresult = new ndInt32((const ndInt32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeHeightfield_1ndTriangle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndTriangle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeHeightfield::ndTriangle *)new ndShapeHeightfield::ndTriangle();
  *(ndShapeHeightfield::ndTriangle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeHeightfield_1ndTriangle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeHeightfield::ndTriangle *arg1 = (ndShapeHeightfield::ndTriangle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeHeightfield::ndTriangle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndGridQuad_1m_1triangle0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeHeightfield::ndGridQuad *arg1 = (ndShapeHeightfield::ndGridQuad *) 0 ;
  ndShapeHeightfield::ndTriangle *arg2 = (ndShapeHeightfield::ndTriangle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeHeightfield::ndGridQuad **)&jarg1; 
  arg2 = *(ndShapeHeightfield::ndTriangle **)&jarg2; 
  if (arg1) (arg1)->m_triangle0 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndGridQuad_1m_1triangle0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndGridQuad *arg1 = (ndShapeHeightfield::ndGridQuad *) 0 ;
  ndShapeHeightfield::ndTriangle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndGridQuad **)&jarg1; 
  result = (ndShapeHeightfield::ndTriangle *)& ((arg1)->m_triangle0);
  *(ndShapeHeightfield::ndTriangle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1ndGridQuad_1m_1triangle1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndShapeHeightfield::ndGridQuad *arg1 = (ndShapeHeightfield::ndGridQuad *) 0 ;
  ndShapeHeightfield::ndTriangle *arg2 = (ndShapeHeightfield::ndTriangle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndShapeHeightfield::ndGridQuad **)&jarg1; 
  arg2 = *(ndShapeHeightfield::ndTriangle **)&jarg2; 
  if (arg1) (arg1)->m_triangle1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1ndGridQuad_1m_1triangle1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndGridQuad *arg1 = (ndShapeHeightfield::ndGridQuad *) 0 ;
  ndShapeHeightfield::ndTriangle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield::ndGridQuad **)&jarg1; 
  result = (ndShapeHeightfield::ndTriangle *)& ((arg1)->m_triangle1);
  *(ndShapeHeightfield::ndTriangle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeHeightfield_1ndGridQuad(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndShapeHeightfield::ndGridQuad *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeHeightfield::ndGridQuad *)new ndShapeHeightfield::ndGridQuad();
  *(ndShapeHeightfield::ndGridQuad **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeHeightfield_1ndGridQuad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeHeightfield::ndGridQuad *arg1 = (ndShapeHeightfield::ndGridQuad *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeHeightfield::ndGridQuad **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_ndShapeHeightfield_1m_1normalDiagonals_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ndShapeHeightfield::ndGridConstruction result;
  
  (void)jenv;
  (void)jcls;
  result = (ndShapeHeightfield::ndGridConstruction)ndShapeHeightfield::m_normalDiagonals;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeHeightfield_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ndInt32 arg1 ;
  ndInt32 arg2 ;
  ndShapeHeightfield::ndGridConstruction arg3 ;
  ndFloat32 arg4 ;
  ndFloat32 arg5 ;
  ndInt32 *argp1 ;
  ndInt32 *argp2 ;
  ndFloat32 *argp4 ;
  ndFloat32 *argp5 ;
  ndShapeHeightfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndInt32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ndShapeHeightfield::ndGridConstruction)jarg3; 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg5 = *argp5; 
  result = (ndShapeHeightfield *)new ndShapeHeightfield(arg1,arg2,arg3,arg4,arg5);
  *(ndShapeHeightfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeHeightfield_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeHeightfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeHeightfield *)new ndShapeHeightfield((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeHeightfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeHeightfield(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeHeightfield **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1GetElevationMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  ndArray< ndReal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield **)&jarg1; 
  result = (ndArray< ndReal > *) &(arg1)->GetElevationMap();
  *(ndArray< ndReal > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1UpdateElevationMapAabb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield **)&jarg1; 
  (arg1)->UpdateElevationMapAabb();
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndShapeHeightfield_1GetLocalAabb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeHeightfield **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg4 = *(ndVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg5 = *(ndVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndShapeHeightfield const *)arg1)->GetLocalAabb((ndVector const &)*arg2,(ndVector const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT jint JNICALL Java_newtonJNI_DG_1CHAMFERCYLINDER_1SLICES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_DG_1CHAMFERCYLINDER_1BRAKES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_newtonJNI_DG_1MAX_1CHAMFERCYLINDER_1DIR_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeChamferCylinder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ndFloat32 arg1 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp1 ;
  ndFloat32 *argp2 ;
  ndShapeChamferCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ndFloat32 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  result = (ndShapeChamferCylinder *)new ndShapeChamferCylinder(arg1,arg2);
  *(ndShapeChamferCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndShapeChamferCylinder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndShapeChamferCylinder *)new ndShapeChamferCylinder((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndShapeChamferCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndShapeChamferCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndShapeChamferCylinder *arg1 = (ndShapeChamferCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndShapeChamferCylinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeChamferCylinder_1GetAsShapeChamferCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndShapeChamferCylinder *arg1 = (ndShapeChamferCylinder *) 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndShapeChamferCylinder **)&jarg1; 
  result = (ndShapeChamferCylinder *)(arg1)->GetAsShapeChamferCylinder();
  *(ndShapeChamferCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBody *arg1 = (ndBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBody **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBody *)(arg1)->GetAsBody();
  *(ndBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyDynamic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyDynamic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyDynamic *)(arg1)->GetAsBodyDynamic();
  *(ndBodyDynamic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodySentinel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodySentinel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodySentinel *)(arg1)->GetAsBodySentinel();
  *(ndBodySentinel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodySphFluid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodySphFluid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodySphFluid *)(arg1)->GetAsBodySphFluid();
  *(ndBodySphFluid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyKinematic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyKinematic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyKinematic *)(arg1)->GetAsBodyKinematic();
  *(ndBodyKinematic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyParticleSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyParticleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyParticleSet *)(arg1)->GetAsBodyParticleSet();
  *(ndBodyParticleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyPlayerCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyPlayerCapsule *)(arg1)->GetAsBodyPlayerCapsule();
  *(ndBodyPlayerCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyTriggerVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyTriggerVolume *)(arg1)->GetAsBodyTriggerVolume();
  *(ndBodyTriggerVolume **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetAsBodyKinematicSpecial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyKinematicSpecial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyKinematicSpecial *)(arg1)->GetAsBodyKinematicSpecial();
  *(ndBodyKinematicSpecial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetId();
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1GetAABB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector & reference is null");
    return ;
  } 
  ((ndBody const *)arg1)->GetAABB(*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetInvMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetInvMass();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndBody_1RayCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndFastRay *arg3 = 0 ;
  ndFloat32 arg4 ;
  ndFloat32 const *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndRayCastNotify **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndRayCastNotify & reference is null");
    return 0;
  } 
  arg3 = *(ndFastRay **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFastRay const & reference is null");
    return 0;
  } 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32 const");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((ndBody const *)arg1)->RayCast(*arg2,(ndFastRay const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetCentreOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndVector *) &((ndBody const *)arg1)->GetCentreOfMass();
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetCentreOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetCentreOfMass((ndVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetNotifyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = (ndBodyNotify *)((ndBody const *)arg1)->GetNotifyCallback();
  *(ndBodyNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetOmega(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetOmega();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetMatrix();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetVelocity();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetPosition();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetRotation();
  *(ndQuaternion **)&jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetGlobalGetCentreOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  result = ((ndBody const *)arg1)->GetGlobalGetCentreOfMass();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetNotifyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyNotify *arg2 = (ndBodyNotify *) (ndBodyNotify *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndBodyNotify **)&jarg2; 
  (arg1)->SetNotifyCallback(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetOmega(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetOmega((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetVelocity((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndBody const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBody_1GetVelocityAtPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = ((ndBody const *)arg1)->GetVelocityAtPoint((ndVector const &)*arg2);
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetOmegaNoSleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetOmegaNoSleep((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetVelocityNoSleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetVelocityNoSleep((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetMatrixNoSleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetMatrixNoSleep((ndMatrix const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBody_1SetMatrixAndCentreOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBody **)&jarg1; 
  arg2 = *(ndQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndQuaternion const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetMatrixAndCentreOfMass((ndQuaternion const &)*arg2,(ndVector const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1ndContactMap_1FindContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ndBodyKinematic::ndContactMap *arg1 = (ndBodyKinematic::ndContactMap *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndBody *arg3 = (ndBody *) (ndBody *)0 ;
  ndContact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndBodyKinematic::ndContactMap **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  arg3 = *(ndBody **)&jarg3; 
  result = (ndContact *)((ndBodyKinematic::ndContactMap const *)arg1)->FindContact((ndBody const *)arg2,(ndBody const *)arg3);
  *(ndContact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyKinematic_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndBodyKinematic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndBodyKinematic *)new ndBodyKinematic();
  *(ndBodyKinematic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyKinematic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyKinematic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndBodyKinematic *)new ndBodyKinematic((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndBodyKinematic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodyKinematic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndScene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndScene *)((ndBodyKinematic const *)arg1)->GetScene();
  *(ndScene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetIndex();
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetInvMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetInvMass();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetInvInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetInvInertia();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetMassMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndVector *) &((ndBodyKinematic const *)arg1)->GetMassMatrix();
  *(ndVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetInvInertiaMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndMatrix *) &((ndBodyKinematic const *)arg1)->GetInvInertiaMatrix();
  *(ndMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetGyroAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetGyroAlpha();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetGyroTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetGyroTorque();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndBodyKinematic_1GetSleepState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (bool)((ndBodyKinematic const *)arg1)->GetSleepState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1RestoreSleepState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RestoreSleepState(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetSleepState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSleepState(arg2);
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndBodyKinematic_1GetAutoSleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (bool)((ndBodyKinematic const *)arg1)->GetAutoSleep();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetAutoSleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutoSleep(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetMaxLinearStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetMaxLinearStep();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetMaxAngularStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetMaxAngularStep();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetDebugMaxLinearAndAngularIntegrationStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetDebugMaxLinearAndAngularIntegrationStep(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetLinearDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetLinearDamping();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetLinearDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLinearDamping(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetCachedDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetCachedDamping();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetAngularDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAngularDamping();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetAngularDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetAngularDamping((ndVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetCollisionShape_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndShapeInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndShapeInstance *) &(arg1)->GetCollisionShape();
  *(ndShapeInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetCollisionShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndShapeInstance *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndShapeInstance **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return ;
  } 
  (arg1)->SetCollisionShape((ndShapeInstance const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndBodyKinematic_1RayCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndFastRay *arg3 = 0 ;
  ndFloat32 arg4 ;
  ndFloat32 const *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndRayCastNotify **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndRayCastNotify & reference is null");
    return 0;
  } 
  arg3 = *(ndFastRay **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFastRay const & reference is null");
    return 0;
  } 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32 const");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((ndBodyKinematic const *)arg1)->RayCast(*arg2,(ndFastRay const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1CalculateLinearMomentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateLinearMomentum();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1CalculateAngularMomentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateAngularMomentum();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1TotalEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->TotalEnergy();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1CalculateInertiaMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateInertiaMatrix();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1CalculateInvInertiaMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateInvInertiaMatrix();
  *(ndMatrix **)&jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1IntegrateVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->IntegrateVelocity(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndBodyKinematic const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1UpdateInvInertiaMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  (arg1)->UpdateInvInertiaMatrix();
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetMassMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetMassMatrix((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetMassMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndShapeInstance *arg3 = 0 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(ndShapeInstance **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return ;
  } 
  (arg1)->SetMassMatrix(arg2,(ndShapeInstance const &)*arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetMassMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 arg4 ;
  ndFloat32 arg5 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndFloat32 *argp4 ;
  ndFloat32 *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->SetMassMatrix(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetMassMatrix_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 arg2 ;
  ndMatrix *arg3 = 0 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(ndMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetMassMatrix(arg2,(ndMatrix const &)*arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1GetMassMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndFloat32 *arg2 = 0 ;
  ndFloat32 *arg3 = 0 ;
  ndFloat32 *arg4 = 0 ;
  ndFloat32 *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndFloat32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFloat32 & reference is null");
    return ;
  } 
  arg3 = *(ndFloat32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFloat32 & reference is null");
    return ;
  } 
  arg4 = *(ndFloat32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFloat32 & reference is null");
    return ;
  } 
  arg5 = *(ndFloat32 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndFloat32 & reference is null");
    return ;
  } 
  (arg1)->GetMassMatrix(*arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetMatrixUpdateScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->SetMatrixUpdateScene((ndMatrix const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1FindContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndContact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  result = (ndContact *)((ndBodyKinematic const *)arg1)->FindContact((ndBody const *)arg2);
  *(ndContact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetAsBodyKinematic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBodyKinematic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndBodyKinematic *)(arg1)->GetAsBodyKinematic();
  *(ndBodyKinematic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndSkeletonContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndSkeletonContainer *)((ndBodyKinematic const *)arg1)->GetSkeleton();
  *(ndSkeletonContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndSkeletonContainer *arg2 = (ndSkeletonContainer *) (ndSkeletonContainer *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndSkeletonContainer **)&jarg2; 
  (arg1)->SetSkeleton(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetForce();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetTorque();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetForce((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetTorque((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1AddImpulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndFloat32 arg4 ;
  ndFloat32 *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->AddImpulse((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1ApplyImpulsePair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndFloat32 arg4 ;
  ndFloat32 *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ApplyImpulsePair((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1ApplyImpulsesAtPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndInt32 arg2 ;
  ndVector *arg3 = (ndVector *) (ndVector *)0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  ndFloat32 arg5 ;
  ndInt32 *argp2 ;
  ndFloat32 *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(ndVector **)&jarg3; 
  arg4 = *(ndVector **)&jarg4; 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->ApplyImpulsesAtPoint(arg2,(ndVector const *)arg3,(ndVector const *)arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAccel();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAlpha();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetAccel((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyKinematic_1SetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetAlpha((ndVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetContactMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBodyKinematic::ndContactMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndBodyKinematic::ndContactMap *) &(arg1)->GetContactMap();
  *(ndBodyKinematic::ndContactMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1GetJointList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndJointList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyKinematic **)&jarg1; 
  result = (ndJointList *) &((ndBodyKinematic const *)arg1)->GetJointList();
  *(ndJointList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodySentinel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndBodySentinel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndBodySentinel *)new ndBodySentinel();
  *(ndBodySentinel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodySentinel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodySentinel *arg1 = (ndBodySentinel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodySentinel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyTriggerVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndBodyTriggerVolume *)new ndBodyTriggerVolume();
  *(ndBodyTriggerVolume **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyTriggerVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndBodyTriggerVolume *)new ndBodyTriggerVolume((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndBodyTriggerVolume **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodyTriggerVolume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyTriggerVolume_1GetAsBodyTriggerVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  result = (ndBodyTriggerVolume *)(arg1)->GetAsBodyTriggerVolume();
  *(ndBodyTriggerVolume **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyTriggerVolume_1OnTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  arg2 = *(ndBodyKinematic **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnTrigger(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyTriggerVolume_1OnTriggerEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  arg2 = *(ndBodyKinematic **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnTriggerEnter(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyTriggerVolume_1OnTriggerExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  arg2 = *(ndBodyKinematic **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnTriggerExit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyTriggerVolume_1SpecialUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SpecialUpdate(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyTriggerVolume_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyTriggerVolume **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndBodyTriggerVolume const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyPlayerCapsule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndBodyPlayerCapsule *)new ndBodyPlayerCapsule((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndBodyPlayerCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyPlayerCapsule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ndMatrix *arg1 = 0 ;
  ndFloat32 arg2 ;
  ndFloat32 arg3 ;
  ndFloat32 arg4 ;
  ndFloat32 arg5 ;
  ndFloat32 *argp2 ;
  ndFloat32 *argp3 ;
  ndFloat32 *argp4 ;
  ndFloat32 *argp5 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(ndFloat32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(ndFloat32 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg5 = *argp5; 
  result = (ndBodyPlayerCapsule *)new ndBodyPlayerCapsule((ndMatrix const &)*arg1,arg2,arg3,arg4,arg5);
  *(ndBodyPlayerCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodyPlayerCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1GetAsBodyPlayerCapsule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  result = (ndBodyPlayerCapsule *)(arg1)->GetAsBodyPlayerCapsule();
  *(ndBodyPlayerCapsule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1GetForwardSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  result = ((ndBodyPlayerCapsule const *)arg1)->GetForwardSpeed();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1SetForwardSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetForwardSpeed(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1GetLateralSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  result = ((ndBodyPlayerCapsule const *)arg1)->GetLateralSpeed();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1SetLateralSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLateralSpeed(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1GetHeadingAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  result = ((ndBodyPlayerCapsule const *)arg1)->GetHeadingAngle();
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1SetHeadingAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetHeadingAngle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1IsOnFloor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  result = (bool)((ndBodyPlayerCapsule const *)arg1)->IsOnFloor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1ApplyInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ApplyInputs(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyPlayerCapsule_1ContactFrictionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndInt32 arg4 ;
  ndBodyKinematic *arg5 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  ndInt32 *argp4 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ndBodyPlayerCapsule **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  argp4 = *(ndInt32 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(ndBodyKinematic **)&jarg5; 
  result = ((ndBodyPlayerCapsule const *)arg1)->ContactFrictionCallback((ndVector const &)*arg2,(ndVector const &)*arg3,arg4,(ndBodyKinematic const *)arg5);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyNotify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndVector *arg1 = 0 ;
  ndBodyNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  result = (ndBodyNotify *)new ndBodyNotify((ndVector const &)*arg1);
  *(ndBodyNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodyNotify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndLoadSaveBase::ndLoadDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndLoadDescriptor const & reference is null");
    return 0;
  } 
  result = (ndBodyNotify *)new ndBodyNotify((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  *(ndBodyNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodyNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodyNotify **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyNotify_1GetBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  result = (ndBody *)(arg1)->GetBody();
  *(ndBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyNotify_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  result = (void *)((ndBodyNotify const *)arg1)->GetUserData();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyNotify_1GetGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  result = ((ndBodyNotify const *)arg1)->GetGravity();
  *(ndVector **)&jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyNotify_1SetGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return ;
  } 
  (arg1)->SetGravity((ndVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyNotify_1OnTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndInt32 arg2 ;
  ndMatrix *arg3 = 0 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(ndMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return ;
  } 
  (arg1)->OnTransform(arg2,(ndMatrix const &)*arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyNotify_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  arg2 = *(ndLoadSaveBase::ndSaveDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndLoadSaveBase::ndSaveDescriptor const & reference is null");
    return ;
  } 
  ((ndBodyNotify const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodyNotify_1OnApplyExternalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndInt32 arg2 ;
  ndFloat32 arg3 ;
  ndInt32 *argp2 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodyNotify **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnApplyExternalForce(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndMaterial *)new ndMaterial();
  *(ndMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1restitution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1restitution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_restitution);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1staticFriction0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_staticFriction0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1staticFriction0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_staticFriction0);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1staticFriction1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_staticFriction1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1staticFriction1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_staticFriction1);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1dynamicFriction0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_dynamicFriction0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1dynamicFriction0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_dynamicFriction0);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1dynamicFriction1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_dynamicFriction1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1dynamicFriction1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_dynamicFriction1);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1skinMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1skinMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_skinMargin);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1softness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_softness = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1softness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_softness);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndUnsigned32 arg2 ;
  ndUnsigned32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndUnsigned32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndUnsigned32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_flags);
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndMaterial_1m_1userFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndUnsigned32 arg2 ;
  ndUnsigned32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  argp2 = *(ndUnsigned32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndUnsigned32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_userFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndMaterial_1m_1userFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndMaterial **)&jarg1; 
  result =  ((arg1)->m_userFlags);
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndMaterial **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndContactNotify(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndContactNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndContactNotify *)new ndContactNotify();
  *(ndContactNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndContactNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndContactNotify **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndContactNotify_1OnBodyAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndBodyKinematic **)&jarg2; 
  ((ndContactNotify const *)arg1)->OnBodyAdded(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndContactNotify_1OnBodyRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndBodyKinematic **)&jarg2; 
  ((ndContactNotify const *)arg1)->OnBodyRemoved(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndContactNotify_1GetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  ndShapeInstance *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndContact **)&jarg2; 
  arg3 = *(ndShapeInstance **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  arg4 = *(ndShapeInstance **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  result = (ndMaterial *)((ndContactNotify const *)arg1)->GetMaterial((ndContact const *)arg2,(ndShapeInstance const &)*arg3,(ndShapeInstance const &)*arg4);
  *(ndMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndContactNotify_1OnCompoundSubShapeOverlap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  ndFloat32 arg3 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeInstance *arg5 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndFloat32 *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndContact **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(ndShapeInstance **)&jarg4; 
  arg5 = *(ndShapeInstance **)&jarg5; 
  result = (bool)(arg1)->OnCompoundSubShapeOverlap((ndContact const *)arg2,arg3,(ndShapeInstance const *)arg4,(ndShapeInstance const *)arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndContactNotify_1OnAabbOverlap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndContact **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->OnAabbOverlap((ndContact const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndContactNotify_1OnContactCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndContactNotify **)&jarg1; 
  arg2 = *(ndContact **)&jarg2; 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnContactCallback((ndContact const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndRayCastNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_newtonJNI_ndRayCastNotify_1TraceShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndMatrix *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  arg2 = *(ndVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg3 = *(ndVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndVector const & reference is null");
    return 0;
  } 
  arg4 = *(ndShapeInstance **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndShapeInstance const & reference is null");
    return 0;
  } 
  arg5 = *(ndMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndMatrix const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->TraceShape((ndVector const &)*arg2,(ndVector const &)*arg3,(ndShapeInstance const &)*arg4,(ndMatrix const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastNotify_1OnRayPrecastAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndShapeInstance *arg3 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  arg3 = *(ndShapeInstance **)&jarg3; 
  result = (arg1)->OnRayPrecastAction((ndBody const *)arg2,(ndShapeInstance const *)arg3);
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastNotify_1OnRayCastAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *arg2 = 0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  arg2 = *(ndContactPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactPoint const & reference is null");
    return 0;
  } 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->OnRayCastAction((ndContactPoint const &)*arg2,arg3);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndRayCastNotify_1m_1contact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *arg2 = (ndContactPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  arg2 = *(ndContactPoint **)&jarg2; 
  if (arg1) (arg1)->m_contact = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastNotify_1m_1contact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  result = (ndContactPoint *)& ((arg1)->m_contact);
  *(ndContactPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndRayCastNotify_1m_1param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_param = arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastNotify_1m_1param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastNotify **)&jarg1; 
  result =  ((arg1)->m_param);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndRayCastClosestHitCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndRayCastClosestHitCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndRayCastClosestHitCallback *)new ndRayCastClosestHitCallback();
  *(ndRayCastClosestHitCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastClosestHitCallback_1OnRayPrecastAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndShapeInstance *arg3 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ndRayCastClosestHitCallback **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  arg3 = *(ndShapeInstance **)&jarg3; 
  result = (arg1)->OnRayPrecastAction((ndBody const *)arg2,(ndShapeInstance const *)arg3);
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastClosestHitCallback_1OnRayCastAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  ndContactPoint *arg2 = 0 ;
  ndFloat32 arg3 ;
  ndFloat32 *argp3 ;
  ndFloat32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndRayCastClosestHitCallback **)&jarg1; 
  arg2 = *(ndContactPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ndContactPoint const & reference is null");
    return 0;
  } 
  argp3 = *(ndFloat32 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->OnRayCastAction((ndContactPoint const &)*arg2,arg3);
  *(ndFloat32 **)&jresult = new ndFloat32((const ndFloat32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndRayCastClosestHitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndRayCastClosestHitCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1ndBodiesInAabbNotify(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ndBodiesInAabbNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ndBodiesInAabbNotify *)new ndBodiesInAabbNotify();
  *(ndBodiesInAabbNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1ndBodiesInAabbNotify(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ndBodiesInAabbNotify **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodiesInAabbNotify_1OnOverlap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndUnsigned32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ndBodiesInAabbNotify **)&jarg1; 
  arg2 = *(ndBody **)&jarg2; 
  result = (arg1)->OnOverlap((ndBody const *)arg2);
  *(ndUnsigned32 **)&jresult = new ndUnsigned32((const ndUnsigned32 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_ndBodiesInAabbNotify_1m_1bodyArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndArray< ndBody * > *arg2 = (ndArray< ndBody * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodiesInAabbNotify **)&jarg1; 
  arg2 = *(ndArray< ndBody * > **)&jarg2; 
  if (arg1) (arg1)->m_bodyArray = *arg2;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodiesInAabbNotify_1m_1bodyArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndArray< ndBody * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ndBodiesInAabbNotify **)&jarg1; 
  result = (ndArray< ndBody * > *)& ((arg1)->m_bodyArray);
  *(ndArray< ndBody * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_newtonJNI_NOMINAL_1FPS_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(120.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_new_1NewtonWorld(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NewtonWorld *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NewtonWorld *)new NewtonWorld();
  *(NewtonWorld **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_newtonJNI_delete_1NewtonWorld(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NewtonWorld **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_newtonJNI_NewtonWorld_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NewtonWorld **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Update(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_NewtonWorld_1SetSubSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NewtonWorld **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetSubSteps(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_NewtonWorld_1SetIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  ndInt32 arg2 ;
  ndInt32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NewtonWorld **)&jarg1; 
  argp2 = *(ndInt32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndInt32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetIterations(arg2);
}


SWIGEXPORT void JNICALL Java_newtonJNI_NewtonWorld_1SetTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  ndFloat32 arg2 ;
  ndFloat32 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NewtonWorld **)&jarg1; 
  argp2 = *(ndFloat32 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ndFloat32");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetTimestep(arg2);
}


SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShape **)&baseptr = *(ndShapeConvex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeSphere_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeConvex **)&baseptr = *(ndShapeSphere **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCapsule_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeConvex **)&baseptr = *(ndShapeCapsule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCompound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShape **)&baseptr = *(ndShapeCompound **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeCylinder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeConvex **)&baseptr = *(ndShapeCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeStaticMesh_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShape **)&baseptr = *(ndShapeStaticMesh **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeConvexHull_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeConvex **)&baseptr = *(ndShapeConvexHull **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeHeightfield_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeStaticMesh **)&baseptr = *(ndShapeHeightfield **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndShapeChamferCylinder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndShapeConvex **)&baseptr = *(ndShapeChamferCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodyKinematic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndBody **)&baseptr = *(ndBodyKinematic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndBodySentinel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndBodyKinematic **)&baseptr = *(ndBodySentinel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_newtonJNI_ndRayCastClosestHitCallback_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ndRayCastNotify **)&baseptr = *(ndRayCastClosestHitCallback **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

