uniform sampler2D texture;
uniform float transparency;
uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;

in vec2 uv;
in vec3 posit;
in vec3 normal;
in vec3 lightDir;

out vec4 pixelColor;

vec3 PhongDirectionalShading(vec3 normalDir)
{
   vec3 specularDir = normalize (-posit);

   vec3 reflectionDir = -reflect (lightDir, normalDir);

   vec3 ambientCoeff = vec3(0.0f, 0.0f, 0.0f);
   vec3 diffuseCoeff = vec3(material_diffuse);
   vec3 specularCoeff = vec3(0.0f, 0.0f, 0.0f);

   vec3 emission = vec3(0.3f, 0.3f, 0.3f);
   float shininess = 20.0f;

   vec3 ambientColor = ambientCoeff + emission;
   vec3 diffuseColor = diffuseCoeff * max (dot(normalDir, lightDir), 0.0f);
   vec3 specularColor = specularCoeff * pow (max (dot (reflectionDir, specularDir), 0.1), shininess);

   return ambientColor + diffuseColor + specularColor;
}

void main()
{
   vec3 normalDir = normalize (normal);

   vec3 lightIntensity = PhongDirectionalShading(normalDir);

   vec3 texColor = lightIntensity * vec3 (texture2D(texture, uv));
   pixelColor = vec4(texColor, transparency);
}
