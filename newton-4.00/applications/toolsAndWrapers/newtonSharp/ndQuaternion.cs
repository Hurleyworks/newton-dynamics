//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndQuaternion : ndVector {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndQuaternion(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndQuaternion_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndQuaternion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndQuaternion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ndQuaternion() : this(newtonPINVOKE.new_ndQuaternion__SWIG_0(), true) {
  }

  public ndQuaternion(ndVector quat) : this(newtonPINVOKE.new_ndQuaternion__SWIG_1(ndVector.getCPtr(quat)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndQuaternion(ndQuaternion quat) : this(newtonPINVOKE.new_ndQuaternion__SWIG_2(ndQuaternion.getCPtr(quat)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndQuaternion(ndMatrix matrix) : this(newtonPINVOKE.new_ndQuaternion__SWIG_3(ndMatrix.getCPtr(matrix)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndQuaternion(SWIGTYPE_p_ndFloat32 q0, SWIGTYPE_p_ndFloat32 q1, SWIGTYPE_p_ndFloat32 q2, SWIGTYPE_p_ndFloat32 q3) : this(newtonPINVOKE.new_ndQuaternion__SWIG_4(SWIGTYPE_p_ndFloat32.getCPtr(q0), SWIGTYPE_p_ndFloat32.getCPtr(q1), SWIGTYPE_p_ndFloat32.getCPtr(q2), SWIGTYPE_p_ndFloat32.getCPtr(q3)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndQuaternion(ndVector unit_Axis, SWIGTYPE_p_ndFloat32 angle) : this(newtonPINVOKE.new_ndQuaternion__SWIG_5(ndVector.getCPtr(unit_Axis), SWIGTYPE_p_ndFloat32.getCPtr(angle)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public new ndQuaternion Normalize() {
    ndQuaternion ret = new ndQuaternion(newtonPINVOKE.ndQuaternion_Normalize(swigCPtr), true);
    return ret;
  }

  public new ndQuaternion Scale(SWIGTYPE_p_ndFloat32 scale) {
    ndQuaternion ret = new ndQuaternion(newtonPINVOKE.ndQuaternion_Scale(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(scale)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndQuaternion Inverse() {
    ndQuaternion ret = new ndQuaternion(newtonPINVOKE.ndQuaternion_Inverse(swigCPtr), true);
    return ret;
  }

  public ndQuaternion Slerp(ndQuaternion q1, SWIGTYPE_p_ndFloat32 t) {
    ndQuaternion ret = new ndQuaternion(newtonPINVOKE.ndQuaternion_Slerp(swigCPtr, ndQuaternion.getCPtr(q1), SWIGTYPE_p_ndFloat32.getCPtr(t)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector CalcAverageOmega(ndQuaternion q1, SWIGTYPE_p_ndFloat32 invdt) {
    ndVector ret = new ndVector(newtonPINVOKE.ndQuaternion_CalcAverageOmega(swigCPtr, ndQuaternion.getCPtr(q1), SWIGTYPE_p_ndFloat32.getCPtr(invdt)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
