/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

	#pragma warning(disable:4127 4316 4456 4701 4706)



#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_newton(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_newton(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_newton(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


	#include <ndNewton.h>
	#include <newtonWorld.h>
	#include "newtonConfig.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_dGetWorkingFileName(char * jarg1, char * jarg2) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  dGetWorkingFileName((char const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dGetZeroMatrix() {
  void * jresult ;
  ndMatrix *result = 0 ;
  
  result = (ndMatrix *) &dGetZeroMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dGetIdentityMatrix() {
  void * jresult ;
  ndMatrix *result = 0 ;
  
  result = (ndMatrix *) &dGetIdentityMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_0() {
  void * jresult ;
  ndMatrix *result = 0 ;
  
  result = (ndMatrix *)new ndMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) (float *)0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (ndMatrix *)new ndMatrix((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1,(ndVector const &)*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ndQuaternion *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndQuaternion const &)*arg1,(ndVector const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndMatrix(void * jarg1) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  
  arg1 = (ndMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_4(void * jarg1) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndVector const &)*arg1,(ndVector const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_GetElement__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  int arg2 ;
  ndVector *result = 0 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ndVector *) &(arg1)->operator [](arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_Inverse(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = ((ndMatrix const *)arg1)->Inverse();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_Inverse4x4(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = ((ndMatrix const *)arg1)->Inverse4x4();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_Transpose(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = ((ndMatrix const *)arg1)->Transpose();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_Transpose4X4(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = ((ndMatrix const *)arg1)->Transpose4X4();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_RotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->RotateVector((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_UnrotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UnrotateVector((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_TransformVector(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformVector((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_UntransformVector(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UntransformVector((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_TransformPlane(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndPlane *arg2 = 0 ;
  ndPlane result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndPlane const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformPlane((ndPlane const &)*arg2);
  jresult = new ndPlane((const ndPlane &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_UntransformPlane(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndPlane *arg2 = 0 ;
  ndPlane result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndPlane const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->UntransformPlane((ndPlane const &)*arg2);
  jresult = new ndPlane((const ndPlane &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_TransformVector1x4(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->TransformVector1x4((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_SolveByGaussianElimination(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->SolveByGaussianElimination((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_TransformBBox(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg5 = (ndVector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndMatrix const *)arg1)->TransformBBox((ndVector const &)*arg2,(ndVector const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_CalcPitchYawRoll(void * jarg1, void * jarg2, void * jarg3) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndMatrix const *)arg1)->CalcPitchYawRoll(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_TransformTriplex__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  int arg3 ;
  float *arg4 = (float *) (float *)0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(float const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_TransformTriplex__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  int arg3 ;
  double *arg4 = (double *) (double *)0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(double const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_TransformTriplex__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  int arg3 ;
  float *arg4 = (float *) (float *)0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ((ndMatrix const *)arg1)->TransformTriplex(arg2,arg3,(float const *)arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMatrix_TestIdentity(void * jarg1) {
  unsigned int jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMatrix_TestSymetric3x3(void * jarg1) {
  unsigned int jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestSymetric3x3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMatrix_TestOrthogonal__SWIG_0(void * jarg1, float jarg2) {
  unsigned int jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((ndMatrix const *)arg1)->TestOrthogonal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMatrix_TestOrthogonal__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  bool result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = (bool)((ndMatrix const *)arg1)->TestOrthogonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_Multiply3X3(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->Multiply3X3((ndMatrix const &)*arg2);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_GetElement__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = ((ndMatrix const *)arg1)->operator *((ndMatrix const &)*arg2);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_EigenVectors(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  result = (arg1)->EigenVectors();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_PolarDecomposition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndMatrix *arg4 = 0 ;
  
  arg1 = (ndMatrix *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg4 = (ndMatrix *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix & type is null", 0);
    return ;
  } 
  ((ndMatrix const *)arg1)->PolarDecomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMatrix__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndMatrix *arg1 = 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *arg3 = 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = (ndMatrix *)new ndMatrix((ndMatrix const &)*arg1,(ndVector const &)*arg2,(ndMatrix const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_m_front_set(void * jarg1, void * jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndMatrix *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_front = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_m_front_get(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  result =  ((arg1)->m_front);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_m_up_set(void * jarg1, void * jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndMatrix *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_up = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_m_up_get(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  result =  ((arg1)->m_up);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_m_right_set(void * jarg1, void * jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndMatrix *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_right = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_m_right_get(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  result =  ((arg1)->m_right);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMatrix_m_posit_set(void * jarg1, void * jarg2) {
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndMatrix *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_posit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndMatrix_m_posit_get(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = (ndMatrix *) 0 ;
  ndVector result;
  
  arg1 = (ndMatrix *)jarg1; 
  result =  ((arg1)->m_posit);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dPitchMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  ndMatrix result;
  
  arg1 = (float)jarg1; 
  result = dPitchMatrix(arg1);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dYawMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  ndMatrix result;
  
  arg1 = (float)jarg1; 
  result = dYawMatrix(arg1);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dRollMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  ndMatrix result;
  
  arg1 = (float)jarg1; 
  result = dRollMatrix(arg1);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_0() {
  void * jresult ;
  ndQuaternion *result = 0 ;
  
  result = (ndQuaternion *)new ndQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_1(void * jarg1) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_2(void * jarg1) {
  void * jresult ;
  ndQuaternion *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  arg1 = (ndQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_3(void * jarg1) {
  void * jresult ;
  ndMatrix *arg1 = 0 ;
  ndQuaternion *result = 0 ;
  
  arg1 = (ndMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = (ndQuaternion *)new ndQuaternion((ndMatrix const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ndQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ndQuaternion *)new ndQuaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndQuaternion__SWIG_5(void * jarg1, float jarg2) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  float arg2 ;
  ndQuaternion *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (ndQuaternion *)new ndQuaternion((ndVector const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Normalize(void * jarg1) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  result = ((ndQuaternion const *)arg1)->Normalize();
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Scale(void * jarg1, float jarg2) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  float arg2 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((ndQuaternion const *)arg1)->Scale(arg2);
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Inverse(void * jarg1) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  result = ((ndQuaternion const *)arg1)->Inverse();
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator +((ndQuaternion const &)*arg2);
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Sub(void * jarg1, void * jarg2) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator -((ndQuaternion const &)*arg2);
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Mul(void * jarg1, void * jarg2) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((ndQuaternion const *)arg1)->operator *((ndQuaternion const &)*arg2);
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_Slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  float arg3 ;
  ndQuaternion result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((ndQuaternion const *)arg1)->Slerp((ndQuaternion const &)*arg2,arg3);
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndQuaternion_CalcAverageOmega(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  ndQuaternion *arg2 = 0 ;
  float arg3 ;
  ndVector result;
  
  arg1 = (ndQuaternion *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((ndQuaternion const *)arg1)->CalcAverageOmega((ndQuaternion const &)*arg2,arg3);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndQuaternion(void * jarg1) {
  ndQuaternion *arg1 = (ndQuaternion *) 0 ;
  
  arg1 = (ndQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeMaterial() {
  void * jresult ;
  ndShapeMaterial *result = 0 ;
  
  result = (ndShapeMaterial *)new ndShapeMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_m_userId_set(void * jarg1, long long jarg2) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  long long arg2 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->m_userId = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ndShapeMaterial_m_userId_get(void * jarg1) {
  long long jresult ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  long long result;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  result = (long long) ((arg1)->m_userId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_nData_m_userData_set(void * jarg1, void * jarg2) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ndShapeMaterial::nData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeMaterial_nData_m_userData_get(void * jarg1) {
  void * jresult ;
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  void *result = 0 ;
  
  arg1 = (ndShapeMaterial::nData *)jarg1; 
  result = (void *) ((arg1)->m_userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_nData_m_alignPad_set(void * jarg1, unsigned long long jarg2) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (ndShapeMaterial::nData *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->m_alignPad = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ndShapeMaterial_nData_m_alignPad_get(void * jarg1) {
  unsigned long long jresult ;
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  unsigned long long result;
  
  arg1 = (ndShapeMaterial::nData *)jarg1; 
  result = (unsigned long long) ((arg1)->m_alignPad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeMaterial_nData() {
  void * jresult ;
  ndShapeMaterial::nData *result = 0 ;
  
  result = (ndShapeMaterial::nData *)new ndShapeMaterial::nData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeMaterial_nData(void * jarg1) {
  ndShapeMaterial::nData *arg1 = (ndShapeMaterial::nData *) 0 ;
  
  arg1 = (ndShapeMaterial::nData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_m_data_set(void * jarg1, void * jarg2) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::nData *arg2 = (ndShapeMaterial::nData *) 0 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  arg2 = (ndShapeMaterial::nData *)jarg2; 
  if (arg1) (arg1)->m_data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeMaterial_m_data_get(void * jarg1) {
  void * jresult ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::nData *result = 0 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  result = (ndShapeMaterial::nData *)& ((arg1)->m_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_dExtraData_m_intData_set(void * jarg1, unsigned long long jarg2) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (ndShapeMaterial::dExtraData *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->m_intData = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ndShapeMaterial_dExtraData_m_intData_get(void * jarg1) {
  unsigned long long jresult ;
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  unsigned long long result;
  
  arg1 = (ndShapeMaterial::dExtraData *)jarg1; 
  result = (unsigned long long) ((arg1)->m_intData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_dExtraData_m_floatData_set(void * jarg1, float jarg2) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  float arg2 ;
  
  arg1 = (ndShapeMaterial::dExtraData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_floatData = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeMaterial_dExtraData_m_floatData_get(void * jarg1) {
  float jresult ;
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  float result;
  
  arg1 = (ndShapeMaterial::dExtraData *)jarg1; 
  result = (float) ((arg1)->m_floatData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeMaterial_dExtraData() {
  void * jresult ;
  ndShapeMaterial::dExtraData *result = 0 ;
  
  result = (ndShapeMaterial::dExtraData *)new ndShapeMaterial::dExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeMaterial_dExtraData(void * jarg1) {
  ndShapeMaterial::dExtraData *arg1 = (ndShapeMaterial::dExtraData *) 0 ;
  
  arg1 = (ndShapeMaterial::dExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeMaterial_m_userParam_set(void * jarg1, void * jarg2) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::dExtraData *arg2 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  arg2 = (ndShapeMaterial::dExtraData *)jarg2; 
  {
    size_t ii;
    ndShapeMaterial::dExtraData *b = (ndShapeMaterial::dExtraData *) arg1->m_userParam;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((ndShapeMaterial::dExtraData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeMaterial_m_userParam_get(void * jarg1) {
  void * jresult ;
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  ndShapeMaterial::dExtraData *result = 0 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  result = (ndShapeMaterial::dExtraData *)(ndShapeMaterial::dExtraData *) ((arg1)->m_userParam);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeMaterial(void * jarg1) {
  ndShapeMaterial *arg1 = (ndShapeMaterial *) 0 ;
  
  arg1 = (ndShapeMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBoxInfo_m_x_set(void * jarg1, float jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndBoxInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBoxInfo_m_x_get(void * jarg1) {
  float jresult ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float result;
  
  arg1 = (ndBoxInfo *)jarg1; 
  result = (float) ((arg1)->m_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBoxInfo_m_y_set(void * jarg1, float jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndBoxInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBoxInfo_m_y_get(void * jarg1) {
  float jresult ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float result;
  
  arg1 = (ndBoxInfo *)jarg1; 
  result = (float) ((arg1)->m_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBoxInfo_m_z_set(void * jarg1, float jarg2) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndBoxInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBoxInfo_m_z_get(void * jarg1) {
  float jresult ;
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  float result;
  
  arg1 = (ndBoxInfo *)jarg1; 
  result = (float) ((arg1)->m_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBoxInfo() {
  void * jresult ;
  ndBoxInfo *result = 0 ;
  
  result = (ndBoxInfo *)new ndBoxInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBoxInfo(void * jarg1) {
  ndBoxInfo *arg1 = (ndBoxInfo *) 0 ;
  
  arg1 = (ndBoxInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPointInfo_m_noUsed_set(void * jarg1, float jarg2) {
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndPointInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndPointInfo_m_noUsed_get(void * jarg1) {
  float jresult ;
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  float result;
  
  arg1 = (ndPointInfo *)jarg1; 
  result = (float) ((arg1)->m_noUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndPointInfo() {
  void * jresult ;
  ndPointInfo *result = 0 ;
  
  result = (ndPointInfo *)new ndPointInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndPointInfo(void * jarg1) {
  ndPointInfo *arg1 = (ndPointInfo *) 0 ;
  
  arg1 = (ndPointInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndSphereInfo_m_radius_set(void * jarg1, float jarg2) {
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndSphereInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndSphereInfo_m_radius_get(void * jarg1) {
  float jresult ;
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  float result;
  
  arg1 = (ndSphereInfo *)jarg1; 
  result = (float) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndSphereInfo() {
  void * jresult ;
  ndSphereInfo *result = 0 ;
  
  result = (ndSphereInfo *)new ndSphereInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndSphereInfo(void * jarg1) {
  ndSphereInfo *arg1 = (ndSphereInfo *) 0 ;
  
  arg1 = (ndSphereInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCylinderInfo_m_radio0_set(void * jarg1, float jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCylinderInfo_m_radio0_get(void * jarg1) {
  float jresult ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float result;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  result = (float) ((arg1)->m_radio0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCylinderInfo_m_radio1_set(void * jarg1, float jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCylinderInfo_m_radio1_get(void * jarg1) {
  float jresult ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float result;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  result = (float) ((arg1)->m_radio1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCylinderInfo_m_height_set(void * jarg1, float jarg2) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCylinderInfo_m_height_get(void * jarg1) {
  float jresult ;
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  float result;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndCylinderInfo() {
  void * jresult ;
  ndCylinderInfo *result = 0 ;
  
  result = (ndCylinderInfo *)new ndCylinderInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndCylinderInfo(void * jarg1) {
  ndCylinderInfo *arg1 = (ndCylinderInfo *) 0 ;
  
  arg1 = (ndCylinderInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCapsuleInfo_m_radio0_set(void * jarg1, float jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCapsuleInfo_m_radio0_get(void * jarg1) {
  float jresult ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float result;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  result = (float) ((arg1)->m_radio0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCapsuleInfo_m_radio1_set(void * jarg1, float jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCapsuleInfo_m_radio1_get(void * jarg1) {
  float jresult ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float result;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  result = (float) ((arg1)->m_radio1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCapsuleInfo_m_height_set(void * jarg1, float jarg2) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndCapsuleInfo_m_height_get(void * jarg1) {
  float jresult ;
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  float result;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndCapsuleInfo() {
  void * jresult ;
  ndCapsuleInfo *result = 0 ;
  
  result = (ndCapsuleInfo *)new ndCapsuleInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndCapsuleInfo(void * jarg1) {
  ndCapsuleInfo *arg1 = (ndCapsuleInfo *) 0 ;
  
  arg1 = (ndCapsuleInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConeInfo_m_radius_set(void * jarg1, float jarg2) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndConeInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndConeInfo_m_radius_get(void * jarg1) {
  float jresult ;
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  float result;
  
  arg1 = (ndConeInfo *)jarg1; 
  result = (float) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConeInfo_m_height_set(void * jarg1, float jarg2) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndConeInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndConeInfo_m_height_get(void * jarg1) {
  float jresult ;
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  float result;
  
  arg1 = (ndConeInfo *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndConeInfo() {
  void * jresult ;
  ndConeInfo *result = 0 ;
  
  result = (ndConeInfo *)new ndConeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndConeInfo(void * jarg1) {
  ndConeInfo *arg1 = (ndConeInfo *) 0 ;
  
  arg1 = (ndConeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndChamferCylinderInfo_m_r_set(void * jarg1, float jarg2) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndChamferCylinderInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndChamferCylinderInfo_m_r_get(void * jarg1) {
  float jresult ;
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  float result;
  
  arg1 = (ndChamferCylinderInfo *)jarg1; 
  result = (float) ((arg1)->m_r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndChamferCylinderInfo_m_height_set(void * jarg1, float jarg2) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndChamferCylinderInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndChamferCylinderInfo_m_height_get(void * jarg1) {
  float jresult ;
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  float result;
  
  arg1 = (ndChamferCylinderInfo *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndChamferCylinderInfo() {
  void * jresult ;
  ndChamferCylinderInfo *result = 0 ;
  
  result = (ndChamferCylinderInfo *)new ndChamferCylinderInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndChamferCylinderInfo(void * jarg1) {
  ndChamferCylinderInfo *arg1 = (ndChamferCylinderInfo *) 0 ;
  
  arg1 = (ndChamferCylinderInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConvexHullInfo_m_vertexCount_set(void * jarg1, int jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndConvexHullInfo_m_vertexCount_get(void * jarg1) {
  int jresult ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int result;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  result = (int) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConvexHullInfo_m_strideInBytes_set(void * jarg1, int jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_strideInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndConvexHullInfo_m_strideInBytes_get(void * jarg1) {
  int jresult ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int result;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  result = (int) ((arg1)->m_strideInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConvexHullInfo_m_faceCount_set(void * jarg1, int jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndConvexHullInfo_m_faceCount_get(void * jarg1) {
  int jresult ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  int result;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  result = (int) ((arg1)->m_faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndConvexHullInfo_m_vertex_set(void * jarg1, void * jarg2) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndVector *arg2 = (ndVector *) 0 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  arg2 = (ndVector *)jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndConvexHullInfo_m_vertex_get(void * jarg1) {
  void * jresult ;
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  ndVector *result = 0 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  result = (ndVector *) ((arg1)->m_vertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndConvexHullInfo() {
  void * jresult ;
  ndConvexHullInfo *result = 0 ;
  
  result = (ndConvexHullInfo *)new ndConvexHullInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndConvexHullInfo(void * jarg1) {
  ndConvexHullInfo *arg1 = (ndConvexHullInfo *) 0 ;
  
  arg1 = (ndConvexHullInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCoumpoundInfo_m_noUsed_set(void * jarg1, int jarg2) {
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndCoumpoundInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndCoumpoundInfo_m_noUsed_get(void * jarg1) {
  int jresult ;
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  int result;
  
  arg1 = (ndCoumpoundInfo *)jarg1; 
  result = (int) ((arg1)->m_noUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndCoumpoundInfo() {
  void * jresult ;
  ndCoumpoundInfo *result = 0 ;
  
  result = (ndCoumpoundInfo *)new ndCoumpoundInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndCoumpoundInfo(void * jarg1) {
  ndCoumpoundInfo *arg1 = (ndCoumpoundInfo *) 0 ;
  
  arg1 = (ndCoumpoundInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndProceduralInfoInfo_m_noUsed_set(void * jarg1, int jarg2) {
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndProceduralInfoInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_noUsed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndProceduralInfoInfo_m_noUsed_get(void * jarg1) {
  int jresult ;
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  int result;
  
  arg1 = (ndProceduralInfoInfo *)jarg1; 
  result = (int) ((arg1)->m_noUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndProceduralInfoInfo() {
  void * jresult ;
  ndProceduralInfoInfo *result = 0 ;
  
  result = (ndProceduralInfoInfo *)new ndProceduralInfoInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndProceduralInfoInfo(void * jarg1) {
  ndProceduralInfoInfo *arg1 = (ndProceduralInfoInfo *) 0 ;
  
  arg1 = (ndProceduralInfoInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCollisionBvhInfo_m_vertexCount_set(void * jarg1, int jarg2) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndCollisionBvhInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndCollisionBvhInfo_m_vertexCount_get(void * jarg1) {
  int jresult ;
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  int result;
  
  arg1 = (ndCollisionBvhInfo *)jarg1; 
  result = (int) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndCollisionBvhInfo_m_indexCount_set(void * jarg1, int jarg2) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndCollisionBvhInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_indexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndCollisionBvhInfo_m_indexCount_get(void * jarg1) {
  int jresult ;
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  int result;
  
  arg1 = (ndCollisionBvhInfo *)jarg1; 
  result = (int) ((arg1)->m_indexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndCollisionBvhInfo() {
  void * jresult ;
  ndCollisionBvhInfo *result = 0 ;
  
  result = (ndCollisionBvhInfo *)new ndCollisionBvhInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndCollisionBvhInfo(void * jarg1) {
  ndCollisionBvhInfo *arg1 = (ndCollisionBvhInfo *) 0 ;
  
  arg1 = (ndCollisionBvhInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_width_set(void * jarg1, int jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndHeighfieldInfo_m_width_get(void * jarg1) {
  int jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (int) ((arg1)->m_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_height_set(void * jarg1, int jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndHeighfieldInfo_m_height_get(void * jarg1) {
  int jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (int) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_gridsDiagonals_set(void * jarg1, int jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_gridsDiagonals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndHeighfieldInfo_m_gridsDiagonals_get(void * jarg1) {
  int jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  int result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (int) ((arg1)->m_gridsDiagonals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_verticalScale_set(void * jarg1, float jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_verticalScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndHeighfieldInfo_m_verticalScale_get(void * jarg1) {
  float jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (float) ((arg1)->m_verticalScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_horizonalScale_x_set(void * jarg1, float jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_horizonalScale_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndHeighfieldInfo_m_horizonalScale_x_get(void * jarg1) {
  float jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (float) ((arg1)->m_horizonalScale_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_horizonalScale_z_set(void * jarg1, float jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_horizonalScale_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndHeighfieldInfo_m_horizonalScale_z_get(void * jarg1) {
  float jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  float result;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (float) ((arg1)->m_horizonalScale_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_elevation_set(void * jarg1, void * jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndReal *arg2 = (ndReal *) 0 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (ndReal *)jarg2; 
  if (arg1) (arg1)->m_elevation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndHeighfieldInfo_m_elevation_get(void * jarg1) {
  void * jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  ndReal *result = 0 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (ndReal *) ((arg1)->m_elevation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndHeighfieldInfo_m_atributes_set(void * jarg1, void * jarg2) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  signed char *arg2 = (signed char *) 0 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  arg2 = (signed char *)jarg2; 
  if (arg1) (arg1)->m_atributes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndHeighfieldInfo_m_atributes_get(void * jarg1) {
  void * jresult ;
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  signed char *result = 0 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  result = (signed char *) ((arg1)->m_atributes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndHeighfieldInfo() {
  void * jresult ;
  ndHeighfieldInfo *result = 0 ;
  
  result = (ndHeighfieldInfo *)new ndHeighfieldInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndHeighfieldInfo(void * jarg1) {
  ndHeighfieldInfo *arg1 = (ndHeighfieldInfo *) 0 ;
  
  arg1 = (ndHeighfieldInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_offsetMatrix_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_offsetMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_offsetMatrix_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_offsetMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_scale_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_scale_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result =  ((arg1)->m_scale);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_shapeMaterial_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeMaterial *arg2 = (ndShapeMaterial *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndShapeMaterial *)jarg2; 
  if (arg1) (arg1)->m_shapeMaterial = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_shapeMaterial_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeMaterial *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndShapeMaterial *)& ((arg1)->m_shapeMaterial);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_collisionType_set(void * jarg1, int jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeID arg2 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndShapeID)jarg2; 
  if (arg1) (arg1)->m_collisionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeInfo_m_collisionType_get(void * jarg1) {
  int jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndShapeID result;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndShapeID) ((arg1)->m_collisionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_box_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndBoxInfo *arg2 = (ndBoxInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndBoxInfo *)jarg2; 
  if (arg1) (arg1)->m_box = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_box_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndBoxInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndBoxInfo *)& ((arg1)->m_box);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_cone_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConeInfo *arg2 = (ndConeInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndConeInfo *)jarg2; 
  if (arg1) (arg1)->m_cone = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_cone_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConeInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndConeInfo *)& ((arg1)->m_cone);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_point_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndPointInfo *arg2 = (ndPointInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndPointInfo *)jarg2; 
  if (arg1) (arg1)->m_point = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_point_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndPointInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndPointInfo *)& ((arg1)->m_point);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_sphere_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndSphereInfo *arg2 = (ndSphereInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndSphereInfo *)jarg2; 
  if (arg1) (arg1)->m_sphere = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_sphere_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndSphereInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndSphereInfo *)& ((arg1)->m_sphere);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_capsule_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCapsuleInfo *arg2 = (ndCapsuleInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndCapsuleInfo *)jarg2; 
  if (arg1) (arg1)->m_capsule = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_capsule_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCapsuleInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndCapsuleInfo *)& ((arg1)->m_capsule);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_bvh_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCollisionBvhInfo *arg2 = (ndCollisionBvhInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndCollisionBvhInfo *)jarg2; 
  if (arg1) (arg1)->m_bvh = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_bvh_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCollisionBvhInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndCollisionBvhInfo *)& ((arg1)->m_bvh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_cylinder_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCylinderInfo *arg2 = (ndCylinderInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndCylinderInfo *)jarg2; 
  if (arg1) (arg1)->m_cylinder = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_cylinder_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCylinderInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndCylinderInfo *)& ((arg1)->m_cylinder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_compound_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCoumpoundInfo *arg2 = (ndCoumpoundInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndCoumpoundInfo *)jarg2; 
  if (arg1) (arg1)->m_compound = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_compound_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndCoumpoundInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndCoumpoundInfo *)& ((arg1)->m_compound);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_convexhull_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConvexHullInfo *arg2 = (ndConvexHullInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndConvexHullInfo *)jarg2; 
  if (arg1) (arg1)->m_convexhull = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_convexhull_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndConvexHullInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndConvexHullInfo *)& ((arg1)->m_convexhull);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_heightfield_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndHeighfieldInfo *arg2 = (ndHeighfieldInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndHeighfieldInfo *)jarg2; 
  if (arg1) (arg1)->m_heightfield = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_heightfield_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndHeighfieldInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndHeighfieldInfo *)& ((arg1)->m_heightfield);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_procedural_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndProceduralInfoInfo *arg2 = (ndProceduralInfoInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndProceduralInfoInfo *)jarg2; 
  if (arg1) (arg1)->m_procedural = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_procedural_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndProceduralInfoInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndProceduralInfoInfo *)& ((arg1)->m_procedural);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_chamferCylinder_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndChamferCylinderInfo *arg2 = (ndChamferCylinderInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (ndChamferCylinderInfo *)jarg2; 
  if (arg1) (arg1)->m_chamferCylinder = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_chamferCylinder_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  ndChamferCylinderInfo *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (ndChamferCylinderInfo *)& ((arg1)->m_chamferCylinder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInfo_m_paramArray_set(void * jarg1, void * jarg2) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_paramArray;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInfo_m_paramArray_get(void * jarg1) {
  void * jresult ;
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_paramArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInfo() {
  void * jresult ;
  ndShapeInfo *result = 0 ;
  
  result = (ndShapeInfo *)new ndShapeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeInfo(void * jarg1) {
  ndShapeInfo *arg1 = (ndShapeInfo *) 0 ;
  
  arg1 = (ndShapeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShape_GetRefCount(void * jarg1) {
  int jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  int result;
  
  arg1 = (ndShape *)jarg1; 
  result = (int)((ndShape const *)arg1)->GetRefCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShape_Release(void * jarg1) {
  int jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  int result;
  
  arg1 = (ndShape *)jarg1; 
  result = (int)((ndShape const *)arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_AddRef(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShape *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShape *)((ndShape const *)arg1)->AddRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeBox(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeBox *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeBox *)(arg1)->GetAsShapeBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeNull(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeNull *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeNull *)(arg1)->GetAsShapeNull();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeCone(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCone *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeCone *)(arg1)->GetAsShapeCone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapePoint(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapePoint *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapePoint *)(arg1)->GetAsShapePoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeConvex(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeConvex *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeConvex *)(arg1)->GetAsShapeConvex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeSphere(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeSphere *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeSphere *)(arg1)->GetAsShapeSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeCapsule(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCapsule *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeCapsule *)(arg1)->GetAsShapeCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeCylinder(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCylinder *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeCylinder *)(arg1)->GetAsShapeCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeCompound(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeCompound *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeCompound *)(arg1)->GetAsShapeCompound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeStaticBVH(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeStatic_bvh *)(arg1)->GetAsShapeStaticBVH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeStaticMesh(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeStaticMesh *)(arg1)->GetAsShapeStaticMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeHeightfield(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeHeightfield *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeHeightfield *)(arg1)->GetAsShapeHeightfield();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeAsConvexPolygon(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeConvexPolygon *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeConvexPolygon *)(arg1)->GetAsShapeAsConvexPolygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeChamferCylinder(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeChamferCylinder *)(arg1)->GetAsShapeChamferCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetAsShapeStaticProceduralMesh(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeStaticProceduralMesh *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeStaticProceduralMesh *)(arg1)->GetAsShapeStaticProceduralMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShape_GetConvexVertexCount(void * jarg1) {
  int jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  int result;
  
  arg1 = (ndShape *)jarg1; 
  result = (int)((ndShape const *)arg1)->GetConvexVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetObbSize(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  result = ((ndShape const *)arg1)->GetObbSize();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetObbOrigin(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  result = ((ndShape const *)arg1)->GetObbOrigin();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_GetUmbraClipSize(void * jarg1) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  result = (float)((ndShape const *)arg1)->GetUmbraClipSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShape_MassProperties(void * jarg1) {
  ndShape *arg1 = (ndShape *) 0 ;
  
  arg1 = (ndShape *)jarg1; 
  (arg1)->MassProperties();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShape_DebugShape(void * jarg1, void * jarg2, void * jarg3) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  arg3 = (ndShapeDebugNotify *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeDebugNotify & type is null", 0);
    return ;
  } 
  ((ndShape const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_GetShapeInfo(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndShapeInfo result;
  
  arg1 = (ndShape *)jarg1; 
  result = ((ndShape const *)arg1)->GetShapeInfo();
  jresult = new ndShapeInfo((const ndShapeInfo &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_GetVolume(void * jarg1) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  result = (float)((ndShape const *)arg1)->GetVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_GetBoxMinRadius(void * jarg1) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  result = (float)((ndShape const *)arg1)->GetBoxMinRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_GetBoxMaxRadius(void * jarg1) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  result = (float)((ndShape const *)arg1)->GetBoxMaxRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShape_CalculateAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndShape const *)arg1)->CalculateAabb((ndMatrix const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_SupportVertex(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  int *arg3 = (int *) (int *)0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = ((ndShape const *)arg1)->SupportVertex((ndVector const &)*arg2,arg3);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_SupportVertexSpecialProjectPoint(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndShape const *)arg1)->SupportVertexSpecialProjectPoint((ndVector const &)*arg2,(ndVector const &)*arg3);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_SupportVertexSpecial(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  float arg3 ;
  int *arg4 = (int *) (int *)0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int *)jarg4; 
  result = ((ndShape const *)arg1)->SupportVertexSpecial((ndVector const &)*arg2,arg3,arg4);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShape_CalculatePlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  int result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4; 
  result = (int)((ndShape const *)arg1)->CalculatePlaneIntersection((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_CalculateVolumeIntegral(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndVector result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndShapeInstance *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  result = ((ndShape const *)arg1)->CalculateVolumeIntegral((ndMatrix const &)*arg2,(ndVector const &)*arg3,(ndShapeInstance const &)*arg4);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  float arg5 ;
  ndBody *arg6 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg7 = 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndRayCastNotify *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndRayCastNotify & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (ndBody *)jarg6; 
  arg7 = (ndContactPoint *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactPoint & type is null", 0);
    return 0;
  } 
  result = (float)((ndShape const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,arg5,(ndBody const *)arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShape_CalculateInertiaAndCenterOfMass(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndMatrix *arg4 = 0 ;
  ndMatrix result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndMatrix *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = ((ndShape const *)arg1)->CalculateInertiaAndCenterOfMass((ndMatrix const &)*arg2,(ndVector const &)*arg3,(ndMatrix const &)*arg4);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShape_CalculateMassProperties(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  ndShape *arg1 = (ndShape *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  float result;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return 0;
  } 
  arg5 = (ndVector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return 0;
  } 
  result = (float)((ndShape const *)arg1)->CalculateMassProperties((ndMatrix const &)*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShape_Save(void * jarg1, void * jarg2) {
  ndShape *arg1 = (ndShape *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndShape const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeBox__SWIG_0(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeBox *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeBox *)new ndShapeBox((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeBox__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ndShapeBox *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ndShapeBox *)new ndShapeBox(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeBox(void * jarg1) {
  ndShapeBox *arg1 = (ndShapeBox *) 0 ;
  
  arg1 = (ndShapeBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeBox_GetAsShapeBox(void * jarg1) {
  void * jresult ;
  ndShapeBox *arg1 = (ndShapeBox *) 0 ;
  ndShapeBox *result = 0 ;
  
  arg1 = (ndShapeBox *)jarg1; 
  result = (ndShapeBox *)(arg1)->GetAsShapeBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_CONE_SEGMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCone__SWIG_0(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ndShapeCone *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ndShapeCone *)new ndShapeCone(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCone__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCone *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeCone *)new ndShapeCone((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCone(void * jarg1) {
  ndShapeCone *arg1 = (ndShapeCone *) 0 ;
  
  arg1 = (ndShapeCone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCone_GetAsShapeCone(void * jarg1) {
  void * jresult ;
  ndShapeCone *arg1 = (ndShapeCone *) 0 ;
  ndShapeCone *result = 0 ;
  
  arg1 = (ndShapeCone *)jarg1; 
  result = (ndShapeCone *)(arg1)->GetAsShapeCone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_CLIP_MAX_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(512);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_CLIP_MAX_POINT_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_twin_set(void * jarg1, void * jarg2) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  arg2 = (ndShapeConvex::ndConvexSimplexEdge *)jarg2; 
  if (arg1) (arg1)->m_twin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_twin_get(void * jarg1) {
  void * jresult ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_twin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_next_set(void * jarg1, void * jarg2) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  arg2 = (ndShapeConvex::ndConvexSimplexEdge *)jarg2; 
  if (arg1) (arg1)->m_next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_next_get(void * jarg1) {
  void * jresult ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_prev_set(void * jarg1, void * jarg2) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *arg2 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  arg2 = (ndShapeConvex::ndConvexSimplexEdge *)jarg2; 
  if (arg1) (arg1)->m_prev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_prev_get(void * jarg1) {
  void * jresult ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  result = (ndShapeConvex::ndConvexSimplexEdge *) ((arg1)->m_prev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_vertex_set(void * jarg1, int jarg2) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  int arg2 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeConvex_ndConvexSimplexEdge_m_vertex_get(void * jarg1) {
  int jresult ;
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  int result;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  result = (int) ((arg1)->m_vertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeConvex_ndConvexSimplexEdge() {
  void * jresult ;
  ndShapeConvex::ndConvexSimplexEdge *result = 0 ;
  
  result = (ndShapeConvex::ndConvexSimplexEdge *)new ndShapeConvex::ndConvexSimplexEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeConvex_ndConvexSimplexEdge(void * jarg1) {
  ndShapeConvex::ndConvexSimplexEdge *arg1 = (ndShapeConvex::ndConvexSimplexEdge *) 0 ;
  
  arg1 = (ndShapeConvex::ndConvexSimplexEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_SPHERE_VERTEX_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeSphere__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  ndShapeSphere *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (ndShapeSphere *)new ndShapeSphere(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeSphere__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeSphere *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeSphere *)new ndShapeSphere((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeSphere(void * jarg1) {
  ndShapeSphere *arg1 = (ndShapeSphere *) 0 ;
  
  arg1 = (ndShapeSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeSphere_GetAsShapeSphere(void * jarg1) {
  void * jresult ;
  ndShapeSphere *arg1 = (ndShapeSphere *) 0 ;
  ndShapeSphere *result = 0 ;
  
  arg1 = (ndShapeSphere *)jarg1; 
  result = (ndShapeSphere *)(arg1)->GetAsShapeSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCapsule__SWIG_0(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCapsule *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeCapsule *)new ndShapeCapsule((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCapsule__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ndShapeCapsule *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ndShapeCapsule *)new ndShapeCapsule(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCapsule_GetAsShapeCapsule(void * jarg1) {
  void * jresult ;
  ndShapeCapsule *arg1 = (ndShapeCapsule *) 0 ;
  ndShapeCapsule *result = 0 ;
  
  arg1 = (ndShapeCapsule *)jarg1; 
  result = (ndShapeCapsule *)(arg1)->GetAsShapeCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCapsule(void * jarg1) {
  ndShapeCapsule *arg1 = (ndShapeCapsule *) 0 ;
  
  arg1 = (ndShapeCapsule *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_COMPOUND_STACK_DEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)(256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound_ndTreeArray() {
  void * jresult ;
  ndShapeCompound::ndTreeArray *result = 0 ;
  
  result = (ndShapeCompound::ndTreeArray *)new ndShapeCompound::ndTreeArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeCompound_ndTreeArray_AddNode(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ndShapeCompound::ndTreeArray *arg1 = (ndShapeCompound::ndTreeArray *) 0 ;
  ndShapeCompound::ndNodeBase *arg2 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  int arg3 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  
  arg1 = (ndShapeCompound::ndTreeArray *)jarg1; 
  arg2 = (ndShapeCompound::ndNodeBase *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ndShapeInstance *)jarg4; 
  (arg1)->AddNode(arg2,arg3,(ndShapeInstance const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCompound_ndTreeArray(void * jarg1) {
  ndShapeCompound::ndTreeArray *arg1 = (ndShapeCompound::ndTreeArray *) 0 ;
  
  arg1 = (ndShapeCompound::ndTreeArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound__SWIG_0() {
  void * jresult ;
  ndShapeCompound *result = 0 ;
  
  result = (ndShapeCompound *)new ndShapeCompound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCompound *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeCompound *)new ndShapeCompound((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCompound(void * jarg1) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeCompound_SetOwner(void * jarg1, void * jarg2) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  (arg1)->SetOwner((ndShapeInstance const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCompound_GetTree(void * jarg1) {
  void * jresult ;
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeCompound::ndTreeArray *result = 0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  result = (ndShapeCompound::ndTreeArray *) &((ndShapeCompound const *)arg1)->GetTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeCompound_BeginAddRemove(void * jarg1) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  (arg1)->BeginAddRemove();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCompound_AddCollision(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeCompound::ndTreeArray::ndNode *result = 0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  result = (ndShapeCompound::ndTreeArray::ndNode *)(arg1)->AddCollision(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeCompound_EndAddRemove(void * jarg1) {
  ndShapeCompound *arg1 = (ndShapeCompound *) 0 ;
  
  arg1 = (ndShapeCompound *)jarg1; 
  (arg1)->EndAddRemove();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound_ndNodeBase__SWIG_0() {
  void * jresult ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound_ndNodeBase__SWIG_1(void * jarg1) {
  void * jresult ;
  ndShapeCompound::ndNodeBase *arg1 = 0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  arg1 = (ndShapeCompound::ndNodeBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeCompound::ndNodeBase const & type is null", 0);
    return 0;
  } 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase((ndShapeCompound::ndNodeBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound_ndNodeBase__SWIG_2(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCompound_ndNodeBase__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  ndShapeCompound::ndNodeBase *arg2 = (ndShapeCompound::ndNodeBase *) (ndShapeCompound::ndNodeBase *)0 ;
  ndShapeCompound::ndNodeBase *result = 0 ;
  
  arg1 = (ndShapeCompound::ndNodeBase *)jarg1; 
  arg2 = (ndShapeCompound::ndNodeBase *)jarg2; 
  result = (ndShapeCompound::ndNodeBase *)new ndShapeCompound::ndNodeBase(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCompound_ndNodeBase(void * jarg1) {
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) 0 ;
  
  arg1 = (ndShapeCompound::ndNodeBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCompound_ndNodeBase_GetShape(void * jarg1) {
  void * jresult ;
  ndShapeCompound::ndNodeBase *arg1 = (ndShapeCompound::ndNodeBase *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeCompound::ndNodeBase *)jarg1; 
  result = (ndShapeInstance *)((ndShapeCompound::ndNodeBase const *)arg1)->GetShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_TAPED_CYLINDER_SEGMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCylinder__SWIG_0(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeCylinder *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeCylinder *)new ndShapeCylinder((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeCylinder__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ndShapeCylinder *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ndShapeCylinder *)new ndShapeCylinder(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeCylinder(void * jarg1) {
  ndShapeCylinder *arg1 = (ndShapeCylinder *) 0 ;
  
  arg1 = (ndShapeCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeCylinder_GetAsShapeCylinder(void * jarg1) {
  void * jresult ;
  ndShapeCylinder *arg1 = (ndShapeCylinder *) 0 ;
  ndShapeCylinder *result = 0 ;
  
  arg1 = (ndShapeCylinder *)jarg1; 
  result = (ndShapeCylinder *)(arg1)->GetAsShapeCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeStatic_bvh__SWIG_0(void * jarg1) {
  void * jresult ;
  ndPolygonSoupBuilder *arg1 = 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  arg1 = (ndPolygonSoupBuilder *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndPolygonSoupBuilder const & type is null", 0);
    return 0;
  } 
  result = (ndShapeStatic_bvh *)new ndShapeStatic_bvh((ndPolygonSoupBuilder const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeStatic_bvh__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeStatic_bvh *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeStatic_bvh *)new ndShapeStatic_bvh((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeStatic_bvh(void * jarg1) {
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  
  arg1 = (ndShapeStatic_bvh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeStatic_bvh_Create(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  arg1 = (ndShapeStatic_bvh *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)(arg1)->operator new(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeStatic_bvh_Destroy(void * jarg1, void * jarg2) {
  ndShapeStatic_bvh *arg1 = (ndShapeStatic_bvh *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ndShapeStatic_bvh *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->operator delete(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_MAX_COLLIDING_FACES_get() {
  int jresult ;
  int result;
  
  result = (int)(512);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_MAX_COLLIDING_INDICES_get() {
  int jresult ;
  int result;
  
  result = (int)((512*(4*2+3)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalFaceIndexCount_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  int *arg2 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_globalFaceIndexCount;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalFaceIndexCount_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  result = (int *)(int *) ((arg1)->m_globalFaceIndexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalFaceIndexStart_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  int *arg2 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_globalFaceIndexStart;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalFaceIndexStart_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  result = (int *)(int *) ((arg1)->m_globalFaceIndexStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalHitDistance_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  float *arg2 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_globalHitDistance;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_ndMesh_m_globalHitDistance_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  float *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  result = (float *)(float *) ((arg1)->m_globalHitDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndPolygonMeshDesc_ndMesh() {
  void * jresult ;
  ndPolygonMeshDesc::ndMesh *result = 0 ;
  
  result = (ndPolygonMeshDesc::ndMesh *)new ndPolygonMeshDesc::ndMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndPolygonMeshDesc_ndMesh(void * jarg1) {
  ndPolygonMeshDesc::ndMesh *arg1 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  
  arg1 = (ndPolygonMeshDesc::ndMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndPolygonMeshDesc__SWIG_0() {
  void * jresult ;
  ndPolygonMeshDesc *result = 0 ;
  
  result = (ndPolygonMeshDesc *)new ndPolygonMeshDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndPolygonMeshDesc__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ndContactSolver *arg1 = 0 ;
  bool arg2 ;
  ndPolygonMeshDesc *result = 0 ;
  
  arg1 = (ndContactSolver *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactSolver & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (ndPolygonMeshDesc *)new ndPolygonMeshDesc(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_SortFaceArray(void * jarg1) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  (arg1)->SortFaceArray();
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetSeparetionDistance(void * jarg1) {
  float jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (float)((ndPolygonMeshDesc const *)arg1)->GetSeparetionDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_SetDistanceTravel(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetDistanceTravel((ndVector const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetFaceIndexCount(void * jarg1, int jarg2) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ndPolygonMeshDesc const *)arg1)->GetFaceIndexCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetAdjacentFaceEdgeNormalArray(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int *)((ndPolygonMeshDesc const *)arg1)->GetAdjacentFaceEdgeNormalArray((int const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetNormalIndex(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((ndPolygonMeshDesc const *)arg1)->GetNormalIndex((int const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetFaceId(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((ndPolygonMeshDesc const *)arg1)->GetFaceId((int const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndPolygonMeshDesc_GetFaceSize(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  float result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)((ndPolygonMeshDesc const *)arg1)->GetFaceSize((int const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_boxDistanceTravelInMeshSpace = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndVector result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result =  ((arg1)->m_boxDistanceTravelInMeshSpace);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceCount_set(void * jarg1, int jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceCount_get(void * jarg1) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int) ((arg1)->m_faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_vertexStrideInBytes_set(void * jarg1, int jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexStrideInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_vertexStrideInBytes_get(void * jarg1) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int) ((arg1)->m_vertexStrideInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_skinMargin_set(void * jarg1, float jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_skinMargin_get(void * jarg1) {
  float jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (float) ((arg1)->m_skinMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_convexInstance_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_convexInstance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_convexInstance_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_convexInstance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_polySoupInstance_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_polySoupInstance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_polySoupInstance_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_polySoupInstance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_vertex_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_vertex_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (float *) ((arg1)->m_vertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceIndexCount_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_faceIndexCount = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceIndexCount_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int *) ((arg1)->m_faceIndexCount);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceVertexIndex_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_faceVertexIndex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceVertexIndex_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int *) ((arg1)->m_faceVertexIndex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_meshData_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndPolygonMeshDesc::ndMesh *arg2 = (ndPolygonMeshDesc::ndMesh *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (ndPolygonMeshDesc::ndMesh *)jarg2; 
  if (arg1) (arg1)->m_meshData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_meshData_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndPolygonMeshDesc::ndMesh *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (ndPolygonMeshDesc::ndMesh *)& ((arg1)->m_meshData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceIndexStart_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_faceIndexStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_faceIndexStart_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int *) ((arg1)->m_faceIndexStart);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_hitDistance_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_hitDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_hitDistance_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (float *) ((arg1)->m_hitDistance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_me_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeStaticMesh *arg2 = (ndShapeStaticMesh *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (ndShapeStaticMesh *)jarg2; 
  if (arg1) (arg1)->m_me = (ndShapeStaticMesh const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_me_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (ndShapeStaticMesh *) ((arg1)->m_me);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_globalFaceVertexIndex_set(void * jarg1, void * jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_globalFaceVertexIndex;
    for (ii = 0; ii < (size_t)(512*(4*2+3)); ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_globalFaceVertexIndex_get(void * jarg1) {
  void * jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int *)(int *) ((arg1)->m_globalFaceVertexIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_maxT_set(void * jarg1, float jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxT = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_maxT_get(void * jarg1) {
  float jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  float result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (float) ((arg1)->m_maxT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_globalIndexCount_set(void * jarg1, int jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_globalIndexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_globalIndexCount_get(void * jarg1) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int) ((arg1)->m_globalIndexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_threadId_set(void * jarg1, int jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_threadId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_threadId_get(void * jarg1) {
  int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  int result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (int) ((arg1)->m_threadId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_doContinueCollisionTest_set(void * jarg1, unsigned int jarg2) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_doContinueCollisionTest = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndPolygonMeshDesc_m_doContinueCollisionTest_get(void * jarg1) {
  unsigned int jresult ;
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  bool result;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  result = (bool) ((arg1)->m_doContinueCollisionTest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndPolygonMeshDesc(void * jarg1) {
  ndPolygonMeshDesc *arg1 = (ndPolygonMeshDesc *) 0 ;
  
  arg1 = (ndPolygonMeshDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeStaticMesh__SWIG_0(int jarg1) {
  void * jresult ;
  ndShapeID arg1 ;
  ndShapeStaticMesh *result = 0 ;
  
  arg1 = (ndShapeID)jarg1; 
  result = (ndShapeStaticMesh *)new ndShapeStaticMesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeStaticMesh__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeStaticMesh *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeStaticMesh *)new ndShapeStaticMesh((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeStaticMesh(void * jarg1) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  
  arg1 = (ndShapeStaticMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeStaticMesh_DebugShape(void * jarg1, void * jarg2, void * jarg3) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  arg1 = (ndShapeStaticMesh *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  arg3 = (ndShapeDebugNotify *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeDebugNotify & type is null", 0);
    return ;
  } 
  ((ndShapeStaticMesh const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeStaticMesh_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  float jresult ;
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  float arg5 ;
  ndBody *arg6 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg7 = 0 ;
  float result;
  
  arg1 = (ndShapeStaticMesh *)jarg1; 
  arg2 = (ndRayCastNotify *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndRayCastNotify & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (ndBody *)jarg6; 
  arg7 = (ndContactPoint *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactPoint & type is null", 0);
    return 0;
  } 
  result = (float)((ndShapeStaticMesh const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,arg5,(ndBody const *)arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeStaticMesh_GetCollidingFaces(void * jarg1, void * jarg2) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndPolygonMeshDesc *arg2 = (ndPolygonMeshDesc *) (ndPolygonMeshDesc *)0 ;
  
  arg1 = (ndShapeStaticMesh *)jarg1; 
  arg2 = (ndPolygonMeshDesc *)jarg2; 
  ((ndShapeStaticMesh const *)arg1)->GetCollidingFaces(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeStaticMesh_Save(void * jarg1, void * jarg2) {
  ndShapeStaticMesh *arg1 = (ndShapeStaticMesh *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndShapeStaticMesh *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndShapeStaticMesh const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeConvexHull__SWIG_0(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeConvexHull *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeConvexHull *)new ndShapeConvexHull((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeConvexHull__SWIG_1(int jarg1, int jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float *arg4 = (float *) (float *)0 ;
  ndShapeConvexHull *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  result = (ndShapeConvexHull *)new ndShapeConvexHull(arg1,arg2,arg3,(float const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeConvexHull(void * jarg1) {
  ndShapeConvexHull *arg1 = (ndShapeConvexHull *) 0 ;
  
  arg1 = (ndShapeConvexHull *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeHeightfield__SWIG_0(int jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  ndShapeHeightfield::ndGridConstruction arg3 ;
  float arg4 ;
  float arg5 ;
  ndShapeHeightfield *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ndShapeHeightfield::ndGridConstruction)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ndShapeHeightfield *)new ndShapeHeightfield(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeHeightfield__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeHeightfield *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeHeightfield *)new ndShapeHeightfield((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeHeightfield(void * jarg1) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  
  arg1 = (ndShapeHeightfield *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeHeightfield_GetElevationMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  ndArray< ndReal > *result = 0 ;
  
  arg1 = (ndShapeHeightfield *)jarg1; 
  result = (ndArray< ndReal > *) &(arg1)->GetElevationMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeHeightfield_UpdateElevationMapAabb(void * jarg1) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  
  arg1 = (ndShapeHeightfield *)jarg1; 
  (arg1)->UpdateElevationMapAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeHeightfield_GetLocalAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ndShapeHeightfield *arg1 = (ndShapeHeightfield *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndVector *arg5 = 0 ;
  
  arg1 = (ndShapeHeightfield *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg5 = (ndVector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndShapeHeightfield const *)arg1)->GetLocalAabb((ndVector const &)*arg2,(ndVector const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DG_CHAMFERCYLINDER_SLICES_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DG_CHAMFERCYLINDER_BRAKES_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DG_MAX_CHAMFERCYLINDER_DIR_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeChamferCylinder__SWIG_0(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ndShapeChamferCylinder *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ndShapeChamferCylinder *)new ndShapeChamferCylinder(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeChamferCylinder__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndShapeChamferCylinder *)new ndShapeChamferCylinder((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeChamferCylinder(void * jarg1) {
  ndShapeChamferCylinder *arg1 = (ndShapeChamferCylinder *) 0 ;
  
  arg1 = (ndShapeChamferCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeChamferCylinder_GetAsShapeChamferCylinder(void * jarg1) {
  void * jresult ;
  ndShapeChamferCylinder *arg1 = (ndShapeChamferCylinder *) 0 ;
  ndShapeChamferCylinder *result = 0 ;
  
  arg1 = (ndShapeChamferCylinder *)jarg1; 
  result = (ndShapeChamferCylinder *)(arg1)->GetAsShapeChamferCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeDebugNotify(void * jarg1) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  
  arg1 = (ndShapeDebugNotify *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeDebugNotify_DrawPolygon(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  int arg2 ;
  ndVector *arg3 = (ndVector *) (ndVector *)0 ;
  ndShapeDebugNotify::ndEdgeType *arg4 = (ndShapeDebugNotify::ndEdgeType *) (ndShapeDebugNotify::ndEdgeType *)0 ;
  
  arg1 = (ndShapeDebugNotify *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ndVector *)jarg3; 
  arg4 = (ndShapeDebugNotify::ndEdgeType *)jarg4; 
  (arg1)->DrawPolygon(arg2,(ndVector const *)arg3,(ndShapeDebugNotify::ndEdgeType const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeDebugNotify_m_instance_set(void * jarg1, void * jarg2) {
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndShapeDebugNotify *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_instance = (ndShapeInstance const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeDebugNotify_m_instance_get(void * jarg1) {
  void * jresult ;
  ndShapeDebugNotify *arg1 = (ndShapeDebugNotify *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeDebugNotify *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_instance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance_ndDistanceCalculator__SWIG_0(void * jarg1) {
  void * jresult ;
  ndScene *arg1 = (ndScene *) (ndScene *)0 ;
  ndShapeInstance::ndDistanceCalculator *result = 0 ;
  
  arg1 = (ndScene *)jarg1; 
  result = (ndShapeInstance::ndDistanceCalculator *)new ndShapeInstance::ndDistanceCalculator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance_ndDistanceCalculator__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ndScene *arg1 = (ndScene *) (ndScene *)0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndMatrix *arg3 = 0 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndMatrix *arg5 = 0 ;
  ndShapeInstance::ndDistanceCalculator *result = 0 ;
  
  arg1 = (ndScene *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  arg3 = (ndMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg4 = (ndShapeInstance *)jarg4; 
  arg5 = (ndMatrix *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = (ndShapeInstance::ndDistanceCalculator *)new ndShapeInstance::ndDistanceCalculator(arg1,arg2,(ndMatrix const &)*arg3,arg4,(ndMatrix const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_ClosestPoint(void * jarg1) {
  unsigned int jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  bool result;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (bool)(arg1)->ClosestPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_matrix0_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_matrix0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_matrix0_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_matrix0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_matrix1_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_matrix1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_matrix1_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_matrix1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_point0_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_point0 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_point0_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result =  ((arg1)->m_point0);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_point1_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_point1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_point1_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result =  ((arg1)->m_point1);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_normal_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_normal_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result =  ((arg1)->m_normal);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_scene_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndScene *arg2 = (ndScene *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  arg2 = (ndScene *)jarg2; 
  if (arg1) (arg1)->m_scene = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_scene_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndScene *result = 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (ndScene *) ((arg1)->m_scene);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_shape0_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_shape0 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_shape0_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_shape0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_shape1_set(void * jarg1, void * jarg2) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_shape1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_ndDistanceCalculator_m_shape1_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_shape1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeInstance_ndDistanceCalculator(void * jarg1) {
  ndShapeInstance::ndDistanceCalculator *arg1 = (ndShapeInstance::ndDistanceCalculator *) 0 ;
  
  arg1 = (ndShapeInstance::ndDistanceCalculator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance__SWIG_0(void * jarg1) {
  void * jresult ;
  ndShape *arg1 = (ndShape *) (ndShape *)0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShape *)jarg1; 
  result = (ndShapeInstance *)new ndShapeInstance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance__SWIG_1(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  result = (ndShapeInstance *)new ndShapeInstance((ndShapeInstance const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeInstance *arg1 = 0 ;
  ndShape *arg2 = (ndShape *) (ndShape *)0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  arg2 = (ndShape *)jarg2; 
  result = (ndShapeInstance *)new ndShapeInstance((ndShapeInstance const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndShapeInstance__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  nd::TiXmlNode *arg1 = (nd::TiXmlNode *) (nd::TiXmlNode *)0 ;
  ndShapeLoaderCache *arg2 = 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (nd::TiXmlNode *)jarg1; 
  arg2 = (ndShapeLoaderCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeLoaderCache const & type is null", 0);
    return 0;
  } 
  result = (ndShapeInstance *)new ndShapeInstance((nd::TiXmlNode const *)arg1,(ndShapeLoaderCache const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndShapeInstance(void * jarg1) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_Assigment(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *arg2 = 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  result = (ndShapeInstance *) &(arg1)->operator =((ndShapeInstance const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_CalculateInertia(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = ((ndShapeInstance const *)arg1)->CalculateInertia();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_CalculateObb(void * jarg1, void * jarg2, void * jarg3) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndShapeInstance const *)arg1)->CalculateObb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_CalculateAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndShapeInstance const *)arg1)->CalculateAabb((ndMatrix const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_DebugShape(void * jarg1, void * jarg2, void * jarg3) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndShapeDebugNotify *arg3 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  arg3 = (ndShapeDebugNotify *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeDebugNotify & type is null", 0);
    return ;
  } 
  ((ndShapeInstance const *)arg1)->DebugShape((ndMatrix const &)*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_RayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  ndBody *arg5 = (ndBody *) (ndBody *)0 ;
  ndContactPoint *arg6 = 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndRayCastNotify *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndRayCastNotify & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg5 = (ndBody *)jarg5; 
  arg6 = (ndContactPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactPoint & type is null", 0);
    return 0;
  } 
  result = (float)((ndShapeInstance const *)arg1)->RayCast(*arg2,(ndVector const &)*arg3,(ndVector const &)*arg4,(ndBody const *)arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetShapeInfo(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInfo result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetShapeInfo();
  jresult = new ndShapeInfo((const ndShapeInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_Save(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndShapeInstance const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_CalculateBuoyancyCenterOfPresure(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndMatrix *arg3 = 0 ;
  ndVector *arg4 = 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return 0;
  } 
  arg3 = (ndMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (float)((ndShapeInstance const *)arg1)->CalculateBuoyancyCenterOfPresure(*arg2,(ndMatrix const &)*arg3,(ndVector const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetBoxPadding() {
  void * jresult ;
  ndVector result;
  
  result = ndShapeInstance::GetBoxPadding();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetShape__SWIG_0(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShape *)(arg1)->GetShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetShape(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *arg2 = (ndShape *) (ndShape *)0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShape *)jarg2; 
  (arg1)->SetShape(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_SupportVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->SupportVertex((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetScaledTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  ndMatrix result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->GetScaledTransform((ndMatrix const &)*arg2);
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_SupportVertexSpecial(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  int *arg3 = (int *) (int *)0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = ((ndShapeInstance const *)arg1)->SupportVertexSpecial((ndVector const &)*arg2,arg3);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_SupportVertexSpecialProjectPoint(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndShapeInstance const *)arg1)->SupportVertexSpecialProjectPoint((ndVector const &)*arg2,(ndVector const &)*arg3);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetLocalMatrix(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetLocalMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetLocalMatrix(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetLocalMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetGlobalMatrix(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetGlobalMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetGlobalMatrix(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetGlobalMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndShapeInstance_GetCollisionMode(void * jarg1) {
  unsigned int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (bool)((ndShapeInstance const *)arg1)->GetCollisionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetCollisionMode(void * jarg1, unsigned int jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCollisionMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeInstance_GetConvexVertexCount(void * jarg1) {
  int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  int result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (int)((ndShapeInstance const *)arg1)->GetConvexVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetMaterial(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = ((ndShapeInstance const *)arg1)->GetMaterial();
  jresult = new ndShapeMaterial((const ndShapeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetMaterial(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShapeMaterial *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeMaterial const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaterial((ndShapeMaterial const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetScale(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndVector *) &((ndShapeInstance const *)arg1)->GetScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetInvScale(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndVector *) &((ndShapeInstance const *)arg1)->GetInvScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_GetAlignmentMatrix(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *) &((ndShapeInstance const *)arg1)->GetAlignmentMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetScale(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetScale((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetGlobalScale__SWIG_0(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetGlobalScale((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_SetGlobalScale__SWIG_1(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetGlobalScale((ndMatrix const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeInstance_CalculatePlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  int result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndVector *)jarg4; 
  result = (int)((ndShapeInstance const *)arg1)->CalculatePlaneIntersection((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_GetVolume(void * jarg1) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (float)((ndShapeInstance const *)arg1)->GetVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_GetBoxMinRadius(void * jarg1) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (float)((ndShapeInstance const *)arg1)->GetBoxMinRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_GetBoxMaxRadius(void * jarg1) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (float)((ndShapeInstance const *)arg1)->GetBoxMaxRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeInstance_GetScaleType(void * jarg1) {
  int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShapeInstance::ndScaleType)((ndShapeInstance const *)arg1)->GetScaleType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_GetUmbraClipSize(void * jarg1) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (float)((ndShapeInstance const *)arg1)->GetUmbraClipSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ndShapeInstance_GetUserDataID(void * jarg1) {
  unsigned long long jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  unsigned long long result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (unsigned long long)((ndShapeInstance const *)arg1)->GetUserDataID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_globalMatrix_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_globalMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_globalMatrix_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_globalMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_localMatrix_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_localMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_localMatrix_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_localMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_alignmentMatrix_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *arg2 = (ndMatrix *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndMatrix *)jarg2; 
  if (arg1) (arg1)->m_alignmentMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_alignmentMatrix_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndMatrix *)& ((arg1)->m_alignmentMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_scale_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_scale_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result =  ((arg1)->m_scale);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_invScale_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_invScale_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result =  ((arg1)->m_invScale);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_maxScale_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector arg2 ;
  ndVector *argp2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  argp2 = (ndVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ndVector", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_maxScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_maxScale_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndVector result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result =  ((arg1)->m_maxScale);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_shapeMaterial_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *arg2 = (ndShapeMaterial *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShapeMaterial *)jarg2; 
  if (arg1) (arg1)->m_shapeMaterial = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_shapeMaterial_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeMaterial *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShapeMaterial *)& ((arg1)->m_shapeMaterial);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_shape_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *arg2 = (ndShape *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShape *)jarg2; 
  if (arg1) (arg1)->m_shape = (ndShape const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_shape_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShape *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShape *) ((arg1)->m_shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_ownerBody_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndBody *arg2 = (ndBody *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  if (arg1) (arg1)->m_ownerBody = (ndBody const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_ownerBody_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndBody *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndBody *) ((arg1)->m_ownerBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_subCollisionHandle_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_subCollisionHandle = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_subCollisionHandle_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  void *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (void *) ((arg1)->m_subCollisionHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_parent_set(void * jarg1, void * jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *arg2 = (ndShapeInstance *) 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2; 
  if (arg1) (arg1)->m_parent = (ndShapeInstance const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndShapeInstance_m_parent_get(void * jarg1) {
  void * jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShapeInstance *) ((arg1)->m_parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_skinMargin_set(void * jarg1, float jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float arg2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndShapeInstance_m_skinMargin_get(void * jarg1) {
  float jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  float result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (float) ((arg1)->m_skinMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_scaleType_set(void * jarg1, int jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType arg2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = (ndShapeInstance::ndScaleType)jarg2; 
  if (arg1) (arg1)->m_scaleType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ndShapeInstance_m_scaleType_get(void * jarg1) {
  int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  ndShapeInstance::ndScaleType result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (ndShapeInstance::ndScaleType) ((arg1)->m_scaleType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndShapeInstance_m_collisionMode_set(void * jarg1, unsigned int jarg2) {
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (ndShapeInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_collisionMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndShapeInstance_m_collisionMode_get(void * jarg1) {
  unsigned int jresult ;
  ndShapeInstance *arg1 = (ndShapeInstance *) 0 ;
  bool result;
  
  arg1 = (ndShapeInstance *)jarg1; 
  result = (bool) ((arg1)->m_collisionMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBody(void * jarg1) {
  ndBody *arg1 = (ndBody *) 0 ;
  
  arg1 = (ndBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBody(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBody *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBody *)(arg1)->GetAsBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodyDynamic(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyDynamic *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyDynamic *)(arg1)->GetAsBodyDynamic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodySentinel(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodySentinel *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodySentinel *)(arg1)->GetAsBodySentinel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodySphFluid(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodySphFluid *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodySphFluid *)(arg1)->GetAsBodySphFluid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodyKinematic(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyKinematic *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyKinematic *)(arg1)->GetAsBodyKinematic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodyParticleSet(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyParticleSet *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyParticleSet *)(arg1)->GetAsBodyParticleSet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodyPlayerCapsule(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyPlayerCapsule *)(arg1)->GetAsBodyPlayerCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetAsBodyTriggerVolume(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyTriggerVolume *)(arg1)->GetAsBodyTriggerVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBody_GetId(void * jarg1) {
  unsigned int jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  unsigned int result;
  
  arg1 = (ndBody *)jarg1; 
  result = (unsigned int)((ndBody const *)arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_GetAABB(void * jarg1, void * jarg2, void * jarg3) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector & type is null", 0);
    return ;
  } 
  ((ndBody const *)arg1)->GetAABB(*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBody_GetInvMass(void * jarg1) {
  float jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  float result;
  
  arg1 = (ndBody *)jarg1; 
  result = (float)((ndBody const *)arg1)->GetInvMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBody_RayCast(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndFastRay *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndRayCastNotify *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndRayCastNotify & type is null", 0);
    return 0;
  } 
  arg3 = (ndFastRay *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndFastRay const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)((ndBody const *)arg1)->RayCast(*arg2,(ndFastRay const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetCentreOfMass(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndVector *) &((ndBody const *)arg1)->GetCentreOfMass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetCentreOfMass(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetCentreOfMass((ndVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetNotifyCallback(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyNotify *result = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  result = (ndBodyNotify *)((ndBody const *)arg1)->GetNotifyCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetOmega(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetOmega();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetMatrix(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetMatrix();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetVelocity(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetVelocity();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetPosition(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetPosition();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetRotation(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndQuaternion result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetRotation();
  jresult = new ndQuaternion((const ndQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetGlobalGetCentreOfMass(void * jarg1) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector result;
  
  arg1 = (ndBody *)jarg1; 
  result = ((ndBody const *)arg1)->GetGlobalGetCentreOfMass();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetNotifyCallback(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndBodyNotify *arg2 = (ndBodyNotify *) (ndBodyNotify *)0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndBodyNotify *)jarg2; 
  (arg1)->SetNotifyCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetOmega(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetOmega((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetVelocity(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetVelocity((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetMatrix(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrix((ndMatrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_Save(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndBody const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBody_GetVelocityAtPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector result;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = ((ndBody const *)arg1)->GetVelocityAtPoint((ndVector const &)*arg2);
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetOmegaNoSleep(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetOmegaNoSleep((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetVelocityNoSleep(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetVelocityNoSleep((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetMatrixNoSleep(void * jarg1, void * jarg2) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrixNoSleep((ndMatrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBody_SetMatrixAndCentreOfMass(void * jarg1, void * jarg2, void * jarg3) {
  ndBody *arg1 = (ndBody *) 0 ;
  ndQuaternion *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  
  arg1 = (ndBody *)jarg1; 
  arg2 = (ndQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrixAndCentreOfMass((ndQuaternion const &)*arg2,(ndVector const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_ndContactMap_FindContact(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ndBodyKinematic::ndContactMap *arg1 = (ndBodyKinematic::ndContactMap *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndBody *arg3 = (ndBody *) (ndBody *)0 ;
  ndContact *result = 0 ;
  
  arg1 = (ndBodyKinematic::ndContactMap *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  arg3 = (ndBody *)jarg3; 
  result = (ndContact *)((ndBodyKinematic::ndContactMap const *)arg1)->FindContact((ndBody const *)arg2,(ndBody const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyKinematic__SWIG_0() {
  void * jresult ;
  ndBodyKinematic *result = 0 ;
  
  result = (ndBodyKinematic *)new ndBodyKinematic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyKinematic__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyKinematic *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndBodyKinematic *)new ndBodyKinematic((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodyKinematic(void * jarg1) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetScene(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndScene *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndScene *)((ndBodyKinematic const *)arg1)->GetScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodyKinematic_GetIndex(void * jarg1) {
  unsigned int jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  unsigned int result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (unsigned int)((ndBodyKinematic const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyKinematic_GetInvMass(void * jarg1) {
  float jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (float)((ndBodyKinematic const *)arg1)->GetInvMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetInvInertia(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetInvInertia();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetMassMatrix__SWIG_0(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndVector *) &((ndBodyKinematic const *)arg1)->GetMassMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetInvInertiaMatrix(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndMatrix *) &((ndBodyKinematic const *)arg1)->GetInvInertiaMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetGyroAlpha(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetGyroAlpha();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetGyroTorque(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetGyroTorque();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodyKinematic_GetSleepState(void * jarg1) {
  unsigned int jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (bool)((ndBodyKinematic const *)arg1)->GetSleepState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_RestoreSleepState(void * jarg1, unsigned int jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RestoreSleepState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetSleepState(void * jarg1, unsigned int jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSleepState(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodyKinematic_GetAutoSleep(void * jarg1) {
  unsigned int jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (bool)((ndBodyKinematic const *)arg1)->GetAutoSleep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetAutoSleep(void * jarg1, unsigned int jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  bool arg2 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutoSleep(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyKinematic_GetMaxLinearStep(void * jarg1) {
  float jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (float)((ndBodyKinematic const *)arg1)->GetMaxLinearStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyKinematic_GetMaxAngularStep(void * jarg1) {
  float jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (float)((ndBodyKinematic const *)arg1)->GetMaxAngularStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetDebugMaxLinearAndAngularIntegrationStep(void * jarg1, float jarg2, float jarg3) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDebugMaxLinearAndAngularIntegrationStep(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyKinematic_GetLinearDamping(void * jarg1) {
  float jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (float)((ndBodyKinematic const *)arg1)->GetLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetLinearDamping(void * jarg1, float jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLinearDamping(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetCachedDamping(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetCachedDamping();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetAngularDamping(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAngularDamping();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetAngularDamping(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetAngularDamping((ndVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetCollisionShape__SWIG_0(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndShapeInstance *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndShapeInstance *) &(arg1)->GetCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetCollisionShape(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndShapeInstance *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndShapeInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return ;
  } 
  (arg1)->SetCollisionShape((ndShapeInstance const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodyKinematic_RayCast(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndRayCastNotify *arg2 = 0 ;
  ndFastRay *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndRayCastNotify *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndRayCastNotify & type is null", 0);
    return 0;
  } 
  arg3 = (ndFastRay *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndFastRay const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)((ndBodyKinematic const *)arg1)->RayCast(*arg2,(ndFastRay const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_CalculateLinearMomentum(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateLinearMomentum();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_CalculateAngularMomentum(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateAngularMomentum();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyKinematic_TotalEnergy(void * jarg1) {
  float jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (float)((ndBodyKinematic const *)arg1)->TotalEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_CalculateInertiaMatrix(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateInertiaMatrix();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_CalculateInvInertiaMatrix(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->CalculateInvInertiaMatrix();
  jresult = new ndMatrix((const ndMatrix &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_IntegrateVelocity(void * jarg1, float jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->IntegrateVelocity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_Save(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndBodyKinematic const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_UpdateInvInertiaMatrix(void * jarg1) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  (arg1)->UpdateInvInertiaMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetMassMatrix__SWIG_0(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetMassMatrix((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetMassMatrix__SWIG_1(void * jarg1, float jarg2, void * jarg3) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  ndShapeInstance *arg3 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (ndShapeInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return ;
  } 
  (arg1)->SetMassMatrix(arg2,(ndShapeInstance const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetMassMatrix__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetMassMatrix(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetMassMatrix__SWIG_3(void * jarg1, float jarg2, void * jarg3) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float arg2 ;
  ndMatrix *arg3 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (ndMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetMassMatrix(arg2,(ndMatrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_GetMassMatrix__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->GetMassMatrix(*arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetMatrixUpdateScene(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndMatrix *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrixUpdateScene((ndMatrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_FindContact(void * jarg1, void * jarg2) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndContact *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  result = (ndContact *)((ndBodyKinematic const *)arg1)->FindContact((ndBody const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetAsBodyKinematic(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBodyKinematic *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndBodyKinematic *)(arg1)->GetAsBodyKinematic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetSkeleton(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndSkeletonContainer *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndSkeletonContainer *)((ndBodyKinematic const *)arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetSkeleton(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndSkeletonContainer *arg2 = (ndSkeletonContainer *) (ndSkeletonContainer *)0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndSkeletonContainer *)jarg2; 
  (arg1)->SetSkeleton(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetForce(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetForce();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetTorque(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetTorque();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetForce(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetForce((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetTorque(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetTorque((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_AddImpulse(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->AddImpulse((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_ApplyImpulsePair(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->ApplyImpulsePair((ndVector const &)*arg2,(ndVector const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_ApplyImpulsesAtPoint(void * jarg1, int jarg2, void * jarg3, void * jarg4, float jarg5) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  int arg2 ;
  ndVector *arg3 = (ndVector *) (ndVector *)0 ;
  ndVector *arg4 = (ndVector *) (ndVector *)0 ;
  float arg5 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ndVector *)jarg3; 
  arg4 = (ndVector *)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->ApplyImpulsesAtPoint(arg2,(ndVector const *)arg3,(ndVector const *)arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetAccel(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAccel();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetAlpha(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = ((ndBodyKinematic const *)arg1)->GetAlpha();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetAccel(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetAccel((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyKinematic_SetAlpha(void * jarg1, void * jarg2) {
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetAlpha((ndVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetContactMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndBodyKinematic::ndContactMap *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndBodyKinematic::ndContactMap *) &(arg1)->GetContactMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyKinematic_GetJointList(void * jarg1) {
  void * jresult ;
  ndBodyKinematic *arg1 = (ndBodyKinematic *) 0 ;
  ndJointList *result = 0 ;
  
  arg1 = (ndBodyKinematic *)jarg1; 
  result = (ndJointList *) &((ndBodyKinematic const *)arg1)->GetJointList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodySentinel() {
  void * jresult ;
  ndBodySentinel *result = 0 ;
  
  result = (ndBodySentinel *)new ndBodySentinel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodySentinel(void * jarg1) {
  ndBodySentinel *arg1 = (ndBodySentinel *) 0 ;
  
  arg1 = (ndBodySentinel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyTriggerVolume__SWIG_0() {
  void * jresult ;
  ndBodyTriggerVolume *result = 0 ;
  
  result = (ndBodyTriggerVolume *)new ndBodyTriggerVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyTriggerVolume__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndBodyTriggerVolume *)new ndBodyTriggerVolume((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodyTriggerVolume(void * jarg1) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyTriggerVolume_GetAsBodyTriggerVolume(void * jarg1) {
  void * jresult ;
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyTriggerVolume *result = 0 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  result = (ndBodyTriggerVolume *)(arg1)->GetAsBodyTriggerVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyTriggerVolume_OnTrigger(void * jarg1, void * jarg2, float jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  float arg3 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  arg2 = (ndBodyKinematic *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnTrigger(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyTriggerVolume_OnTriggerEnter(void * jarg1, void * jarg2, float jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  float arg3 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  arg2 = (ndBodyKinematic *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnTriggerEnter(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyTriggerVolume_OnTriggerExit(void * jarg1, void * jarg2, float jarg3) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  float arg3 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  arg2 = (ndBodyKinematic *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnTriggerExit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyTriggerVolume_SpecialUpdate(void * jarg1, float jarg2) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SpecialUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyTriggerVolume_Save(void * jarg1, void * jarg2) {
  ndBodyTriggerVolume *arg1 = (ndBodyTriggerVolume *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndBodyTriggerVolume *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndBodyTriggerVolume const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyPlayerCapsule__SWIG_0(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndBodyPlayerCapsule *)new ndBodyPlayerCapsule((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyPlayerCapsule__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  ndMatrix *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  arg1 = (ndMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ndBodyPlayerCapsule *)new ndBodyPlayerCapsule((ndMatrix const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodyPlayerCapsule(void * jarg1) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyPlayerCapsule_GetAsBodyPlayerCapsule(void * jarg1) {
  void * jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndBodyPlayerCapsule *result = 0 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  result = (ndBodyPlayerCapsule *)(arg1)->GetAsBodyPlayerCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyPlayerCapsule_GetForwardSpeed(void * jarg1) {
  float jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float result;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  result = (float)((ndBodyPlayerCapsule const *)arg1)->GetForwardSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyPlayerCapsule_SetForwardSpeed(void * jarg1, float jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetForwardSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyPlayerCapsule_GetLateralSpeed(void * jarg1) {
  float jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float result;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  result = (float)((ndBodyPlayerCapsule const *)arg1)->GetLateralSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyPlayerCapsule_SetLateralSpeed(void * jarg1, float jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLateralSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyPlayerCapsule_GetHeadingAngle(void * jarg1) {
  float jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float result;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  result = (float)((ndBodyPlayerCapsule const *)arg1)->GetHeadingAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyPlayerCapsule_SetHeadingAngle(void * jarg1, float jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeadingAngle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodyPlayerCapsule_IsOnFloor(void * jarg1) {
  unsigned int jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  bool result;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  result = (bool)((ndBodyPlayerCapsule const *)arg1)->IsOnFloor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyPlayerCapsule_ApplyInputs(void * jarg1, float jarg2) {
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  float arg2 ;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ApplyInputs(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndBodyPlayerCapsule_ContactFrictionCallback(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  float jresult ;
  ndBodyPlayerCapsule *arg1 = (ndBodyPlayerCapsule *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  int arg4 ;
  ndBodyKinematic *arg5 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  float result;
  
  arg1 = (ndBodyPlayerCapsule *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (ndBodyKinematic *)jarg5; 
  result = (float)((ndBodyPlayerCapsule const *)arg1)->ContactFrictionCallback((ndVector const &)*arg2,(ndVector const &)*arg3,arg4,(ndBodyKinematic const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyNotify__SWIG_0(void * jarg1) {
  void * jresult ;
  ndVector *arg1 = 0 ;
  ndBodyNotify *result = 0 ;
  
  arg1 = (ndVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  result = (ndBodyNotify *)new ndBodyNotify((ndVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodyNotify__SWIG_1(void * jarg1) {
  void * jresult ;
  ndLoadSaveBase::ndLoadDescriptor *arg1 = 0 ;
  ndBodyNotify *result = 0 ;
  
  arg1 = (ndLoadSaveBase::ndLoadDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndLoadDescriptor const & type is null", 0);
    return 0;
  } 
  result = (ndBodyNotify *)new ndBodyNotify((ndLoadSaveBase::ndLoadDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodyNotify(void * jarg1) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyNotify_GetBody__SWIG_0(void * jarg1) {
  void * jresult ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndBody *result = 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  result = (ndBody *)(arg1)->GetBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyNotify_GetUserData(void * jarg1) {
  void * jresult ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  void *result = 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  result = (void *)((ndBodyNotify const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodyNotify_GetGravity(void * jarg1) {
  void * jresult ;
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndVector result;
  
  arg1 = (ndBodyNotify *)jarg1; 
  result = ((ndBodyNotify const *)arg1)->GetGravity();
  jresult = new ndVector((const ndVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyNotify_SetGravity(void * jarg1, void * jarg2) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndVector *arg2 = 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetGravity((ndVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyNotify_OnTransform(void * jarg1, int jarg2, void * jarg3) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  int arg2 ;
  ndMatrix *arg3 = 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ndMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->OnTransform(arg2,(ndMatrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyNotify_Save(void * jarg1, void * jarg2) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  ndLoadSaveBase::ndSaveDescriptor *arg2 = 0 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  arg2 = (ndLoadSaveBase::ndSaveDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndLoadSaveBase::ndSaveDescriptor const & type is null", 0);
    return ;
  } 
  ((ndBodyNotify const *)arg1)->Save((ndLoadSaveBase::ndSaveDescriptor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodyNotify_OnApplyExternalForce(void * jarg1, int jarg2, float jarg3) {
  ndBodyNotify *arg1 = (ndBodyNotify *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ndBodyNotify *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnApplyExternalForce(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndMaterial() {
  void * jresult ;
  ndMaterial *result = 0 ;
  
  result = (ndMaterial *)new ndMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_restitution_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_restitution_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_staticFriction0_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_staticFriction0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_staticFriction0_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_staticFriction0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_staticFriction1_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_staticFriction1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_staticFriction1_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_staticFriction1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_dynamicFriction0_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dynamicFriction0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_dynamicFriction0_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_dynamicFriction0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_dynamicFriction1_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dynamicFriction1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_dynamicFriction1_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_dynamicFriction1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_skinMargin_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_skinMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_skinMargin_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_skinMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_softness_set(void * jarg1, float jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndMaterial_m_softness_get(void * jarg1) {
  float jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  float result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (float) ((arg1)->m_softness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_flags_set(void * jarg1, unsigned int jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMaterial_m_flags_get(void * jarg1) {
  unsigned int jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  unsigned int result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (unsigned int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndMaterial_m_userFlags_set(void * jarg1, unsigned int jarg2) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ndMaterial *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_userFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndMaterial_m_userFlags_get(void * jarg1) {
  unsigned int jresult ;
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  unsigned int result;
  
  arg1 = (ndMaterial *)jarg1; 
  result = (unsigned int) ((arg1)->m_userFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndMaterial(void * jarg1) {
  ndMaterial *arg1 = (ndMaterial *) 0 ;
  
  arg1 = (ndMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndContactNotify() {
  void * jresult ;
  ndContactNotify *result = 0 ;
  
  result = (ndContactNotify *)new ndContactNotify();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndContactNotify(void * jarg1) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  
  arg1 = (ndContactNotify *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndContactNotify_OnBodyAdded(void * jarg1, void * jarg2) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndBodyKinematic *)jarg2; 
  ((ndContactNotify const *)arg1)->OnBodyAdded(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndContactNotify_OnBodyRemoved(void * jarg1, void * jarg2) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndBodyKinematic *arg2 = (ndBodyKinematic *) (ndBodyKinematic *)0 ;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndBodyKinematic *)jarg2; 
  ((ndContactNotify const *)arg1)->OnBodyRemoved(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndContactNotify_GetMaterial(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  ndShapeInstance *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndMaterial *result = 0 ;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndContact *)jarg2; 
  arg3 = (ndShapeInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  arg4 = (ndShapeInstance *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  result = (ndMaterial *)((ndContactNotify const *)arg1)->GetMaterial((ndContact const *)arg2,(ndShapeInstance const &)*arg3,(ndShapeInstance const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndContactNotify_OnCompoundSubShapeOverlap(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  float arg3 ;
  ndShapeInstance *arg4 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  ndShapeInstance *arg5 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  bool result;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndContact *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ndShapeInstance *)jarg4; 
  arg5 = (ndShapeInstance *)jarg5; 
  result = (bool)(arg1)->OnCompoundSubShapeOverlap((ndContact const *)arg2,arg3,(ndShapeInstance const *)arg4,(ndShapeInstance const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndContactNotify_OnAabbOverlap(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndContact *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->OnAabbOverlap((ndContact const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndContactNotify_OnContactCallback(void * jarg1, void * jarg2, float jarg3) {
  ndContactNotify *arg1 = (ndContactNotify *) 0 ;
  ndContact *arg2 = (ndContact *) (ndContact *)0 ;
  float arg3 ;
  
  arg1 = (ndContactNotify *)jarg1; 
  arg2 = (ndContact *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnContactCallback((ndContact const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndRayCastNotify(void * jarg1) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndRayCastNotify_TraceShape(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndVector *arg2 = 0 ;
  ndVector *arg3 = 0 ;
  ndShapeInstance *arg4 = 0 ;
  ndMatrix *arg5 = 0 ;
  bool result;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  arg2 = (ndVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg3 = (ndVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndVector const & type is null", 0);
    return 0;
  } 
  arg4 = (ndShapeInstance *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndShapeInstance const & type is null", 0);
    return 0;
  } 
  arg5 = (ndMatrix *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndMatrix const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TraceShape((ndVector const &)*arg2,(ndVector const &)*arg3,(ndShapeInstance const &)*arg4,(ndMatrix const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndRayCastNotify_OnRayPrecastAction(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndShapeInstance *arg3 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  unsigned int result;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  arg3 = (ndShapeInstance *)jarg3; 
  result = (unsigned int)(arg1)->OnRayPrecastAction((ndBody const *)arg2,(ndShapeInstance const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndRayCastNotify_OnRayCastAction(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  arg2 = (ndContactPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->OnRayCastAction((ndContactPoint const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndRayCastNotify_m_contact_set(void * jarg1, void * jarg2) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *arg2 = (ndContactPoint *) 0 ;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  arg2 = (ndContactPoint *)jarg2; 
  if (arg1) (arg1)->m_contact = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndRayCastNotify_m_contact_get(void * jarg1) {
  void * jresult ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  ndContactPoint *result = 0 ;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  result = (ndContactPoint *)& ((arg1)->m_contact);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndRayCastNotify_m_param_set(void * jarg1, float jarg2) {
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  float arg2 ;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_param = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndRayCastNotify_m_param_get(void * jarg1) {
  float jresult ;
  ndRayCastNotify *arg1 = (ndRayCastNotify *) 0 ;
  float result;
  
  arg1 = (ndRayCastNotify *)jarg1; 
  result = (float) ((arg1)->m_param);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndRayCastClosestHitCallback() {
  void * jresult ;
  ndRayCastClosestHitCallback *result = 0 ;
  
  result = (ndRayCastClosestHitCallback *)new ndRayCastClosestHitCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndRayCastClosestHitCallback_OnRayPrecastAction(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  ndShapeInstance *arg3 = (ndShapeInstance *) (ndShapeInstance *)0 ;
  unsigned int result;
  
  arg1 = (ndRayCastClosestHitCallback *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  arg3 = (ndShapeInstance *)jarg3; 
  result = (unsigned int)(arg1)->OnRayPrecastAction((ndBody const *)arg2,(ndShapeInstance const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ndRayCastClosestHitCallback_OnRayCastAction(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  ndContactPoint *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (ndRayCastClosestHitCallback *)jarg1; 
  arg2 = (ndContactPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ndContactPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->OnRayCastAction((ndContactPoint const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndRayCastClosestHitCallback(void * jarg1) {
  ndRayCastClosestHitCallback *arg1 = (ndRayCastClosestHitCallback *) 0 ;
  
  arg1 = (ndRayCastClosestHitCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ndBodiesInAabbNotify() {
  void * jresult ;
  ndBodiesInAabbNotify *result = 0 ;
  
  result = (ndBodiesInAabbNotify *)new ndBodiesInAabbNotify();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ndBodiesInAabbNotify(void * jarg1) {
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  
  arg1 = (ndBodiesInAabbNotify *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ndBodiesInAabbNotify_OnOverlap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndBody *arg2 = (ndBody *) (ndBody *)0 ;
  unsigned int result;
  
  arg1 = (ndBodiesInAabbNotify *)jarg1; 
  arg2 = (ndBody *)jarg2; 
  result = (unsigned int)(arg1)->OnOverlap((ndBody const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndBodiesInAabbNotify_m_bodyArray_set(void * jarg1, void * jarg2) {
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndArray< ndBody * > *arg2 = (ndArray< ndBody * > *) 0 ;
  
  arg1 = (ndBodiesInAabbNotify *)jarg1; 
  arg2 = (ndArray< ndBody * > *)jarg2; 
  if (arg1) (arg1)->m_bodyArray = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ndBodiesInAabbNotify_m_bodyArray_get(void * jarg1) {
  void * jresult ;
  ndBodiesInAabbNotify *arg1 = (ndBodiesInAabbNotify *) 0 ;
  ndArray< ndBody * > *result = 0 ;
  
  arg1 = (ndBodiesInAabbNotify *)jarg1; 
  result = (ndArray< ndBody * > *)& ((arg1)->m_bodyArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NOMINAL_FPS_get() {
  double jresult ;
  double result;
  
  result = (double)(120.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonWorld() {
  void * jresult ;
  NewtonWorld *result = 0 ;
  
  result = (NewtonWorld *)new NewtonWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonWorld(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorld_Update(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorld_SetSubSteps(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSubSteps(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorld_SetIterations(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorld_SetTimestep(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTimestep(arg2);
}


SWIGEXPORT ndShape * SWIGSTDCALL CSharp_ndShapeConvex_SWIGUpcast(ndShapeConvex *jarg1) {
    return (ndShape *)jarg1;
}

SWIGEXPORT ndShapeConvex * SWIGSTDCALL CSharp_ndShapeSphere_SWIGUpcast(ndShapeSphere *jarg1) {
    return (ndShapeConvex *)jarg1;
}

SWIGEXPORT ndShapeConvex * SWIGSTDCALL CSharp_ndShapeCapsule_SWIGUpcast(ndShapeCapsule *jarg1) {
    return (ndShapeConvex *)jarg1;
}

SWIGEXPORT ndShape * SWIGSTDCALL CSharp_ndShapeCompound_SWIGUpcast(ndShapeCompound *jarg1) {
    return (ndShape *)jarg1;
}

SWIGEXPORT ndShapeConvex * SWIGSTDCALL CSharp_ndShapeCylinder_SWIGUpcast(ndShapeCylinder *jarg1) {
    return (ndShapeConvex *)jarg1;
}

SWIGEXPORT ndShape * SWIGSTDCALL CSharp_ndShapeStaticMesh_SWIGUpcast(ndShapeStaticMesh *jarg1) {
    return (ndShape *)jarg1;
}

SWIGEXPORT ndShapeConvex * SWIGSTDCALL CSharp_ndShapeConvexHull_SWIGUpcast(ndShapeConvexHull *jarg1) {
    return (ndShapeConvex *)jarg1;
}

SWIGEXPORT ndShapeStaticMesh * SWIGSTDCALL CSharp_ndShapeHeightfield_SWIGUpcast(ndShapeHeightfield *jarg1) {
    return (ndShapeStaticMesh *)jarg1;
}

SWIGEXPORT ndShapeConvex * SWIGSTDCALL CSharp_ndShapeChamferCylinder_SWIGUpcast(ndShapeChamferCylinder *jarg1) {
    return (ndShapeConvex *)jarg1;
}

SWIGEXPORT ndBody * SWIGSTDCALL CSharp_ndBodyKinematic_SWIGUpcast(ndBodyKinematic *jarg1) {
    return (ndBody *)jarg1;
}

SWIGEXPORT ndBodyKinematic * SWIGSTDCALL CSharp_ndBodySentinel_SWIGUpcast(ndBodySentinel *jarg1) {
    return (ndBodyKinematic *)jarg1;
}

SWIGEXPORT ndBodyKinematic * SWIGSTDCALL CSharp_ndBodyTriggerVolume_SWIGUpcast(ndBodyTriggerVolume *jarg1) {
    return (ndBodyKinematic *)jarg1;
}

SWIGEXPORT ndBodyKinematic * SWIGSTDCALL CSharp_ndBodyPlayerCapsule_SWIGUpcast(ndBodyPlayerCapsule *jarg1) {
    return (ndBodyKinematic *)jarg1;
}

SWIGEXPORT ndRayCastNotify * SWIGSTDCALL CSharp_ndRayCastClosestHitCallback_SWIGUpcast(ndRayCastClosestHitCallback *jarg1) {
    return (ndRayCastNotify *)jarg1;
}

#ifdef __cplusplus
}
#endif

