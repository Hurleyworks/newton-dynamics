//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class NewtonWorld : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NewtonWorld(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NewtonWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NewtonWorld() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_NewtonWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public NewtonWorld() : this(newtonPINVOKE.new_NewtonWorld(), true) {
  }

  public void Update(SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.NewtonWorld_Update(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSubSteps(SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.NewtonWorld_SetSubSteps(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIterations(SWIGTYPE_p_ndInt32 iterations) {
    newtonPINVOKE.NewtonWorld_SetIterations(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(iterations));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTimestep(SWIGTYPE_p_ndFloat32 nominalTimestep) {
    newtonPINVOKE.NewtonWorld_SetTimestep(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(nominalTimestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
