//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShapeInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndShapeInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShapeInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndShapeInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndShapeInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndMatrix m_offsetMatrix {
    set {
      newtonPINVOKE.ndShapeInfo_m_offsetMatrix_set(swigCPtr, ndMatrix.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_offsetMatrix_get(swigCPtr);
      ndMatrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndMatrix(cPtr, false);
      return ret;
    } 
  }

  public ndVector m_scale {
    set {
      newtonPINVOKE.ndShapeInfo_m_scale_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_scale_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public ndShapeMaterial m_shapeMaterial {
    set {
      newtonPINVOKE.ndShapeInfo_m_shapeMaterial_set(swigCPtr, ndShapeMaterial.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_shapeMaterial_get(swigCPtr);
      ndShapeMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeMaterial(cPtr, false);
      return ret;
    } 
  }

  public ndShapeID m_collisionType {
    set {
      newtonPINVOKE.ndShapeInfo_m_collisionType_set(swigCPtr, (int)value);
    } 
    get {
      ndShapeID ret = (ndShapeID)newtonPINVOKE.ndShapeInfo_m_collisionType_get(swigCPtr);
      return ret;
    } 
  }

  public ndBoxInfo m_box {
    set {
      newtonPINVOKE.ndShapeInfo_m_box_set(swigCPtr, ndBoxInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_box_get(swigCPtr);
      ndBoxInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBoxInfo(cPtr, false);
      return ret;
    } 
  }

  public ndConeInfo m_cone {
    set {
      newtonPINVOKE.ndShapeInfo_m_cone_set(swigCPtr, ndConeInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_cone_get(swigCPtr);
      ndConeInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndConeInfo(cPtr, false);
      return ret;
    } 
  }

  public ndPointInfo m_point {
    set {
      newtonPINVOKE.ndShapeInfo_m_point_set(swigCPtr, ndPointInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_point_get(swigCPtr);
      ndPointInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndPointInfo(cPtr, false);
      return ret;
    } 
  }

  public ndSphereInfo m_sphere {
    set {
      newtonPINVOKE.ndShapeInfo_m_sphere_set(swigCPtr, ndSphereInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_sphere_get(swigCPtr);
      ndSphereInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndSphereInfo(cPtr, false);
      return ret;
    } 
  }

  public ndCapsuleInfo m_capsule {
    set {
      newtonPINVOKE.ndShapeInfo_m_capsule_set(swigCPtr, ndCapsuleInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_capsule_get(swigCPtr);
      ndCapsuleInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndCapsuleInfo(cPtr, false);
      return ret;
    } 
  }

  public ndCollisionBvhInfo m_bvh {
    set {
      newtonPINVOKE.ndShapeInfo_m_bvh_set(swigCPtr, ndCollisionBvhInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_bvh_get(swigCPtr);
      ndCollisionBvhInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndCollisionBvhInfo(cPtr, false);
      return ret;
    } 
  }

  public ndCylinderInfo m_cylinder {
    set {
      newtonPINVOKE.ndShapeInfo_m_cylinder_set(swigCPtr, ndCylinderInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_cylinder_get(swigCPtr);
      ndCylinderInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndCylinderInfo(cPtr, false);
      return ret;
    } 
  }

  public ndCoumpoundInfo m_compound {
    set {
      newtonPINVOKE.ndShapeInfo_m_compound_set(swigCPtr, ndCoumpoundInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_compound_get(swigCPtr);
      ndCoumpoundInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndCoumpoundInfo(cPtr, false);
      return ret;
    } 
  }

  public ndConvexHullInfo m_convexhull {
    set {
      newtonPINVOKE.ndShapeInfo_m_convexhull_set(swigCPtr, ndConvexHullInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_convexhull_get(swigCPtr);
      ndConvexHullInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndConvexHullInfo(cPtr, false);
      return ret;
    } 
  }

  public ndHeighfieldInfo m_heightfield {
    set {
      newtonPINVOKE.ndShapeInfo_m_heightfield_set(swigCPtr, ndHeighfieldInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_heightfield_get(swigCPtr);
      ndHeighfieldInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndHeighfieldInfo(cPtr, false);
      return ret;
    } 
  }

  public ndProceduralInfoInfo m_procedural {
    set {
      newtonPINVOKE.ndShapeInfo_m_procedural_set(swigCPtr, ndProceduralInfoInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_procedural_get(swigCPtr);
      ndProceduralInfoInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndProceduralInfoInfo(cPtr, false);
      return ret;
    } 
  }

  public ndChamferCylinderInfo m_chamferCylinder {
    set {
      newtonPINVOKE.ndShapeInfo_m_chamferCylinder_set(swigCPtr, ndChamferCylinderInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_chamferCylinder_get(swigCPtr);
      ndChamferCylinderInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndChamferCylinderInfo(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_paramArray {
    set {
      newtonPINVOKE.ndShapeInfo_m_paramArray_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeInfo_m_paramArray_get(swigCPtr);
      SWIGTYPE_p_ndFloat32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat32(cPtr, false);
      return ret;
    } 
  }

  public ndShapeInfo() : this(newtonPINVOKE.new_ndShapeInfo(), true) {
  }

}
