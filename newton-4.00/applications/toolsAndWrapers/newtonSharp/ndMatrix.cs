//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndMatrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndMatrix() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndMatrix() : this(newtonPINVOKE.new_ndMatrix__SWIG_0(), true) {
  }

  public ndMatrix(SWIGTYPE_p_ndFloat32 array) : this(newtonPINVOKE.new_ndMatrix__SWIG_1(SWIGTYPE_p_ndFloat32.getCPtr(array)), true) {
  }

  public ndMatrix(ndVector front, ndVector up, ndVector right, ndVector posit) : this(newtonPINVOKE.new_ndMatrix__SWIG_2(ndVector.getCPtr(front), ndVector.getCPtr(up), ndVector.getCPtr(right), ndVector.getCPtr(posit)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndMatrix(ndQuaternion rotation, ndVector position) : this(newtonPINVOKE.new_ndMatrix__SWIG_3(ndQuaternion.getCPtr(rotation), ndVector.getCPtr(position)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndMatrix(ndVector front) : this(newtonPINVOKE.new_ndMatrix__SWIG_4(ndVector.getCPtr(front)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndMatrix(ndVector p, ndVector q) : this(newtonPINVOKE.new_ndMatrix__SWIG_5(ndVector.getCPtr(p), ndVector.getCPtr(q)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndMatrix Inverse() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndMatrix_Inverse(swigCPtr), true);
    return ret;
  }

  public ndMatrix Inverse4x4() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndMatrix_Inverse4x4(swigCPtr), true);
    return ret;
  }

  public ndMatrix Transpose() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndMatrix_Transpose(swigCPtr), true);
    return ret;
  }

  public ndMatrix Transpose4X4() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndMatrix_Transpose4X4(swigCPtr), true);
    return ret;
  }

  public ndVector RotateVector(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_RotateVector(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector UnrotateVector(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_UnrotateVector(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector TransformVector(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_TransformVector(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector UntransformVector(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_UntransformVector(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndPlane TransformPlane(SWIGTYPE_p_ndPlane localPlane) {
    SWIGTYPE_p_ndPlane ret = new SWIGTYPE_p_ndPlane(newtonPINVOKE.ndMatrix_TransformPlane(swigCPtr, SWIGTYPE_p_ndPlane.getCPtr(localPlane)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndPlane UntransformPlane(SWIGTYPE_p_ndPlane globalPlane) {
    SWIGTYPE_p_ndPlane ret = new SWIGTYPE_p_ndPlane(newtonPINVOKE.ndMatrix_UntransformPlane(swigCPtr, SWIGTYPE_p_ndPlane.getCPtr(globalPlane)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector TransformVector1x4(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_TransformVector1x4(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector SolveByGaussianElimination(ndVector v) {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_SolveByGaussianElimination(swigCPtr, ndVector.getCPtr(v)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TransformBBox(ndVector p0local, ndVector p1local, ndVector p0, ndVector p1) {
    newtonPINVOKE.ndMatrix_TransformBBox(swigCPtr, ndVector.getCPtr(p0local), ndVector.getCPtr(p1local), ndVector.getCPtr(p0), ndVector.getCPtr(p1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalcPitchYawRoll(ndVector euler0, ndVector euler1) {
    newtonPINVOKE.ndMatrix_CalcPitchYawRoll(swigCPtr, ndVector.getCPtr(euler0), ndVector.getCPtr(euler1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformTriplex(SWIGTYPE_p_ndFloat32 dst, SWIGTYPE_p_ndInt32 dstStrideInBytes, SWIGTYPE_p_ndFloat32 src, SWIGTYPE_p_ndInt32 srcStrideInBytes, SWIGTYPE_p_ndInt32 count) {
    newtonPINVOKE.ndMatrix_TransformTriplex__SWIG_0(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(dst), SWIGTYPE_p_ndInt32.getCPtr(dstStrideInBytes), SWIGTYPE_p_ndFloat32.getCPtr(src), SWIGTYPE_p_ndInt32.getCPtr(srcStrideInBytes), SWIGTYPE_p_ndInt32.getCPtr(count));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformTriplex(SWIGTYPE_p_ndFloat64 dst, SWIGTYPE_p_ndInt32 dstStrideInBytes, SWIGTYPE_p_ndFloat64 src, SWIGTYPE_p_ndInt32 srcStrideInBytes, SWIGTYPE_p_ndInt32 count) {
    newtonPINVOKE.ndMatrix_TransformTriplex__SWIG_1(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(dst), SWIGTYPE_p_ndInt32.getCPtr(dstStrideInBytes), SWIGTYPE_p_ndFloat64.getCPtr(src), SWIGTYPE_p_ndInt32.getCPtr(srcStrideInBytes), SWIGTYPE_p_ndInt32.getCPtr(count));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformTriplex(SWIGTYPE_p_ndFloat64 dst, SWIGTYPE_p_ndInt32 dstStrideInBytes, SWIGTYPE_p_ndFloat32 src, SWIGTYPE_p_ndInt32 srcStrideInBytes, SWIGTYPE_p_ndInt32 count) {
    newtonPINVOKE.ndMatrix_TransformTriplex__SWIG_2(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(dst), SWIGTYPE_p_ndInt32.getCPtr(dstStrideInBytes), SWIGTYPE_p_ndFloat32.getCPtr(src), SWIGTYPE_p_ndInt32.getCPtr(srcStrideInBytes), SWIGTYPE_p_ndInt32.getCPtr(count));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool TestIdentity() {
    bool ret = newtonPINVOKE.ndMatrix_TestIdentity(swigCPtr);
    return ret;
  }

  public bool TestSymetric3x3() {
    bool ret = newtonPINVOKE.ndMatrix_TestSymetric3x3(swigCPtr);
    return ret;
  }

  public bool TestOrthogonal(SWIGTYPE_p_ndFloat32 tol) {
    bool ret = newtonPINVOKE.ndMatrix_TestOrthogonal__SWIG_0(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(tol));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TestOrthogonal() {
    bool ret = newtonPINVOKE.ndMatrix_TestOrthogonal__SWIG_1(swigCPtr);
    return ret;
  }

  public ndMatrix Multiply3X3(ndMatrix B) {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndMatrix_Multiply3X3(swigCPtr, ndMatrix.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector EigenVectors() {
    ndVector ret = new ndVector(newtonPINVOKE.ndMatrix_EigenVectors(swigCPtr), true);
    return ret;
  }

  public void PolarDecomposition(ndMatrix transformMatrix, ndVector scale, ndMatrix stretchAxis) {
    newtonPINVOKE.ndMatrix_PolarDecomposition(swigCPtr, ndMatrix.getCPtr(transformMatrix), ndVector.getCPtr(scale), ndMatrix.getCPtr(stretchAxis));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndMatrix(ndMatrix transformMatrix, ndVector scale, ndMatrix stretchAxis) : this(newtonPINVOKE.new_ndMatrix__SWIG_6(ndMatrix.getCPtr(transformMatrix), ndVector.getCPtr(scale), ndMatrix.getCPtr(stretchAxis)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector m_front {
    set {
      newtonPINVOKE.ndMatrix_m_front_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndMatrix_m_front_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public ndVector m_up {
    set {
      newtonPINVOKE.ndMatrix_m_up_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndMatrix_m_up_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public ndVector m_right {
    set {
      newtonPINVOKE.ndMatrix_m_right_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndMatrix_m_right_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public ndVector m_posit {
    set {
      newtonPINVOKE.ndMatrix_m_posit_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndMatrix_m_posit_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

}
