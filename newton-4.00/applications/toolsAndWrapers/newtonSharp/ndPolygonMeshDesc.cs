//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndPolygonMeshDesc : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndPolygonMeshDesc(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndPolygonMeshDesc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndPolygonMeshDesc() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndPolygonMeshDesc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class ndMesh : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ndMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndMesh obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ndMesh() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndPolygonMeshDesc_ndMesh(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_ndInt32 m_globalFaceIndexCount {
      set {
        newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalFaceIndexCount_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalFaceIndexCount_get(swigCPtr);
        SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_ndInt32 m_globalFaceIndexStart {
      set {
        newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalFaceIndexStart_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalFaceIndexStart_get(swigCPtr);
        SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_ndFloat32 m_globalHitDistance {
      set {
        newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalHitDistance_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_ndMesh_m_globalHitDistance_get(swigCPtr);
        SWIGTYPE_p_ndFloat32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat32(cPtr, false);
        return ret;
      } 
    }
  
    public ndMesh() : this(newtonPINVOKE.new_ndPolygonMeshDesc_ndMesh(), true) {
    }
  
  }

  public ndPolygonMeshDesc() : this(newtonPINVOKE.new_ndPolygonMeshDesc__SWIG_0(), true) {
  }

  public ndPolygonMeshDesc(SWIGTYPE_p_ndContactSolver proxy, bool ccdMode) : this(newtonPINVOKE.new_ndPolygonMeshDesc__SWIG_1(SWIGTYPE_p_ndContactSolver.getCPtr(proxy), ccdMode), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SortFaceArray() {
    newtonPINVOKE.ndPolygonMeshDesc_SortFaceArray(swigCPtr);
  }

  public SWIGTYPE_p_ndFloat32 GetSeparetionDistance() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndPolygonMeshDesc_GetSeparetionDistance(swigCPtr), true);
    return ret;
  }

  public void SetDistanceTravel(ndVector distanceInGlobalSpace) {
    newtonPINVOKE.ndPolygonMeshDesc_SetDistanceTravel(swigCPtr, ndVector.getCPtr(distanceInGlobalSpace));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndInt32 GetFaceIndexCount(SWIGTYPE_p_ndInt32 indexCount) {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_GetFaceIndexCount(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(indexCount)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndInt32 GetAdjacentFaceEdgeNormalArray(SWIGTYPE_p_ndInt32 faceIndexArray, SWIGTYPE_p_ndInt32 indexCount) {
    global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_GetAdjacentFaceEdgeNormalArray(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(faceIndexArray), SWIGTYPE_p_ndInt32.getCPtr(indexCount));
    SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndInt32 GetNormalIndex(SWIGTYPE_p_ndInt32 faceIndexArray, SWIGTYPE_p_ndInt32 indexCount) {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_GetNormalIndex(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(faceIndexArray), SWIGTYPE_p_ndInt32.getCPtr(indexCount)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndInt32 GetFaceId(SWIGTYPE_p_ndInt32 faceIndexArray, SWIGTYPE_p_ndInt32 indexCount) {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_GetFaceId(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(faceIndexArray), SWIGTYPE_p_ndInt32.getCPtr(indexCount)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetFaceSize(SWIGTYPE_p_ndInt32 faceIndexArray, SWIGTYPE_p_ndInt32 indexCount) {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndPolygonMeshDesc_GetFaceSize(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(faceIndexArray), SWIGTYPE_p_ndInt32.getCPtr(indexCount)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector m_boxDistanceTravelInMeshSpace {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_set(swigCPtr, ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_get(swigCPtr);
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_faceCount {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_faceCount_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_m_faceCount_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_vertexStrideInBytes {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_vertexStrideInBytes_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_m_vertexStrideInBytes_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_skinMargin {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_skinMargin_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndPolygonMeshDesc_m_skinMargin_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ndShapeInstance m_convexInstance {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_convexInstance_set(swigCPtr, ndShapeInstance.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_convexInstance_get(swigCPtr);
      ndShapeInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeInstance(cPtr, false);
      return ret;
    } 
  }

  public ndShapeInstance m_polySoupInstance {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_polySoupInstance_set(swigCPtr, ndShapeInstance.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_polySoupInstance_get(swigCPtr);
      ndShapeInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeInstance(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_vertex {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_vertex_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_vertex_get(swigCPtr);
      SWIGTYPE_p_ndFloat32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_faceIndexCount {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_faceIndexCount_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_faceIndexCount_get(swigCPtr);
      SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_faceVertexIndex {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_faceVertexIndex_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_faceVertexIndex_get(swigCPtr);
      SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
      return ret;
    } 
  }

  public ndPolygonMeshDesc.ndMesh m_meshData {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_meshData_set(swigCPtr, ndPolygonMeshDesc.ndMesh.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_meshData_get(swigCPtr);
      ndPolygonMeshDesc.ndMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndPolygonMeshDesc.ndMesh(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_faceIndexStart {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_faceIndexStart_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_faceIndexStart_get(swigCPtr);
      SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_hitDistance {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_hitDistance_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_hitDistance_get(swigCPtr);
      SWIGTYPE_p_ndFloat32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat32(cPtr, false);
      return ret;
    } 
  }

  public ndShapeStaticMesh m_me {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_me_set(swigCPtr, ndShapeStaticMesh.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_me_get(swigCPtr);
      ndShapeStaticMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeStaticMesh(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_globalFaceVertexIndex {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_globalFaceVertexIndex_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndPolygonMeshDesc_m_globalFaceVertexIndex_get(swigCPtr);
      SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_maxT {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_maxT_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndPolygonMeshDesc_m_maxT_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_globalIndexCount {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_globalIndexCount_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_m_globalIndexCount_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_threadId {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_threadId_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndPolygonMeshDesc_m_threadId_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_doContinueCollisionTest {
    set {
      newtonPINVOKE.ndPolygonMeshDesc_m_doContinueCollisionTest_set(swigCPtr, value);
    } 
    get {
      bool ret = newtonPINVOKE.ndPolygonMeshDesc_m_doContinueCollisionTest_get(swigCPtr);
      return ret;
    } 
  }

}
