//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShapeMaterial : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndShapeMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShapeMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndShapeMaterial() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndShapeMaterial(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndShapeMaterial() : this(newtonPINVOKE.new_ndShapeMaterial(), true) {
  }

  public SWIGTYPE_p_ndInt64 m_userId {
    set {
      newtonPINVOKE.ndShapeMaterial_m_userId_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt64 ret = new SWIGTYPE_p_ndInt64(newtonPINVOKE.ndShapeMaterial_m_userId_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public class nData : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal nData(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(nData obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~nData() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndShapeMaterial_nData(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_void m_userData {
      set {
        newtonPINVOKE.ndShapeMaterial_nData_m_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndShapeMaterial_nData_m_userData_get(swigCPtr);
        SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_ndUnsigned64 m_alignPad {
      set {
        newtonPINVOKE.ndShapeMaterial_nData_m_alignPad_set(swigCPtr, SWIGTYPE_p_ndUnsigned64.getCPtr(value));
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_ndUnsigned64 ret = new SWIGTYPE_p_ndUnsigned64(newtonPINVOKE.ndShapeMaterial_nData_m_alignPad_get(swigCPtr), true);
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public nData() : this(newtonPINVOKE.new_ndShapeMaterial_nData(), true) {
    }
  
  }

  public ndShapeMaterial.nData m_data {
    set {
      newtonPINVOKE.ndShapeMaterial_m_data_set(swigCPtr, ndShapeMaterial.nData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeMaterial_m_data_get(swigCPtr);
      ndShapeMaterial.nData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeMaterial.nData(cPtr, false);
      return ret;
    } 
  }

  public class dExtraData : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal dExtraData(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(dExtraData obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~dExtraData() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndShapeMaterial_dExtraData(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_ndUnsigned64 m_intData {
      set {
        newtonPINVOKE.ndShapeMaterial_dExtraData_m_intData_set(swigCPtr, SWIGTYPE_p_ndUnsigned64.getCPtr(value));
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_ndUnsigned64 ret = new SWIGTYPE_p_ndUnsigned64(newtonPINVOKE.ndShapeMaterial_dExtraData_m_intData_get(swigCPtr), true);
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_ndFloat32 m_floatData {
      set {
        newtonPINVOKE.ndShapeMaterial_dExtraData_m_floatData_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShapeMaterial_dExtraData_m_floatData_get(swigCPtr), true);
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public dExtraData() : this(newtonPINVOKE.new_ndShapeMaterial_dExtraData(), true) {
    }
  
  }

  public ndShapeMaterial.dExtraData m_userParam {
    set {
      newtonPINVOKE.ndShapeMaterial_m_userParam_set(swigCPtr, ndShapeMaterial.dExtraData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeMaterial_m_userParam_get(swigCPtr);
      ndShapeMaterial.dExtraData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeMaterial.dExtraData(cPtr, false);
      return ret;
    } 
  }

}
