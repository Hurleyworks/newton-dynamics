//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndVector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndVector() : this(newtonPINVOKE.new_ndVector__SWIG_0(), true) {
  }

  public ndVector(SWIGTYPE_p___m128i type) : this(newtonPINVOKE.new_ndVector__SWIG_1(SWIGTYPE_p___m128i.getCPtr(type)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(SWIGTYPE_p___m128 type) : this(newtonPINVOKE.new_ndVector__SWIG_2(SWIGTYPE_p___m128.getCPtr(type)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(SWIGTYPE_p_ndFloat32 a) : this(newtonPINVOKE.new_ndVector__SWIG_3(SWIGTYPE_p_ndFloat32.getCPtr(a)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(SWIGTYPE_p_ndFloat32 baseAddr, SWIGTYPE_p_ndInt32 index) : this(newtonPINVOKE.new_ndVector__SWIG_5(SWIGTYPE_p_ndFloat32.getCPtr(baseAddr), SWIGTYPE_p_ndInt32.getCPtr(index)), true) {
  }

  public ndVector(SWIGTYPE_p_ndFloat64 ptr) : this(newtonPINVOKE.new_ndVector__SWIG_6(SWIGTYPE_p_ndFloat64.getCPtr(ptr)), true) {
  }

  public ndVector(ndVector copy) : this(newtonPINVOKE.new_ndVector__SWIG_7(ndVector.getCPtr(copy)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(ndBigVector copy) : this(newtonPINVOKE.new_ndVector__SWIG_8(ndBigVector.getCPtr(copy)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(SWIGTYPE_p_ndFloat32 x, SWIGTYPE_p_ndFloat32 y, SWIGTYPE_p_ndFloat32 z, SWIGTYPE_p_ndFloat32 w) : this(newtonPINVOKE.new_ndVector__SWIG_9(SWIGTYPE_p_ndFloat32.getCPtr(x), SWIGTYPE_p_ndFloat32.getCPtr(y), SWIGTYPE_p_ndFloat32.getCPtr(z), SWIGTYPE_p_ndFloat32.getCPtr(w)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector(SWIGTYPE_p_ndInt32 ix, SWIGTYPE_p_ndInt32 iy, SWIGTYPE_p_ndInt32 iz, SWIGTYPE_p_ndInt32 iw) : this(newtonPINVOKE.new_ndVector__SWIG_10(SWIGTYPE_p_ndInt32.getCPtr(ix), SWIGTYPE_p_ndInt32.getCPtr(iy), SWIGTYPE_p_ndInt32.getCPtr(iz), SWIGTYPE_p_ndInt32.getCPtr(iw)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndFloat32 GetX() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_GetX(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetY() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_GetY(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetZ() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_GetZ(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetW() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_GetW(swigCPtr), true);
    return ret;
  }

  public void SetX(SWIGTYPE_p_ndFloat32 x) {
    newtonPINVOKE.ndVector_SetX(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetY(SWIGTYPE_p_ndFloat32 x) {
    newtonPINVOKE.ndVector_SetY(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetZ(SWIGTYPE_p_ndFloat32 x) {
    newtonPINVOKE.ndVector_SetZ(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetW(SWIGTYPE_p_ndFloat32 x) {
    newtonPINVOKE.ndVector_SetW(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndFloat32 GetScalar() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_GetScalar(swigCPtr), true);
    return ret;
  }

  public void Store(SWIGTYPE_p_ndFloat32 dst) {
    newtonPINVOKE.ndVector_Store(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(dst));
  }

  public ndVector BroadcastX() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_BroadcastX(swigCPtr), true);
    return ret;
  }

  public ndVector BroadcastY() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_BroadcastY(swigCPtr), true);
    return ret;
  }

  public ndVector BroadcastZ() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_BroadcastZ(swigCPtr), true);
    return ret;
  }

  public ndVector BroadcastW() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_BroadcastW(swigCPtr), true);
    return ret;
  }

  public ndVector Scale(SWIGTYPE_p_ndFloat32 s) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Scale(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(s)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector DotProduct(ndVector A) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_DotProduct(swigCPtr, ndVector.getCPtr(A)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector CrossProduct(ndVector B) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_CrossProduct__SWIG_0(swigCPtr, ndVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector CrossProduct(ndVector A, ndVector B) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_CrossProduct__SWIG_1(swigCPtr, ndVector.getCPtr(A), ndVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector Reciproc() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Reciproc(swigCPtr), true);
    return ret;
  }

  public ndVector MulAdd(ndVector A, ndVector B) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_MulAdd(swigCPtr, ndVector.getCPtr(A), ndVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector MulSub(ndVector A, ndVector B) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_MulSub(swigCPtr, ndVector.getCPtr(A), ndVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector AddHorizontal() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_AddHorizontal(swigCPtr), true);
    return ret;
  }

  public ndVector Abs() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Abs(swigCPtr), true);
    return ret;
  }

  public ndVector GetMax() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_GetMax__SWIG_0(swigCPtr), true);
    return ret;
  }

  public ndVector GetMax(ndVector data) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_GetMax__SWIG_1(swigCPtr, ndVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector GetMin(ndVector data) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_GetMin(swigCPtr, ndVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector GetInt() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_GetInt(swigCPtr), true);
    return ret;
  }

  public ndVector TestZero() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_TestZero(swigCPtr), true);
    return ret;
  }

  public ndVector Floor() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Floor(swigCPtr), true);
    return ret;
  }

  public ndVector Sqrt() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Sqrt(swigCPtr), true);
    return ret;
  }

  public ndVector InvSqrt() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_InvSqrt(swigCPtr), true);
    return ret;
  }

  public ndVector InvMagSqrt() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_InvMagSqrt(swigCPtr), true);
    return ret;
  }

  public ndVector Normalize() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Normalize(swigCPtr), true);
    return ret;
  }

  public ndVector AndNot(ndVector data) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_AndNot(swigCPtr, ndVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector Select(ndVector data, ndVector mask) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_Select(swigCPtr, ndVector.getCPtr(data), ndVector.getCPtr(mask)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndInt32 GetSignMask() {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndVector_GetSignMask(swigCPtr), true);
    return ret;
  }

  public ndVector ShiftRight() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_ShiftRight(swigCPtr), true);
    return ret;
  }

  public ndVector ShiftTripleRight() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_ShiftTripleRight(swigCPtr), true);
    return ret;
  }

  public ndVector ShiftTripleLeft() {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_ShiftTripleLeft(swigCPtr), true);
    return ret;
  }

  public ndVector ShiftRightLogical(SWIGTYPE_p_ndInt32 bits) {
    ndVector ret = new ndVector(newtonPINVOKE.ndVector_ShiftRightLogical(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(bits)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Transpose4x4(ndVector dst0, ndVector dst1, ndVector dst2, ndVector dst3, ndVector src0, ndVector src1, ndVector src2, ndVector src3) {
    newtonPINVOKE.ndVector_Transpose4x4(ndVector.getCPtr(dst0), ndVector.getCPtr(dst1), ndVector.getCPtr(dst2), ndVector.getCPtr(dst3), ndVector.getCPtr(src0), ndVector.getCPtr(src1), ndVector.getCPtr(src2), ndVector.getCPtr(src3));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Trace(string arg0) {
    newtonPINVOKE.ndVector_Trace(swigCPtr, arg0);
  }

  public SWIGTYPE_p_ndFloat32 m_f {
    set {
      newtonPINVOKE.ndVector_m_f_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_f_get(swigCPtr);
      SWIGTYPE_p_ndFloat32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_i {
    set {
      newtonPINVOKE.ndVector_m_i_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_i_get(swigCPtr);
      SWIGTYPE_p_ndInt32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p___m128 m_type {
    set {
      newtonPINVOKE.ndVector_m_type_set(swigCPtr, SWIGTYPE_p___m128.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128 ret = new SWIGTYPE_p___m128(newtonPINVOKE.ndVector_m_type_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p___m128i m_typeInt {
    set {
      newtonPINVOKE.ndVector_m_typeInt_set(swigCPtr, SWIGTYPE_p___m128i.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128i ret = new SWIGTYPE_p___m128i(newtonPINVOKE.ndVector_m_typeInt_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_x {
    set {
      newtonPINVOKE.ndVector_m_x_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_m_x_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_y {
    set {
      newtonPINVOKE.ndVector_m_y_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_m_y_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_z {
    set {
      newtonPINVOKE.ndVector_m_z_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_m_z_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_w {
    set {
      newtonPINVOKE.ndVector_m_w_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndVector_m_w_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_ix {
    set {
      newtonPINVOKE.ndVector_m_ix_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndVector_m_ix_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_iy {
    set {
      newtonPINVOKE.ndVector_m_iy_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndVector_m_iy_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_iz {
    set {
      newtonPINVOKE.ndVector_m_iz_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndVector_m_iz_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_iw {
    set {
      newtonPINVOKE.ndVector_m_iw_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndVector_m_iw_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ndVector m_zero {
    set {
      newtonPINVOKE.ndVector_m_zero_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_zero_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_one {
    set {
      newtonPINVOKE.ndVector_m_one_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_one_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_wOne {
    set {
      newtonPINVOKE.ndVector_m_wOne_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_wOne_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_two {
    set {
      newtonPINVOKE.ndVector_m_two_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_two_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_half {
    set {
      newtonPINVOKE.ndVector_m_half_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_half_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_three {
    set {
      newtonPINVOKE.ndVector_m_three_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_three_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_negOne {
    set {
      newtonPINVOKE.ndVector_m_negOne_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_negOne_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_xMask {
    set {
      newtonPINVOKE.ndVector_m_xMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_xMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_yMask {
    set {
      newtonPINVOKE.ndVector_m_yMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_yMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_zMask {
    set {
      newtonPINVOKE.ndVector_m_zMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_zMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_wMask {
    set {
      newtonPINVOKE.ndVector_m_wMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_wMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_xyzwMask {
    set {
      newtonPINVOKE.ndVector_m_xyzwMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_xyzwMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_epsilon {
    set {
      newtonPINVOKE.ndVector_m_epsilon_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_epsilon_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_signMask {
    set {
      newtonPINVOKE.ndVector_m_signMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_signMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

  public static ndVector m_triplexMask {
    set {
      newtonPINVOKE.ndVector_m_triplexMask_set(ndVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndVector_m_triplexMask_get();
      ndVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndVector(cPtr, false);
      return ret;
    } 
  }

}
