//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndBodyTriggerVolume : ndBodyKinematic {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndBodyTriggerVolume(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndBodyTriggerVolume_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndBodyTriggerVolume obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndBodyTriggerVolume(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ndBodyTriggerVolume() : this(newtonPINVOKE.new_ndBodyTriggerVolume__SWIG_0(), true) {
  }

  public ndBodyTriggerVolume(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor desc) : this(newtonPINVOKE.new_ndBodyTriggerVolume__SWIG_1(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor.getCPtr(desc)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ndBodyTriggerVolume GetAsBodyTriggerVolume() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBodyTriggerVolume_GetAsBodyTriggerVolume(swigCPtr);
    ndBodyTriggerVolume ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyTriggerVolume(cPtr, false);
    return ret;
  }

  public virtual void OnTrigger(ndBodyKinematic body, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyTriggerVolume_OnTrigger(swigCPtr, ndBodyKinematic.getCPtr(body), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnTriggerEnter(ndBodyKinematic body, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyTriggerVolume_OnTriggerEnter(swigCPtr, ndBodyKinematic.getCPtr(body), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnTriggerExit(ndBodyKinematic body, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyTriggerVolume_OnTriggerExit(swigCPtr, ndBodyKinematic.getCPtr(body), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SpecialUpdate(SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyTriggerVolume_SpecialUpdate(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Save(SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor desc) {
    newtonPINVOKE.ndBodyTriggerVolume_Save(swigCPtr, SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor.getCPtr(desc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
