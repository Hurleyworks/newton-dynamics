//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShapeCompound : ndShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndShapeCompound(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndShapeCompound_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShapeCompound obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndShapeCompound(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class ndTreeArray : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ndTreeArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndTreeArray obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ndTreeArray() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndShapeCompound_ndTreeArray(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public ndTreeArray() : this(newtonPINVOKE.new_ndShapeCompound_ndTreeArray(), true) {
    }
  
    public void AddNode(ndShapeCompound.ndNodeBase node, SWIGTYPE_p_ndInt32 index, ndShapeInstance parent) {
      newtonPINVOKE.ndShapeCompound_ndTreeArray_AddNode(swigCPtr, ndShapeCompound.ndNodeBase.getCPtr(node), SWIGTYPE_p_ndInt32.getCPtr(index), ndShapeInstance.getCPtr(parent));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public ndShapeCompound() : this(newtonPINVOKE.new_ndShapeCompound__SWIG_0(), true) {
  }

  public ndShapeCompound(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor desc) : this(newtonPINVOKE.new_ndShapeCompound__SWIG_1(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor.getCPtr(desc)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOwner(ndShapeInstance myInstance) {
    newtonPINVOKE.ndShapeCompound_SetOwner(swigCPtr, ndShapeInstance.getCPtr(myInstance));
  }

  public ndShapeCompound.ndTreeArray GetTree() {
    ndShapeCompound.ndTreeArray ret = new ndShapeCompound.ndTreeArray(newtonPINVOKE.ndShapeCompound_GetTree(swigCPtr), false);
    return ret;
  }

  public virtual void BeginAddRemove() {
    newtonPINVOKE.ndShapeCompound_BeginAddRemove(swigCPtr);
  }

  public virtual SWIGTYPE_p_ndShapeCompound__ndTreeArray__ndNode AddCollision(ndShapeInstance part) {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShapeCompound_AddCollision(swigCPtr, ndShapeInstance.getCPtr(part));
    SWIGTYPE_p_ndShapeCompound__ndTreeArray__ndNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndShapeCompound__ndTreeArray__ndNode(cPtr, false);
    return ret;
  }

  public virtual void EndAddRemove() {
    newtonPINVOKE.ndShapeCompound_EndAddRemove(swigCPtr);
  }

  public class ndNodeBase : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ndNodeBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndNodeBase obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ndNodeBase() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndShapeCompound_ndNodeBase(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public ndNodeBase() : this(newtonPINVOKE.new_ndShapeCompound_ndNodeBase__SWIG_0(), true) {
    }
  
    public ndNodeBase(ndShapeCompound.ndNodeBase copyFrom) : this(newtonPINVOKE.new_ndShapeCompound_ndNodeBase__SWIG_1(ndShapeCompound.ndNodeBase.getCPtr(copyFrom)), true) {
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public ndNodeBase(ndShapeInstance instance) : this(newtonPINVOKE.new_ndShapeCompound_ndNodeBase__SWIG_2(ndShapeInstance.getCPtr(instance)), true) {
    }
  
    public ndNodeBase(ndShapeCompound.ndNodeBase left, ndShapeCompound.ndNodeBase right) : this(newtonPINVOKE.new_ndShapeCompound_ndNodeBase__SWIG_3(ndShapeCompound.ndNodeBase.getCPtr(left), ndShapeCompound.ndNodeBase.getCPtr(right)), true) {
    }
  
    public ndShapeInstance GetShape() {
      global::System.IntPtr cPtr = newtonPINVOKE.ndShapeCompound_ndNodeBase_GetShape(swigCPtr);
      ndShapeInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeInstance(cPtr, false);
      return ret;
    }
  
  }

  public enum ndNodeType {
    m_leaf,
    m_node
  }

}
