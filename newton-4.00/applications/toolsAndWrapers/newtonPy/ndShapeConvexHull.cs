//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShapeConvexHull : ndShapeConvex {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndShapeConvexHull(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndShapeConvexHull_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShapeConvexHull obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndShapeConvexHull(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ndShapeConvexHull(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor desc) : this(newtonPINVOKE.new_ndShapeConvexHull__SWIG_0(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor.getCPtr(desc)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndShapeConvexHull(SWIGTYPE_p_ndInt32 count, SWIGTYPE_p_ndInt32 strideInBytes, SWIGTYPE_p_ndFloat32 tolerance, SWIGTYPE_p_ndFloat32 vertexArray) : this(newtonPINVOKE.new_ndShapeConvexHull__SWIG_1(SWIGTYPE_p_ndInt32.getCPtr(count), SWIGTYPE_p_ndInt32.getCPtr(strideInBytes), SWIGTYPE_p_ndFloat32.getCPtr(tolerance), SWIGTYPE_p_ndFloat32.getCPtr(vertexArray)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
