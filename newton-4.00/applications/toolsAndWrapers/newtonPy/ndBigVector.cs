//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndBigVector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndBigVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndBigVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndBigVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndBigVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndBigVector() : this(newtonPINVOKE.new_ndBigVector__SWIG_0(), true) {
  }

  public ndBigVector(ndBigVector copy) : this(newtonPINVOKE.new_ndBigVector__SWIG_1(ndBigVector.getCPtr(copy)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p___m128d typeLow, SWIGTYPE_p___m128d typeHigh) : this(newtonPINVOKE.new_ndBigVector__SWIG_2(SWIGTYPE_p___m128d.getCPtr(typeLow), SWIGTYPE_p___m128d.getCPtr(typeHigh)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p___m128i typeLow, SWIGTYPE_p___m128i typeHigh) : this(newtonPINVOKE.new_ndBigVector__SWIG_3(SWIGTYPE_p___m128i.getCPtr(typeLow), SWIGTYPE_p___m128i.getCPtr(typeHigh)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p_ndFloat64 a) : this(newtonPINVOKE.new_ndBigVector__SWIG_4(SWIGTYPE_p_ndFloat64.getCPtr(a)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p_ndFloat64 baseAddr, SWIGTYPE_p_ndInt64 index) : this(newtonPINVOKE.new_ndBigVector__SWIG_5(SWIGTYPE_p_ndFloat64.getCPtr(baseAddr), SWIGTYPE_p_ndInt64.getCPtr(index)), true) {
  }

  public ndBigVector(ndVector v) : this(newtonPINVOKE.new_ndBigVector__SWIG_6(ndVector.getCPtr(v)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p_ndFloat64 x, SWIGTYPE_p_ndFloat64 y, SWIGTYPE_p_ndFloat64 z, SWIGTYPE_p_ndFloat64 w) : this(newtonPINVOKE.new_ndBigVector__SWIG_8(SWIGTYPE_p_ndFloat64.getCPtr(x), SWIGTYPE_p_ndFloat64.getCPtr(y), SWIGTYPE_p_ndFloat64.getCPtr(z), SWIGTYPE_p_ndFloat64.getCPtr(w)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p_ndInt32 ix, SWIGTYPE_p_ndInt32 iy, SWIGTYPE_p_ndInt32 iz, SWIGTYPE_p_ndInt32 iw) : this(newtonPINVOKE.new_ndBigVector__SWIG_9(SWIGTYPE_p_ndInt32.getCPtr(ix), SWIGTYPE_p_ndInt32.getCPtr(iy), SWIGTYPE_p_ndInt32.getCPtr(iz), SWIGTYPE_p_ndInt32.getCPtr(iw)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector(SWIGTYPE_p_ndInt64 ix, SWIGTYPE_p_ndInt64 iy, SWIGTYPE_p_ndInt64 iz, SWIGTYPE_p_ndInt64 iw) : this(newtonPINVOKE.new_ndBigVector__SWIG_10(SWIGTYPE_p_ndInt64.getCPtr(ix), SWIGTYPE_p_ndInt64.getCPtr(iy), SWIGTYPE_p_ndInt64.getCPtr(iz), SWIGTYPE_p_ndInt64.getCPtr(iw)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndFloat64 GetX() {
    SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_GetX(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat64 GetY() {
    SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_GetY(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat64 GetZ() {
    SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_GetZ(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat64 GetW() {
    SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_GetW(swigCPtr), true);
    return ret;
  }

  public void SetX(SWIGTYPE_p_ndFloat64 x) {
    newtonPINVOKE.ndBigVector_SetX(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetY(SWIGTYPE_p_ndFloat64 x) {
    newtonPINVOKE.ndBigVector_SetY(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetZ(SWIGTYPE_p_ndFloat64 x) {
    newtonPINVOKE.ndBigVector_SetZ(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetW(SWIGTYPE_p_ndFloat64 x) {
    newtonPINVOKE.ndBigVector_SetW(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(x));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndFloat64 GetScalar() {
    SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_GetScalar(swigCPtr), true);
    return ret;
  }

  public ndBigVector MulAdd(ndBigVector A, ndBigVector B) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_MulAdd(swigCPtr, ndBigVector.getCPtr(A), ndBigVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector MulSub(ndBigVector A, ndBigVector B) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_MulSub(swigCPtr, ndBigVector.getCPtr(A), ndBigVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector AddHorizontal() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_AddHorizontal(swigCPtr), true);
    return ret;
  }

  public ndBigVector BroadcastX() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_BroadcastX(swigCPtr), true);
    return ret;
  }

  public ndBigVector BroadcastY() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_BroadcastY(swigCPtr), true);
    return ret;
  }

  public ndBigVector BroadcastZ() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_BroadcastZ(swigCPtr), true);
    return ret;
  }

  public ndBigVector BroadcastW() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_BroadcastW(swigCPtr), true);
    return ret;
  }

  public ndBigVector Scale(SWIGTYPE_p_ndFloat64 s) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Scale(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(s)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector Abs() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Abs(swigCPtr), true);
    return ret;
  }

  public ndBigVector Reciproc() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Reciproc(swigCPtr), true);
    return ret;
  }

  public ndBigVector Sqrt() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Sqrt(swigCPtr), true);
    return ret;
  }

  public ndBigVector InvSqrt() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_InvSqrt(swigCPtr), true);
    return ret;
  }

  public ndBigVector InvMagSqrt() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_InvMagSqrt(swigCPtr), true);
    return ret;
  }

  public ndBigVector Normalize() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Normalize(swigCPtr), true);
    return ret;
  }

  public ndBigVector GetMax() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_GetMax__SWIG_0(swigCPtr), true);
    return ret;
  }

  public ndBigVector GetMax(ndBigVector data) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_GetMax__SWIG_1(swigCPtr, ndBigVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector GetMin(ndBigVector data) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_GetMin(swigCPtr, ndBigVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector GetInt() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_GetInt(swigCPtr), true);
    return ret;
  }

  public ndBigVector AndNot(ndBigVector data) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_AndNot(swigCPtr, ndBigVector.getCPtr(data)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector Select(ndBigVector data, ndBigVector mask) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Select(swigCPtr, ndBigVector.getCPtr(data), ndBigVector.getCPtr(mask)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector ShiftRight() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_ShiftRight(swigCPtr), true);
    return ret;
  }

  public ndBigVector ShiftTripleRight() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_ShiftTripleRight(swigCPtr), true);
    return ret;
  }

  public ndBigVector ShiftTripleLeft() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_ShiftTripleLeft(swigCPtr), true);
    return ret;
  }

  public ndBigVector ShiftRightLogical(SWIGTYPE_p_ndInt32 bits) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_ShiftRightLogical(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(bits)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndInt32 GetSignMask() {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndBigVector_GetSignMask(swigCPtr), true);
    return ret;
  }

  public ndBigVector Floor() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_Floor(swigCPtr), true);
    return ret;
  }

  public ndBigVector TestZero() {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_TestZero(swigCPtr), true);
    return ret;
  }

  public static void Transpose4x4(ndBigVector dst0, ndBigVector dst1, ndBigVector dst2, ndBigVector dst3, ndBigVector src0, ndBigVector src1, ndBigVector src2, ndBigVector src3) {
    newtonPINVOKE.ndBigVector_Transpose4x4(ndBigVector.getCPtr(dst0), ndBigVector.getCPtr(dst1), ndBigVector.getCPtr(dst2), ndBigVector.getCPtr(dst3), ndBigVector.getCPtr(src0), ndBigVector.getCPtr(src1), ndBigVector.getCPtr(src2), ndBigVector.getCPtr(src3));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBigVector DotProduct(ndBigVector A) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_DotProduct(swigCPtr, ndBigVector.getCPtr(A)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector CrossProduct(ndBigVector B) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_CrossProduct__SWIG_0(swigCPtr, ndBigVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndBigVector CrossProduct(ndBigVector A, ndBigVector B) {
    ndBigVector ret = new ndBigVector(newtonPINVOKE.ndBigVector_CrossProduct__SWIG_1(swigCPtr, ndBigVector.getCPtr(A), ndBigVector.getCPtr(B)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndFloat64 m_f {
    set {
      newtonPINVOKE.ndBigVector_m_f_set(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_f_get(swigCPtr);
      SWIGTYPE_p_ndFloat64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndFloat64(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt64 m_i {
    set {
      newtonPINVOKE.ndBigVector_m_i_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_i_get(swigCPtr);
      SWIGTYPE_p_ndInt64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt64(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p___m128d m_typeLow {
    set {
      newtonPINVOKE.ndBigVector_m_typeLow_set(swigCPtr, SWIGTYPE_p___m128d.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128d ret = new SWIGTYPE_p___m128d(newtonPINVOKE.ndBigVector_m_typeLow_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p___m128d m_typeHigh {
    set {
      newtonPINVOKE.ndBigVector_m_typeHigh_set(swigCPtr, SWIGTYPE_p___m128d.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128d ret = new SWIGTYPE_p___m128d(newtonPINVOKE.ndBigVector_m_typeHigh_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p___m128i m_typeIntLow {
    set {
      newtonPINVOKE.ndBigVector_m_typeIntLow_set(swigCPtr, SWIGTYPE_p___m128i.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128i ret = new SWIGTYPE_p___m128i(newtonPINVOKE.ndBigVector_m_typeIntLow_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p___m128i m_typeIntHigh {
    set {
      newtonPINVOKE.ndBigVector_m_typeIntHigh_set(swigCPtr, SWIGTYPE_p___m128i.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p___m128i ret = new SWIGTYPE_p___m128i(newtonPINVOKE.ndBigVector_m_typeIntHigh_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat64 m_x {
    set {
      newtonPINVOKE.ndBigVector_m_x_set(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_m_x_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat64 m_y {
    set {
      newtonPINVOKE.ndBigVector_m_y_set(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_m_y_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat64 m_z {
    set {
      newtonPINVOKE.ndBigVector_m_z_set(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_m_z_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat64 m_w {
    set {
      newtonPINVOKE.ndBigVector_m_w_set(swigCPtr, SWIGTYPE_p_ndFloat64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat64 ret = new SWIGTYPE_p_ndFloat64(newtonPINVOKE.ndBigVector_m_w_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt64 m_ix {
    set {
      newtonPINVOKE.ndBigVector_m_ix_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt64 ret = new SWIGTYPE_p_ndInt64(newtonPINVOKE.ndBigVector_m_ix_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt64 m_iy {
    set {
      newtonPINVOKE.ndBigVector_m_iy_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt64 ret = new SWIGTYPE_p_ndInt64(newtonPINVOKE.ndBigVector_m_iy_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt64 m_iz {
    set {
      newtonPINVOKE.ndBigVector_m_iz_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt64 ret = new SWIGTYPE_p_ndInt64(newtonPINVOKE.ndBigVector_m_iz_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt64 m_iw {
    set {
      newtonPINVOKE.ndBigVector_m_iw_set(swigCPtr, SWIGTYPE_p_ndInt64.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt64 ret = new SWIGTYPE_p_ndInt64(newtonPINVOKE.ndBigVector_m_iw_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ndBigVector m_zero {
    set {
      newtonPINVOKE.ndBigVector_m_zero_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_zero_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_one {
    set {
      newtonPINVOKE.ndBigVector_m_one_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_one_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_wOne {
    set {
      newtonPINVOKE.ndBigVector_m_wOne_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_wOne_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_two {
    set {
      newtonPINVOKE.ndBigVector_m_two_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_two_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_half {
    set {
      newtonPINVOKE.ndBigVector_m_half_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_half_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_three {
    set {
      newtonPINVOKE.ndBigVector_m_three_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_three_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_negOne {
    set {
      newtonPINVOKE.ndBigVector_m_negOne_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_negOne_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_xMask {
    set {
      newtonPINVOKE.ndBigVector_m_xMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_xMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_yMask {
    set {
      newtonPINVOKE.ndBigVector_m_yMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_yMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_zMask {
    set {
      newtonPINVOKE.ndBigVector_m_zMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_zMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_wMask {
    set {
      newtonPINVOKE.ndBigVector_m_wMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_wMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_xyzwMask {
    set {
      newtonPINVOKE.ndBigVector_m_xyzwMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_xyzwMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_epsilon {
    set {
      newtonPINVOKE.ndBigVector_m_epsilon_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_epsilon_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_signMask {
    set {
      newtonPINVOKE.ndBigVector_m_signMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_signMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

  public static ndBigVector m_triplexMask {
    set {
      newtonPINVOKE.ndBigVector_m_triplexMask_set(ndBigVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBigVector_m_triplexMask_get();
      ndBigVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBigVector(cPtr, false);
      return ret;
    } 
  }

}
