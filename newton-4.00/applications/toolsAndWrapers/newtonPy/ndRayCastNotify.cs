//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndRayCastNotify : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndRayCastNotify(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndRayCastNotify obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndRayCastNotify() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndRayCastNotify(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool TraceShape(ndVector globalOrigin, ndVector globalDestination, ndShapeInstance shapeInstance, ndMatrix shapeGlobal) {
    bool ret = newtonPINVOKE.ndRayCastNotify_TraceShape(swigCPtr, ndVector.getCPtr(globalOrigin), ndVector.getCPtr(globalDestination), ndShapeInstance.getCPtr(shapeInstance), ndMatrix.getCPtr(shapeGlobal));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_ndUnsigned32 OnRayPrecastAction(ndBody arg0, ndShapeInstance arg1) {
    SWIGTYPE_p_ndUnsigned32 ret = new SWIGTYPE_p_ndUnsigned32(newtonPINVOKE.ndRayCastNotify_OnRayPrecastAction(swigCPtr, ndBody.getCPtr(arg0), ndShapeInstance.getCPtr(arg1)), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 OnRayCastAction(SWIGTYPE_p_ndContactPoint contact, SWIGTYPE_p_ndFloat32 intersetParam) {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndRayCastNotify_OnRayCastAction(swigCPtr, SWIGTYPE_p_ndContactPoint.getCPtr(contact), SWIGTYPE_p_ndFloat32.getCPtr(intersetParam)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ndContactPoint m_contact {
    set {
      newtonPINVOKE.ndRayCastNotify_m_contact_set(swigCPtr, SWIGTYPE_p_ndContactPoint.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndRayCastNotify_m_contact_get(swigCPtr);
      SWIGTYPE_p_ndContactPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndContactPoint(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_param {
    set {
      newtonPINVOKE.ndRayCastNotify_m_param_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndRayCastNotify_m_param_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
