//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndHeighfieldInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndHeighfieldInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndHeighfieldInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndHeighfieldInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndHeighfieldInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ndInt32 m_width {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_width_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndHeighfieldInfo_m_width_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_height {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_height_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndHeighfieldInfo_m_height_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt32 m_gridsDiagonals {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_gridsDiagonals_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndHeighfieldInfo_m_gridsDiagonals_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_verticalScale {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_verticalScale_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndHeighfieldInfo_m_verticalScale_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_horizonalScale_x {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_horizonalScale_x_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndHeighfieldInfo_m_horizonalScale_x_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndFloat32 m_horizonalScale_z {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_horizonalScale_z_set(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(value));
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndHeighfieldInfo_m_horizonalScale_z_get(swigCPtr), true);
      if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ndReal m_elevation {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_elevation_set(swigCPtr, SWIGTYPE_p_ndReal.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndHeighfieldInfo_m_elevation_get(swigCPtr);
      SWIGTYPE_p_ndReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndReal(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ndInt8 m_atributes {
    set {
      newtonPINVOKE.ndHeighfieldInfo_m_atributes_set(swigCPtr, SWIGTYPE_p_ndInt8.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = newtonPINVOKE.ndHeighfieldInfo_m_atributes_get(swigCPtr);
      SWIGTYPE_p_ndInt8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndInt8(cPtr, false);
      return ret;
    } 
  }

  public ndHeighfieldInfo() : this(newtonPINVOKE.new_ndHeighfieldInfo(), true) {
  }

}
