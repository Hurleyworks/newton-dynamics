//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShapeConvex : ndShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndShapeConvex(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndShapeConvex_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShapeConvex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class ndConvexSimplexEdge : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ndConvexSimplexEdge(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndConvexSimplexEdge obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ndConvexSimplexEdge() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            newtonPINVOKE.delete_ndShapeConvex_ndConvexSimplexEdge(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public ndShapeConvex.ndConvexSimplexEdge m_twin {
      set {
        newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_twin_set(swigCPtr, ndShapeConvex.ndConvexSimplexEdge.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_twin_get(swigCPtr);
        ndShapeConvex.ndConvexSimplexEdge ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeConvex.ndConvexSimplexEdge(cPtr, false);
        return ret;
      } 
    }
  
    public ndShapeConvex.ndConvexSimplexEdge m_next {
      set {
        newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_next_set(swigCPtr, ndShapeConvex.ndConvexSimplexEdge.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_next_get(swigCPtr);
        ndShapeConvex.ndConvexSimplexEdge ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeConvex.ndConvexSimplexEdge(cPtr, false);
        return ret;
      } 
    }
  
    public ndShapeConvex.ndConvexSimplexEdge m_prev {
      set {
        newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_prev_set(swigCPtr, ndShapeConvex.ndConvexSimplexEdge.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_prev_get(swigCPtr);
        ndShapeConvex.ndConvexSimplexEdge ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeConvex.ndConvexSimplexEdge(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_ndInt32 m_vertex {
      set {
        newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_vertex_set(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(value));
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndShapeConvex_ndConvexSimplexEdge_m_vertex_get(swigCPtr), true);
        if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ndConvexSimplexEdge() : this(newtonPINVOKE.new_ndShapeConvex_ndConvexSimplexEdge(), true) {
    }
  
  }

}
