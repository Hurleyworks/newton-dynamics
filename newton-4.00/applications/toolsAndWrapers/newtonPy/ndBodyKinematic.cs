//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndBodyKinematic : ndBody {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ndBodyKinematic(global::System.IntPtr cPtr, bool cMemoryOwn) : base(newtonPINVOKE.ndBodyKinematic_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndBodyKinematic obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndBodyKinematic(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class ndContactMap : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ndContactMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndContactMap obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ndContactMap() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_ndContact FindContact(ndBody body0, ndBody body1) {
      global::System.IntPtr cPtr = newtonPINVOKE.ndBodyKinematic_ndContactMap_FindContact(swigCPtr, ndBody.getCPtr(body0), ndBody.getCPtr(body1));
      SWIGTYPE_p_ndContact ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndContact(cPtr, false);
      return ret;
    }
  
  }

  public ndBodyKinematic() : this(newtonPINVOKE.new_ndBodyKinematic__SWIG_0(), true) {
  }

  public ndBodyKinematic(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor desc) : this(newtonPINVOKE.new_ndBodyKinematic__SWIG_1(SWIGTYPE_p_ndLoadSaveBase__ndLoadDescriptor.getCPtr(desc)), true) {
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ndScene GetScene() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBodyKinematic_GetScene(swigCPtr);
    SWIGTYPE_p_ndScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndScene(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ndUnsigned32 GetIndex() {
    SWIGTYPE_p_ndUnsigned32 ret = new SWIGTYPE_p_ndUnsigned32(newtonPINVOKE.ndBodyKinematic_GetIndex(swigCPtr), true);
    return ret;
  }

  public override SWIGTYPE_p_ndFloat32 GetInvMass() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBodyKinematic_GetInvMass(swigCPtr), true);
    return ret;
  }

  public ndVector GetInvInertia() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetInvInertia(swigCPtr), true);
    return ret;
  }

  public ndVector GetMassMatrix() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetMassMatrix__SWIG_0(swigCPtr), false);
    return ret;
  }

  public ndMatrix GetInvInertiaMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndBodyKinematic_GetInvInertiaMatrix(swigCPtr), false);
    return ret;
  }

  public ndVector GetGyroAlpha() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetGyroAlpha(swigCPtr), true);
    return ret;
  }

  public ndVector GetGyroTorque() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetGyroTorque(swigCPtr), true);
    return ret;
  }

  public bool GetSleepState() {
    bool ret = newtonPINVOKE.ndBodyKinematic_GetSleepState(swigCPtr);
    return ret;
  }

  public void RestoreSleepState(bool state) {
    newtonPINVOKE.ndBodyKinematic_RestoreSleepState(swigCPtr, state);
  }

  public void SetSleepState(bool state) {
    newtonPINVOKE.ndBodyKinematic_SetSleepState(swigCPtr, state);
  }

  public bool GetAutoSleep() {
    bool ret = newtonPINVOKE.ndBodyKinematic_GetAutoSleep(swigCPtr);
    return ret;
  }

  public void SetAutoSleep(bool state) {
    newtonPINVOKE.ndBodyKinematic_SetAutoSleep(swigCPtr, state);
  }

  public SWIGTYPE_p_ndFloat32 GetMaxLinearStep() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBodyKinematic_GetMaxLinearStep(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetMaxAngularStep() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBodyKinematic_GetMaxAngularStep(swigCPtr), true);
    return ret;
  }

  public void SetDebugMaxLinearAndAngularIntegrationStep(SWIGTYPE_p_ndFloat32 angleInRadian, SWIGTYPE_p_ndFloat32 stepInUnitPerSeconds) {
    newtonPINVOKE.ndBodyKinematic_SetDebugMaxLinearAndAngularIntegrationStep(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(angleInRadian), SWIGTYPE_p_ndFloat32.getCPtr(stepInUnitPerSeconds));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_ndFloat32 GetLinearDamping() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBodyKinematic_GetLinearDamping(swigCPtr), true);
    return ret;
  }

  public virtual void SetLinearDamping(SWIGTYPE_p_ndFloat32 linearDamp) {
    newtonPINVOKE.ndBodyKinematic_SetLinearDamping(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(linearDamp));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ndVector GetCachedDamping() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetCachedDamping(swigCPtr), true);
    return ret;
  }

  public virtual ndVector GetAngularDamping() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetAngularDamping(swigCPtr), true);
    return ret;
  }

  public virtual void SetAngularDamping(ndVector angularDamp) {
    newtonPINVOKE.ndBodyKinematic_SetAngularDamping(swigCPtr, ndVector.getCPtr(angularDamp));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndShapeInstance GetCollisionShape() {
    ndShapeInstance ret = new ndShapeInstance(newtonPINVOKE.ndBodyKinematic_GetCollisionShape__SWIG_0(swigCPtr), false);
    return ret;
  }

  public virtual void SetCollisionShape(ndShapeInstance shapeInstance) {
    newtonPINVOKE.ndBodyKinematic_SetCollisionShape(swigCPtr, ndShapeInstance.getCPtr(shapeInstance));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool RayCast(ndRayCastNotify callback, SWIGTYPE_p_ndFastRay ray, SWIGTYPE_p_ndFloat32 maxT) {
    bool ret = newtonPINVOKE.ndBodyKinematic_RayCast(swigCPtr, ndRayCastNotify.getCPtr(callback), SWIGTYPE_p_ndFastRay.getCPtr(ray), SWIGTYPE_p_ndFloat32.getCPtr(maxT));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector CalculateLinearMomentum() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_CalculateLinearMomentum(swigCPtr), true);
    return ret;
  }

  public virtual ndVector CalculateAngularMomentum() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_CalculateAngularMomentum(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 TotalEnergy() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBodyKinematic_TotalEnergy(swigCPtr), true);
    return ret;
  }

  public ndMatrix CalculateInertiaMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndBodyKinematic_CalculateInertiaMatrix(swigCPtr), true);
    return ret;
  }

  public virtual ndMatrix CalculateInvInertiaMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndBodyKinematic_CalculateInvInertiaMatrix(swigCPtr), true);
    return ret;
  }

  public virtual void IntegrateVelocity(SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyKinematic_IntegrateVelocity(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Save(SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor desc) {
    newtonPINVOKE.ndBodyKinematic_Save(swigCPtr, SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor.getCPtr(desc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateInvInertiaMatrix() {
    newtonPINVOKE.ndBodyKinematic_UpdateInvInertiaMatrix(swigCPtr);
  }

  public void SetMassMatrix(ndVector massMatrix) {
    newtonPINVOKE.ndBodyKinematic_SetMassMatrix__SWIG_0(swigCPtr, ndVector.getCPtr(massMatrix));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMassMatrix(SWIGTYPE_p_ndFloat32 mass, ndShapeInstance shapeInstance) {
    newtonPINVOKE.ndBodyKinematic_SetMassMatrix__SWIG_1(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(mass), ndShapeInstance.getCPtr(shapeInstance));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMassMatrix(SWIGTYPE_p_ndFloat32 Ixx, SWIGTYPE_p_ndFloat32 Iyy, SWIGTYPE_p_ndFloat32 Izz, SWIGTYPE_p_ndFloat32 mass) {
    newtonPINVOKE.ndBodyKinematic_SetMassMatrix__SWIG_2(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(Ixx), SWIGTYPE_p_ndFloat32.getCPtr(Iyy), SWIGTYPE_p_ndFloat32.getCPtr(Izz), SWIGTYPE_p_ndFloat32.getCPtr(mass));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMassMatrix(SWIGTYPE_p_ndFloat32 mass, ndMatrix inertia) {
    newtonPINVOKE.ndBodyKinematic_SetMassMatrix__SWIG_3(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(mass), ndMatrix.getCPtr(inertia));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMassMatrix(SWIGTYPE_p_ndFloat32 Ixx, SWIGTYPE_p_ndFloat32 Iyy, SWIGTYPE_p_ndFloat32 Izz, SWIGTYPE_p_ndFloat32 mass) {
    newtonPINVOKE.ndBodyKinematic_GetMassMatrix__SWIG_1(swigCPtr, SWIGTYPE_p_ndFloat32.getCPtr(Ixx), SWIGTYPE_p_ndFloat32.getCPtr(Iyy), SWIGTYPE_p_ndFloat32.getCPtr(Izz), SWIGTYPE_p_ndFloat32.getCPtr(mass));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMatrixUpdateScene(ndMatrix matrix) {
    newtonPINVOKE.ndBodyKinematic_SetMatrixUpdateScene(swigCPtr, ndMatrix.getCPtr(matrix));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_ndContact FindContact(ndBody otherBody) {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBodyKinematic_FindContact(swigCPtr, ndBody.getCPtr(otherBody));
    SWIGTYPE_p_ndContact ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndContact(cPtr, false);
    return ret;
  }

  public override ndBodyKinematic GetAsBodyKinematic() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBodyKinematic_GetAsBodyKinematic(swigCPtr);
    ndBodyKinematic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyKinematic(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ndSkeletonContainer GetSkeleton() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBodyKinematic_GetSkeleton(swigCPtr);
    SWIGTYPE_p_ndSkeletonContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndSkeletonContainer(cPtr, false);
    return ret;
  }

  public void SetSkeleton(SWIGTYPE_p_ndSkeletonContainer skeleton) {
    newtonPINVOKE.ndBodyKinematic_SetSkeleton(swigCPtr, SWIGTYPE_p_ndSkeletonContainer.getCPtr(skeleton));
  }

  public virtual ndVector GetForce() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetForce(swigCPtr), true);
    return ret;
  }

  public virtual ndVector GetTorque() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetTorque(swigCPtr), true);
    return ret;
  }

  public virtual void SetForce(ndVector force) {
    newtonPINVOKE.ndBodyKinematic_SetForce(swigCPtr, ndVector.getCPtr(force));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetTorque(ndVector torque) {
    newtonPINVOKE.ndBodyKinematic_SetTorque(swigCPtr, ndVector.getCPtr(torque));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddImpulse(ndVector pointVeloc, ndVector pointPosit, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyKinematic_AddImpulse(swigCPtr, ndVector.getCPtr(pointVeloc), ndVector.getCPtr(pointPosit), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ApplyImpulsePair(ndVector linearImpulse, ndVector angularImpulse, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyKinematic_ApplyImpulsePair(swigCPtr, ndVector.getCPtr(linearImpulse), ndVector.getCPtr(angularImpulse), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ApplyImpulsesAtPoint(SWIGTYPE_p_ndInt32 count, ndVector impulseArray, ndVector pointArray, SWIGTYPE_p_ndFloat32 timestep) {
    newtonPINVOKE.ndBodyKinematic_ApplyImpulsesAtPoint(swigCPtr, SWIGTYPE_p_ndInt32.getCPtr(count), ndVector.getCPtr(impulseArray), ndVector.getCPtr(pointArray), SWIGTYPE_p_ndFloat32.getCPtr(timestep));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector GetAccel() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetAccel(swigCPtr), true);
    return ret;
  }

  public ndVector GetAlpha() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBodyKinematic_GetAlpha(swigCPtr), true);
    return ret;
  }

  public void SetAccel(ndVector accel) {
    newtonPINVOKE.ndBodyKinematic_SetAccel(swigCPtr, ndVector.getCPtr(accel));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAlpha(ndVector alpha) {
    newtonPINVOKE.ndBodyKinematic_SetAlpha(swigCPtr, ndVector.getCPtr(alpha));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBodyKinematic.ndContactMap GetContactMap() {
    ndBodyKinematic.ndContactMap ret = new ndBodyKinematic.ndContactMap(newtonPINVOKE.ndBodyKinematic_GetContactMap__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ndJointList GetJointList() {
    SWIGTYPE_p_ndJointList ret = new SWIGTYPE_p_ndJointList(newtonPINVOKE.ndBodyKinematic_GetJointList(swigCPtr), false);
    return ret;
  }

}
