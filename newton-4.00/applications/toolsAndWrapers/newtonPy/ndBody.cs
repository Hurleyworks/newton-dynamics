//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndBody : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndBody(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndBody() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual ndBody GetAsBody() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBody(swigCPtr);
    ndBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBody(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndBodyDynamic GetAsBodyDynamic() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodyDynamic(swigCPtr);
    SWIGTYPE_p_ndBodyDynamic ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndBodyDynamic(cPtr, false);
    return ret;
  }

  public virtual ndBodySentinel GetAsBodySentinel() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodySentinel(swigCPtr);
    ndBodySentinel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodySentinel(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndBodySphFluid GetAsBodySphFluid() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodySphFluid(swigCPtr);
    SWIGTYPE_p_ndBodySphFluid ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndBodySphFluid(cPtr, false);
    return ret;
  }

  public virtual ndBodyKinematic GetAsBodyKinematic() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodyKinematic(swigCPtr);
    ndBodyKinematic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyKinematic(cPtr, false);
    return ret;
  }

  public virtual ndBodyKinematic GetAsBodyPlayerCapsule() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodyPlayerCapsule(swigCPtr);
    ndBodyKinematic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyKinematic(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndBodyParticleSet GetAsBodyParticleSet() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodyParticleSet(swigCPtr);
    SWIGTYPE_p_ndBodyParticleSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndBodyParticleSet(cPtr, false);
    return ret;
  }

  public virtual ndBodyTriggerVolume GetAsBodyTriggerVolume() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetAsBodyTriggerVolume(swigCPtr);
    ndBodyTriggerVolume ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyTriggerVolume(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ndUnsigned32 GetId() {
    SWIGTYPE_p_ndUnsigned32 ret = new SWIGTYPE_p_ndUnsigned32(newtonPINVOKE.ndBody_GetId(swigCPtr), true);
    return ret;
  }

  public void GetAABB(ndVector p0, ndVector p1) {
    newtonPINVOKE.ndBody_GetAABB(swigCPtr, ndVector.getCPtr(p0), ndVector.getCPtr(p1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_ndFloat32 GetInvMass() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndBody_GetInvMass(swigCPtr), true);
    return ret;
  }

  public virtual bool RayCast(ndRayCastNotify callback, SWIGTYPE_p_ndFastRay ray, SWIGTYPE_p_ndFloat32 maxT) {
    bool ret = newtonPINVOKE.ndBody_RayCast(swigCPtr, ndRayCastNotify.getCPtr(callback), SWIGTYPE_p_ndFastRay.getCPtr(ray), SWIGTYPE_p_ndFloat32.getCPtr(maxT));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ndVector GetCentreOfMass() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetCentreOfMass(swigCPtr), false);
    return ret;
  }

  public virtual void SetCentreOfMass(ndVector com) {
    newtonPINVOKE.ndBody_SetCentreOfMass(swigCPtr, ndVector.getCPtr(com));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndBodyNotify GetNotifyCallback() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndBody_GetNotifyCallback(swigCPtr);
    ndBodyNotify ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndBodyNotify(cPtr, false);
    return ret;
  }

  public ndVector GetOmega() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetOmega(swigCPtr), true);
    return ret;
  }

  public ndMatrix GetMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndBody_GetMatrix(swigCPtr), true);
    return ret;
  }

  public ndVector GetVelocity() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetVelocity(swigCPtr), true);
    return ret;
  }

  public ndVector GetPosition() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetPosition(swigCPtr), true);
    return ret;
  }

  public ndQuaternion GetRotation() {
    ndQuaternion ret = new ndQuaternion(newtonPINVOKE.ndBody_GetRotation(swigCPtr), true);
    return ret;
  }

  public ndVector GetGlobalGetCentreOfMass() {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetGlobalGetCentreOfMass(swigCPtr), true);
    return ret;
  }

  public virtual void SetNotifyCallback(ndBodyNotify notify) {
    newtonPINVOKE.ndBody_SetNotifyCallback(swigCPtr, ndBodyNotify.getCPtr(notify));
  }

  public virtual void SetOmega(ndVector veloc) {
    newtonPINVOKE.ndBody_SetOmega(swigCPtr, ndVector.getCPtr(veloc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetVelocity(ndVector veloc) {
    newtonPINVOKE.ndBody_SetVelocity(swigCPtr, ndVector.getCPtr(veloc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMatrix(ndMatrix matrix) {
    newtonPINVOKE.ndBody_SetMatrix(swigCPtr, ndMatrix.getCPtr(matrix));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Save(SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor desc) {
    newtonPINVOKE.ndBody_Save(swigCPtr, SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor.getCPtr(desc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ndVector GetVelocityAtPoint(ndVector point) {
    ndVector ret = new ndVector(newtonPINVOKE.ndBody_GetVelocityAtPoint(swigCPtr, ndVector.getCPtr(point)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetOmegaNoSleep(ndVector veloc) {
    newtonPINVOKE.ndBody_SetOmegaNoSleep(swigCPtr, ndVector.getCPtr(veloc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVelocityNoSleep(ndVector veloc) {
    newtonPINVOKE.ndBody_SetVelocityNoSleep(swigCPtr, ndVector.getCPtr(veloc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMatrixNoSleep(ndMatrix matrix) {
    newtonPINVOKE.ndBody_SetMatrixNoSleep(swigCPtr, ndMatrix.getCPtr(matrix));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMatrixAndCentreOfMass(ndQuaternion rotation, ndVector globalcom) {
    newtonPINVOKE.ndBody_SetMatrixAndCentreOfMass(swigCPtr, ndQuaternion.getCPtr(rotation), ndVector.getCPtr(globalcom));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
