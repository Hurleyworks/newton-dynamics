//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndContactNotify : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndContactNotify(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndContactNotify obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndContactNotify() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          newtonPINVOKE.delete_ndContactNotify(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ndContactNotify() : this(newtonPINVOKE.new_ndContactNotify(), true) {
  }

  public virtual void OnBodyAdded(ndBodyKinematic arg0) {
    newtonPINVOKE.ndContactNotify_OnBodyAdded(swigCPtr, ndBodyKinematic.getCPtr(arg0));
  }

  public virtual void OnBodyRemoved(ndBodyKinematic arg0) {
    newtonPINVOKE.ndContactNotify_OnBodyRemoved(swigCPtr, ndBodyKinematic.getCPtr(arg0));
  }

  public virtual ndMaterial GetMaterial(SWIGTYPE_p_ndContact arg0, ndShapeInstance arg1, ndShapeInstance arg2) {
    global::System.IntPtr cPtr = newtonPINVOKE.ndContactNotify_GetMaterial(swigCPtr, SWIGTYPE_p_ndContact.getCPtr(arg0), ndShapeInstance.getCPtr(arg1), ndShapeInstance.getCPtr(arg2));
    ndMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndMaterial(cPtr, false);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool OnCompoundSubShapeOverlap(SWIGTYPE_p_ndContact arg0, SWIGTYPE_p_ndFloat32 arg1, ndShapeInstance arg2, ndShapeInstance arg3) {
    bool ret = newtonPINVOKE.ndContactNotify_OnCompoundSubShapeOverlap(swigCPtr, SWIGTYPE_p_ndContact.getCPtr(arg0), SWIGTYPE_p_ndFloat32.getCPtr(arg1), ndShapeInstance.getCPtr(arg2), ndShapeInstance.getCPtr(arg3));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool OnAabbOverlap(SWIGTYPE_p_ndContact arg0, SWIGTYPE_p_ndFloat32 arg1) {
    bool ret = newtonPINVOKE.ndContactNotify_OnAabbOverlap(swigCPtr, SWIGTYPE_p_ndContact.getCPtr(arg0), SWIGTYPE_p_ndFloat32.getCPtr(arg1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void OnContactCallback(SWIGTYPE_p_ndContact arg0, SWIGTYPE_p_ndFloat32 arg1) {
    newtonPINVOKE.ndContactNotify_OnContactCallback(swigCPtr, SWIGTYPE_p_ndContact.getCPtr(arg0), SWIGTYPE_p_ndFloat32.getCPtr(arg1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
