//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ndShape : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ndShape(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ndShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ndShape() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ndInt32 GetRefCount() {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndShape_GetRefCount(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ndInt32 Release() {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndShape_Release(swigCPtr), true);
    return ret;
  }

  public virtual ndShape AddRef() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_AddRef(swigCPtr);
    ndShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShape(cPtr, false);
    return ret;
  }

  public virtual ndShapeBox GetAsShapeBox() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeBox(swigCPtr);
    ndShapeBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeBox(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndShapeNull GetAsShapeNull() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeNull(swigCPtr);
    SWIGTYPE_p_ndShapeNull ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndShapeNull(cPtr, false);
    return ret;
  }

  public virtual ndShapeCone GetAsShapeCone() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeCone(swigCPtr);
    ndShapeCone ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeCone(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndShapePoint GetAsShapePoint() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapePoint(swigCPtr);
    SWIGTYPE_p_ndShapePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndShapePoint(cPtr, false);
    return ret;
  }

  public virtual ndShapeConvex GetAsShapeConvex() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeConvex(swigCPtr);
    ndShapeConvex ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeConvex(cPtr, false);
    return ret;
  }

  public virtual ndShapeSphere GetAsShapeSphere() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeSphere(swigCPtr);
    ndShapeSphere ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeSphere(cPtr, false);
    return ret;
  }

  public virtual ndShapeCapsule GetAsShapeCapsule() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeCapsule(swigCPtr);
    ndShapeCapsule ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeCapsule(cPtr, false);
    return ret;
  }

  public virtual ndShapeCylinder GetAsShapeCylinder() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeCylinder(swigCPtr);
    ndShapeCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeCylinder(cPtr, false);
    return ret;
  }

  public virtual ndShapeCompound GetAsShapeCompound() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeCompound(swigCPtr);
    ndShapeCompound ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeCompound(cPtr, false);
    return ret;
  }

  public virtual ndShapeStatic_bvh GetAsShapeStaticBVH() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeStaticBVH(swigCPtr);
    ndShapeStatic_bvh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeStatic_bvh(cPtr, false);
    return ret;
  }

  public virtual ndShapeStaticMesh GetAsShapeStaticMesh() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeStaticMesh(swigCPtr);
    ndShapeStaticMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeStaticMesh(cPtr, false);
    return ret;
  }

  public virtual ndShapeHeightfield GetAsShapeHeightfield() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeHeightfield(swigCPtr);
    ndShapeHeightfield ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeHeightfield(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndShapeConvexPolygon GetAsShapeAsConvexPolygon() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeAsConvexPolygon(swigCPtr);
    SWIGTYPE_p_ndShapeConvexPolygon ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndShapeConvexPolygon(cPtr, false);
    return ret;
  }

  public virtual ndShapeChamferCylinder GetAsShapeChamferCylinder() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeChamferCylinder(swigCPtr);
    ndShapeChamferCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ndShapeChamferCylinder(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndShapeStaticProceduralMesh GetAsShapeStaticProceduralMesh() {
    global::System.IntPtr cPtr = newtonPINVOKE.ndShape_GetAsShapeStaticProceduralMesh(swigCPtr);
    SWIGTYPE_p_ndShapeStaticProceduralMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ndShapeStaticProceduralMesh(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_ndInt32 GetConvexVertexCount() {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndShape_GetConvexVertexCount(swigCPtr), true);
    return ret;
  }

  public ndVector GetObbSize() {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_GetObbSize(swigCPtr), true);
    return ret;
  }

  public ndVector GetObbOrigin() {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_GetObbOrigin(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ndFloat32 GetUmbraClipSize() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_GetUmbraClipSize(swigCPtr), true);
    return ret;
  }

  public virtual void MassProperties() {
    newtonPINVOKE.ndShape_MassProperties(swigCPtr);
  }

  public virtual void DebugShape(ndMatrix matrix, ndShapeDebugNotify debugCallback) {
    newtonPINVOKE.ndShape_DebugShape(swigCPtr, ndMatrix.getCPtr(matrix), ndShapeDebugNotify.getCPtr(debugCallback));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ndShapeInfo GetShapeInfo() {
    ndShapeInfo ret = new ndShapeInfo(newtonPINVOKE.ndShape_GetShapeInfo(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 GetVolume() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_GetVolume(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 GetBoxMinRadius() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_GetBoxMinRadius(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 GetBoxMaxRadius() {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_GetBoxMaxRadius(swigCPtr), true);
    return ret;
  }

  public virtual void CalculateAabb(ndMatrix matrix, ndVector p0, ndVector p1) {
    newtonPINVOKE.ndShape_CalculateAabb(swigCPtr, ndMatrix.getCPtr(matrix), ndVector.getCPtr(p0), ndVector.getCPtr(p1));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ndVector SupportVertex(ndVector dir, SWIGTYPE_p_ndInt32 vertexIndex) {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_SupportVertex(swigCPtr, ndVector.getCPtr(dir), SWIGTYPE_p_ndInt32.getCPtr(vertexIndex)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ndVector SupportVertexSpecialProjectPoint(ndVector point, ndVector dir) {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_SupportVertexSpecialProjectPoint(swigCPtr, ndVector.getCPtr(point), ndVector.getCPtr(dir)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ndVector SupportVertexSpecial(ndVector dir, SWIGTYPE_p_ndFloat32 skinMargin, SWIGTYPE_p_ndInt32 vertexIndex) {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_SupportVertexSpecial(swigCPtr, ndVector.getCPtr(dir), SWIGTYPE_p_ndFloat32.getCPtr(skinMargin), SWIGTYPE_p_ndInt32.getCPtr(vertexIndex)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_ndInt32 CalculatePlaneIntersection(ndVector normal, ndVector point, ndVector contactsOut) {
    SWIGTYPE_p_ndInt32 ret = new SWIGTYPE_p_ndInt32(newtonPINVOKE.ndShape_CalculatePlaneIntersection(swigCPtr, ndVector.getCPtr(normal), ndVector.getCPtr(point), ndVector.getCPtr(contactsOut)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ndVector CalculateVolumeIntegral(ndMatrix globalMatrix, ndVector globalPlane, ndShapeInstance parentScale) {
    ndVector ret = new ndVector(newtonPINVOKE.ndShape_CalculateVolumeIntegral(swigCPtr, ndMatrix.getCPtr(globalMatrix), ndVector.getCPtr(globalPlane), ndShapeInstance.getCPtr(parentScale)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 RayCast(ndRayCastNotify callback, ndVector localP0, ndVector localP1, SWIGTYPE_p_ndFloat32 maxT, ndBody body, SWIGTYPE_p_ndContactPoint contactOut) {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_RayCast(swigCPtr, ndRayCastNotify.getCPtr(callback), ndVector.getCPtr(localP0), ndVector.getCPtr(localP1), SWIGTYPE_p_ndFloat32.getCPtr(maxT), ndBody.getCPtr(body), SWIGTYPE_p_ndContactPoint.getCPtr(contactOut)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ndMatrix CalculateInertiaAndCenterOfMass(ndMatrix alignMatrix, ndVector localScale, ndMatrix matrix) {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.ndShape_CalculateInertiaAndCenterOfMass(swigCPtr, ndMatrix.getCPtr(alignMatrix), ndVector.getCPtr(localScale), ndMatrix.getCPtr(matrix)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_ndFloat32 CalculateMassProperties(ndMatrix offset, ndVector inertia, ndVector crossInertia, ndVector centerOfMass) {
    SWIGTYPE_p_ndFloat32 ret = new SWIGTYPE_p_ndFloat32(newtonPINVOKE.ndShape_CalculateMassProperties(swigCPtr, ndMatrix.getCPtr(offset), ndVector.getCPtr(inertia), ndVector.getCPtr(crossInertia), ndVector.getCPtr(centerOfMass)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Save(SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor desc) {
    newtonPINVOKE.ndShape_Save(swigCPtr, SWIGTYPE_p_ndLoadSaveBase__ndSaveDescriptor.getCPtr(desc));
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
  }

}
