# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _newtonPy
else:
    import _newtonPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class dVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.dVector_swiginit(self, _newtonPy.new_dVector(*args))

    def GetX(self):
        return _newtonPy.dVector_GetX(self)

    def GetY(self):
        return _newtonPy.dVector_GetY(self)

    def GetZ(self):
        return _newtonPy.dVector_GetZ(self)

    def GetW(self):
        return _newtonPy.dVector_GetW(self)

    def SetX(self, x):
        return _newtonPy.dVector_SetX(self, x)

    def SetY(self, x):
        return _newtonPy.dVector_SetY(self, x)

    def SetZ(self, x):
        return _newtonPy.dVector_SetZ(self, x)

    def SetW(self, x):
        return _newtonPy.dVector_SetW(self, x)

    def GetScalar(self):
        return _newtonPy.dVector_GetScalar(self)

    def Store(self, dst):
        return _newtonPy.dVector_Store(self, dst)

    def BroadcastX(self):
        return _newtonPy.dVector_BroadcastX(self)

    def BroadcastY(self):
        return _newtonPy.dVector_BroadcastY(self)

    def BroadcastZ(self):
        return _newtonPy.dVector_BroadcastZ(self)

    def BroadcastW(self):
        return _newtonPy.dVector_BroadcastW(self)

    def Scale(self, s):
        return _newtonPy.dVector_Scale(self, s)

    def GetElement(self, *args):
        return _newtonPy.dVector_GetElement(self, *args)

    def __add__(self, A):
        return _newtonPy.dVector___add__(self, A)

    def __sub__(self, A):
        return _newtonPy.dVector___sub__(self, A)

    def __mul__(self, A):
        return _newtonPy.dVector___mul__(self, A)

    def __iadd__(self, A):
        return _newtonPy.dVector___iadd__(self, A)

    def __isub__(self, A):
        return _newtonPy.dVector___isub__(self, A)

    def __imul__(self, A):
        return _newtonPy.dVector___imul__(self, A)

    def DotProduct(self, A):
        return _newtonPy.dVector_DotProduct(self, A)

    def CrossProduct(self, *args):
        return _newtonPy.dVector_CrossProduct(self, *args)

    def Reciproc(self):
        return _newtonPy.dVector_Reciproc(self)

    def MulAdd(self, A, B):
        return _newtonPy.dVector_MulAdd(self, A, B)

    def MulSub(self, A, B):
        return _newtonPy.dVector_MulSub(self, A, B)

    def AddHorizontal(self):
        return _newtonPy.dVector_AddHorizontal(self)

    def Abs(self):
        return _newtonPy.dVector_Abs(self)

    def GetMax(self, *args):
        return _newtonPy.dVector_GetMax(self, *args)

    def GetMin(self, data):
        return _newtonPy.dVector_GetMin(self, data)

    def GetInt(self):
        return _newtonPy.dVector_GetInt(self)

    def TestZero(self):
        return _newtonPy.dVector_TestZero(self)

    def Floor(self):
        return _newtonPy.dVector_Floor(self)

    def Sqrt(self):
        return _newtonPy.dVector_Sqrt(self)

    def InvSqrt(self):
        return _newtonPy.dVector_InvSqrt(self)

    def InvMagSqrt(self):
        return _newtonPy.dVector_InvMagSqrt(self)

    def Normalize(self):
        return _newtonPy.dVector_Normalize(self)

    def __gt__(self, data):
        return _newtonPy.dVector___gt__(self, data)

    def __eq__(self, data):
        return _newtonPy.dVector___eq__(self, data)

    def __lt__(self, data):
        return _newtonPy.dVector___lt__(self, data)

    def __ge__(self, data):
        return _newtonPy.dVector___ge__(self, data)

    def __le__(self, data):
        return _newtonPy.dVector___le__(self, data)

    def __and__(self, data):
        return _newtonPy.dVector___and__(self, data)

    def __or__(self, data):
        return _newtonPy.dVector___or__(self, data)

    def __xor__(self, data):
        return _newtonPy.dVector___xor__(self, data)

    def AndNot(self, data):
        return _newtonPy.dVector_AndNot(self, data)

    def Select(self, data, mask):
        return _newtonPy.dVector_Select(self, data, mask)

    def GetSignMask(self):
        return _newtonPy.dVector_GetSignMask(self)

    def ShiftRight(self):
        return _newtonPy.dVector_ShiftRight(self)

    def ShiftTripleRight(self):
        return _newtonPy.dVector_ShiftTripleRight(self)

    def ShiftTripleLeft(self):
        return _newtonPy.dVector_ShiftTripleLeft(self)

    def ShiftRightLogical(self, bits):
        return _newtonPy.dVector_ShiftRightLogical(self, bits)

    @staticmethod
    def Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3):
        return _newtonPy.dVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3)

    def Trace(self, arg2):
        return _newtonPy.dVector_Trace(self, arg2)
    m_zero = property(_newtonPy.dVector_m_zero_get, _newtonPy.dVector_m_zero_set)
    m_one = property(_newtonPy.dVector_m_one_get, _newtonPy.dVector_m_one_set)
    m_wOne = property(_newtonPy.dVector_m_wOne_get, _newtonPy.dVector_m_wOne_set)
    m_two = property(_newtonPy.dVector_m_two_get, _newtonPy.dVector_m_two_set)
    m_half = property(_newtonPy.dVector_m_half_get, _newtonPy.dVector_m_half_set)
    m_three = property(_newtonPy.dVector_m_three_get, _newtonPy.dVector_m_three_set)
    m_negOne = property(_newtonPy.dVector_m_negOne_get, _newtonPy.dVector_m_negOne_set)
    m_xMask = property(_newtonPy.dVector_m_xMask_get, _newtonPy.dVector_m_xMask_set)
    m_yMask = property(_newtonPy.dVector_m_yMask_get, _newtonPy.dVector_m_yMask_set)
    m_zMask = property(_newtonPy.dVector_m_zMask_get, _newtonPy.dVector_m_zMask_set)
    m_wMask = property(_newtonPy.dVector_m_wMask_get, _newtonPy.dVector_m_wMask_set)
    m_xyzwMask = property(_newtonPy.dVector_m_xyzwMask_get, _newtonPy.dVector_m_xyzwMask_set)
    m_epsilon = property(_newtonPy.dVector_m_epsilon_get, _newtonPy.dVector_m_epsilon_set)
    m_signMask = property(_newtonPy.dVector_m_signMask_get, _newtonPy.dVector_m_signMask_set)
    m_triplexMask = property(_newtonPy.dVector_m_triplexMask_get, _newtonPy.dVector_m_triplexMask_set)
    __swig_destroy__ = _newtonPy.delete_dVector

# Register dVector in _newtonPy:
_newtonPy.dVector_swigregister(dVector)

def dVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3):
    return _newtonPy.dVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3)
cvar = _newtonPy.cvar

class dBigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.dBigVector_swiginit(self, _newtonPy.new_dBigVector(*args))

    def GetX(self):
        return _newtonPy.dBigVector_GetX(self)

    def GetY(self):
        return _newtonPy.dBigVector_GetY(self)

    def GetZ(self):
        return _newtonPy.dBigVector_GetZ(self)

    def GetW(self):
        return _newtonPy.dBigVector_GetW(self)

    def SetX(self, x):
        return _newtonPy.dBigVector_SetX(self, x)

    def SetY(self, x):
        return _newtonPy.dBigVector_SetY(self, x)

    def SetZ(self, x):
        return _newtonPy.dBigVector_SetZ(self, x)

    def SetW(self, x):
        return _newtonPy.dBigVector_SetW(self, x)

    def GetScalar(self):
        return _newtonPy.dBigVector_GetScalar(self)

    def GetElement(self, *args):
        return _newtonPy.dBigVector_GetElement(self, *args)

    def __add__(self, A):
        return _newtonPy.dBigVector___add__(self, A)

    def __sub__(self, A):
        return _newtonPy.dBigVector___sub__(self, A)

    def __mul__(self, A):
        return _newtonPy.dBigVector___mul__(self, A)

    def __iadd__(self, A):
        return _newtonPy.dBigVector___iadd__(self, A)

    def __isub__(self, A):
        return _newtonPy.dBigVector___isub__(self, A)

    def __imul__(self, A):
        return _newtonPy.dBigVector___imul__(self, A)

    def MulAdd(self, A, B):
        return _newtonPy.dBigVector_MulAdd(self, A, B)

    def MulSub(self, A, B):
        return _newtonPy.dBigVector_MulSub(self, A, B)

    def AddHorizontal(self):
        return _newtonPy.dBigVector_AddHorizontal(self)

    def BroadcastX(self):
        return _newtonPy.dBigVector_BroadcastX(self)

    def BroadcastY(self):
        return _newtonPy.dBigVector_BroadcastY(self)

    def BroadcastZ(self):
        return _newtonPy.dBigVector_BroadcastZ(self)

    def BroadcastW(self):
        return _newtonPy.dBigVector_BroadcastW(self)

    def Scale(self, s):
        return _newtonPy.dBigVector_Scale(self, s)

    def Abs(self):
        return _newtonPy.dBigVector_Abs(self)

    def Reciproc(self):
        return _newtonPy.dBigVector_Reciproc(self)

    def Sqrt(self):
        return _newtonPy.dBigVector_Sqrt(self)

    def InvSqrt(self):
        return _newtonPy.dBigVector_InvSqrt(self)

    def InvMagSqrt(self):
        return _newtonPy.dBigVector_InvMagSqrt(self)

    def Normalize(self):
        return _newtonPy.dBigVector_Normalize(self)

    def GetMax(self, *args):
        return _newtonPy.dBigVector_GetMax(self, *args)

    def GetMin(self, data):
        return _newtonPy.dBigVector_GetMin(self, data)

    def GetInt(self):
        return _newtonPy.dBigVector_GetInt(self)

    def __gt__(self, data):
        return _newtonPy.dBigVector___gt__(self, data)

    def __eq__(self, data):
        return _newtonPy.dBigVector___eq__(self, data)

    def __lt__(self, data):
        return _newtonPy.dBigVector___lt__(self, data)

    def __ge__(self, data):
        return _newtonPy.dBigVector___ge__(self, data)

    def __le__(self, data):
        return _newtonPy.dBigVector___le__(self, data)

    def __and__(self, data):
        return _newtonPy.dBigVector___and__(self, data)

    def __or__(self, data):
        return _newtonPy.dBigVector___or__(self, data)

    def __xor__(self, data):
        return _newtonPy.dBigVector___xor__(self, data)

    def AndNot(self, data):
        return _newtonPy.dBigVector_AndNot(self, data)

    def Select(self, data, mask):
        return _newtonPy.dBigVector_Select(self, data, mask)

    def ShiftRight(self):
        return _newtonPy.dBigVector_ShiftRight(self)

    def ShiftTripleRight(self):
        return _newtonPy.dBigVector_ShiftTripleRight(self)

    def ShiftTripleLeft(self):
        return _newtonPy.dBigVector_ShiftTripleLeft(self)

    def ShiftRightLogical(self, bits):
        return _newtonPy.dBigVector_ShiftRightLogical(self, bits)

    def GetSignMask(self):
        return _newtonPy.dBigVector_GetSignMask(self)

    def Floor(self):
        return _newtonPy.dBigVector_Floor(self)

    def TestZero(self):
        return _newtonPy.dBigVector_TestZero(self)

    @staticmethod
    def Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3):
        return _newtonPy.dBigVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3)

    def DotProduct(self, A):
        return _newtonPy.dBigVector_DotProduct(self, A)

    def CrossProduct(self, *args):
        return _newtonPy.dBigVector_CrossProduct(self, *args)
    m_zero = property(_newtonPy.dBigVector_m_zero_get, _newtonPy.dBigVector_m_zero_set)
    m_one = property(_newtonPy.dBigVector_m_one_get, _newtonPy.dBigVector_m_one_set)
    m_wOne = property(_newtonPy.dBigVector_m_wOne_get, _newtonPy.dBigVector_m_wOne_set)
    m_two = property(_newtonPy.dBigVector_m_two_get, _newtonPy.dBigVector_m_two_set)
    m_half = property(_newtonPy.dBigVector_m_half_get, _newtonPy.dBigVector_m_half_set)
    m_three = property(_newtonPy.dBigVector_m_three_get, _newtonPy.dBigVector_m_three_set)
    m_negOne = property(_newtonPy.dBigVector_m_negOne_get, _newtonPy.dBigVector_m_negOne_set)
    m_xMask = property(_newtonPy.dBigVector_m_xMask_get, _newtonPy.dBigVector_m_xMask_set)
    m_yMask = property(_newtonPy.dBigVector_m_yMask_get, _newtonPy.dBigVector_m_yMask_set)
    m_zMask = property(_newtonPy.dBigVector_m_zMask_get, _newtonPy.dBigVector_m_zMask_set)
    m_wMask = property(_newtonPy.dBigVector_m_wMask_get, _newtonPy.dBigVector_m_wMask_set)
    m_xyzwMask = property(_newtonPy.dBigVector_m_xyzwMask_get, _newtonPy.dBigVector_m_xyzwMask_set)
    m_epsilon = property(_newtonPy.dBigVector_m_epsilon_get, _newtonPy.dBigVector_m_epsilon_set)
    m_signMask = property(_newtonPy.dBigVector_m_signMask_get, _newtonPy.dBigVector_m_signMask_set)
    m_triplexMask = property(_newtonPy.dBigVector_m_triplexMask_get, _newtonPy.dBigVector_m_triplexMask_set)
    __swig_destroy__ = _newtonPy.delete_dBigVector

# Register dBigVector in _newtonPy:
_newtonPy.dBigVector_swigregister(dBigVector)

def dBigVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3):
    return _newtonPy.dBigVector_Transpose4x4(dst0, dst1, dst2, dst3, src0, src1, src2, src3)


def dGetZeroMatrix():
    return _newtonPy.dGetZeroMatrix()

def dGetIdentityMatrix():
    return _newtonPy.dGetIdentityMatrix()
class dMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _newtonPy.delete_dMatrix

    def GetElement(self, *args):
        return _newtonPy.dMatrix_GetElement(self, *args)

    def Inverse(self):
        return _newtonPy.dMatrix_Inverse(self)

    def Inverse4x4(self):
        return _newtonPy.dMatrix_Inverse4x4(self)

    def Transpose(self):
        return _newtonPy.dMatrix_Transpose(self)

    def Transpose4X4(self):
        return _newtonPy.dMatrix_Transpose4X4(self)

    def RotateVector(self, v):
        return _newtonPy.dMatrix_RotateVector(self, v)

    def UnrotateVector(self, v):
        return _newtonPy.dMatrix_UnrotateVector(self, v)

    def TransformVector(self, v):
        return _newtonPy.dMatrix_TransformVector(self, v)

    def UntransformVector(self, v):
        return _newtonPy.dMatrix_UntransformVector(self, v)

    def TransformPlane(self, localPlane):
        return _newtonPy.dMatrix_TransformPlane(self, localPlane)

    def UntransformPlane(self, globalPlane):
        return _newtonPy.dMatrix_UntransformPlane(self, globalPlane)

    def TransformVector1x4(self, v):
        return _newtonPy.dMatrix_TransformVector1x4(self, v)

    def SolveByGaussianElimination(self, v):
        return _newtonPy.dMatrix_SolveByGaussianElimination(self, v)

    def TransformBBox(self, p0local, p1local, p0, p1):
        return _newtonPy.dMatrix_TransformBBox(self, p0local, p1local, p0, p1)

    def CalcPitchYawRoll(self, euler0, euler1):
        return _newtonPy.dMatrix_CalcPitchYawRoll(self, euler0, euler1)

    def TransformTriplex(self, *args):
        return _newtonPy.dMatrix_TransformTriplex(self, *args)

    def TestIdentity(self):
        return _newtonPy.dMatrix_TestIdentity(self)

    def TestSymetric3x3(self):
        return _newtonPy.dMatrix_TestSymetric3x3(self)

    def TestOrthogonal(self, *args):
        return _newtonPy.dMatrix_TestOrthogonal(self, *args)

    def Multiply3X3(self, B):
        return _newtonPy.dMatrix_Multiply3X3(self, B)

    def __mul__(self, B):
        return _newtonPy.dMatrix___mul__(self, B)

    def EigenVectors(self):
        return _newtonPy.dMatrix_EigenVectors(self)

    def PolarDecomposition(self, transformMatrix, scale, stretchAxis):
        return _newtonPy.dMatrix_PolarDecomposition(self, transformMatrix, scale, stretchAxis)

    def __init__(self, *args):
        _newtonPy.dMatrix_swiginit(self, _newtonPy.new_dMatrix(*args))
    m_front = property(_newtonPy.dMatrix_m_front_get, _newtonPy.dMatrix_m_front_set)
    m_up = property(_newtonPy.dMatrix_m_up_get, _newtonPy.dMatrix_m_up_set)
    m_right = property(_newtonPy.dMatrix_m_right_get, _newtonPy.dMatrix_m_right_set)
    m_posit = property(_newtonPy.dMatrix_m_posit_get, _newtonPy.dMatrix_m_posit_set)

# Register dMatrix in _newtonPy:
_newtonPy.dMatrix_swigregister(dMatrix)


def dPitchMatrix(ang):
    return _newtonPy.dPitchMatrix(ang)

def dYawMatrix(ang):
    return _newtonPy.dYawMatrix(ang)

def dRollMatrix(ang):
    return _newtonPy.dRollMatrix(ang)
class dQuaternion(dVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.dQuaternion_swiginit(self, _newtonPy.new_dQuaternion(*args))

    def Normalize(self):
        return _newtonPy.dQuaternion_Normalize(self)

    def Scale(self, scale):
        return _newtonPy.dQuaternion_Scale(self, scale)

    def Inverse(self):
        return _newtonPy.dQuaternion_Inverse(self)

    def __add__(self, B):
        return _newtonPy.dQuaternion___add__(self, B)

    def __sub__(self, B):
        return _newtonPy.dQuaternion___sub__(self, B)

    def __mul__(self, B):
        return _newtonPy.dQuaternion___mul__(self, B)

    def Slerp(self, q1, t):
        return _newtonPy.dQuaternion_Slerp(self, q1, t)

    def CalcAverageOmega(self, q1, invdt):
        return _newtonPy.dQuaternion_CalcAverageOmega(self, q1, invdt)
    __swig_destroy__ = _newtonPy.delete_dQuaternion

# Register dQuaternion in _newtonPy:
_newtonPy.dQuaternion_swigregister(dQuaternion)

m_box = _newtonPy.m_box
m_cone = _newtonPy.m_cone
m_sphere = _newtonPy.m_sphere
m_capsule = _newtonPy.m_capsule
m_cylinder = _newtonPy.m_cylinder
m_chamferCylinder = _newtonPy.m_chamferCylinder
m_convexHull = _newtonPy.m_convexHull
m_compound = _newtonPy.m_compound
m_staticMesh = _newtonPy.m_staticMesh
m_heightField = _newtonPy.m_heightField
m_staticProceduralMesh = _newtonPy.m_staticProceduralMesh
m_nullCollision = _newtonPy.m_nullCollision
m_pointCollision = _newtonPy.m_pointCollision
m_polygonCollision = _newtonPy.m_polygonCollision
m_boundingBoxHierachy = _newtonPy.m_boundingBoxHierachy
class ndShapeMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newtonPy.ndShapeMaterial_swiginit(self, _newtonPy.new_ndShapeMaterial())
    m_userId = property(_newtonPy.ndShapeMaterial_m_userId_get, _newtonPy.ndShapeMaterial_m_userId_set)
    m_data = property(_newtonPy.ndShapeMaterial_m_data_get, _newtonPy.ndShapeMaterial_m_data_set)
    m_userParam = property(_newtonPy.ndShapeMaterial_m_userParam_get, _newtonPy.ndShapeMaterial_m_userParam_set)
    __swig_destroy__ = _newtonPy.delete_ndShapeMaterial

# Register ndShapeMaterial in _newtonPy:
_newtonPy.ndShapeMaterial_swigregister(ndShapeMaterial)

class ndBoxInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_newtonPy.ndBoxInfo_m_x_get, _newtonPy.ndBoxInfo_m_x_set)
    m_y = property(_newtonPy.ndBoxInfo_m_y_get, _newtonPy.ndBoxInfo_m_y_set)
    m_z = property(_newtonPy.ndBoxInfo_m_z_get, _newtonPy.ndBoxInfo_m_z_set)

    def __init__(self):
        _newtonPy.ndBoxInfo_swiginit(self, _newtonPy.new_ndBoxInfo())
    __swig_destroy__ = _newtonPy.delete_ndBoxInfo

# Register ndBoxInfo in _newtonPy:
_newtonPy.ndBoxInfo_swigregister(ndBoxInfo)

class ndPointInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newtonPy.ndPointInfo_m_noUsed_get, _newtonPy.ndPointInfo_m_noUsed_set)

    def __init__(self):
        _newtonPy.ndPointInfo_swiginit(self, _newtonPy.new_ndPointInfo())
    __swig_destroy__ = _newtonPy.delete_ndPointInfo

# Register ndPointInfo in _newtonPy:
_newtonPy.ndPointInfo_swigregister(ndPointInfo)

class ndSphereInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newtonPy.ndSphereInfo_m_radius_get, _newtonPy.ndSphereInfo_m_radius_set)

    def __init__(self):
        _newtonPy.ndSphereInfo_swiginit(self, _newtonPy.new_ndSphereInfo())
    __swig_destroy__ = _newtonPy.delete_ndSphereInfo

# Register ndSphereInfo in _newtonPy:
_newtonPy.ndSphereInfo_swigregister(ndSphereInfo)

class ndCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newtonPy.ndCylinderInfo_m_radio0_get, _newtonPy.ndCylinderInfo_m_radio0_set)
    m_radio1 = property(_newtonPy.ndCylinderInfo_m_radio1_get, _newtonPy.ndCylinderInfo_m_radio1_set)
    m_height = property(_newtonPy.ndCylinderInfo_m_height_get, _newtonPy.ndCylinderInfo_m_height_set)

    def __init__(self):
        _newtonPy.ndCylinderInfo_swiginit(self, _newtonPy.new_ndCylinderInfo())
    __swig_destroy__ = _newtonPy.delete_ndCylinderInfo

# Register ndCylinderInfo in _newtonPy:
_newtonPy.ndCylinderInfo_swigregister(ndCylinderInfo)

class ndCapsuleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newtonPy.ndCapsuleInfo_m_radio0_get, _newtonPy.ndCapsuleInfo_m_radio0_set)
    m_radio1 = property(_newtonPy.ndCapsuleInfo_m_radio1_get, _newtonPy.ndCapsuleInfo_m_radio1_set)
    m_height = property(_newtonPy.ndCapsuleInfo_m_height_get, _newtonPy.ndCapsuleInfo_m_height_set)

    def __init__(self):
        _newtonPy.ndCapsuleInfo_swiginit(self, _newtonPy.new_ndCapsuleInfo())
    __swig_destroy__ = _newtonPy.delete_ndCapsuleInfo

# Register ndCapsuleInfo in _newtonPy:
_newtonPy.ndCapsuleInfo_swigregister(ndCapsuleInfo)

class ndConeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newtonPy.ndConeInfo_m_radius_get, _newtonPy.ndConeInfo_m_radius_set)
    m_height = property(_newtonPy.ndConeInfo_m_height_get, _newtonPy.ndConeInfo_m_height_set)

    def __init__(self):
        _newtonPy.ndConeInfo_swiginit(self, _newtonPy.new_ndConeInfo())
    __swig_destroy__ = _newtonPy.delete_ndConeInfo

# Register ndConeInfo in _newtonPy:
_newtonPy.ndConeInfo_swigregister(ndConeInfo)

class ndChamferCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_r = property(_newtonPy.ndChamferCylinderInfo_m_r_get, _newtonPy.ndChamferCylinderInfo_m_r_set)
    m_height = property(_newtonPy.ndChamferCylinderInfo_m_height_get, _newtonPy.ndChamferCylinderInfo_m_height_set)

    def __init__(self):
        _newtonPy.ndChamferCylinderInfo_swiginit(self, _newtonPy.new_ndChamferCylinderInfo())
    __swig_destroy__ = _newtonPy.delete_ndChamferCylinderInfo

# Register ndChamferCylinderInfo in _newtonPy:
_newtonPy.ndChamferCylinderInfo_swigregister(ndChamferCylinderInfo)

class ndConvexHullInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newtonPy.ndConvexHullInfo_m_vertexCount_get, _newtonPy.ndConvexHullInfo_m_vertexCount_set)
    m_strideInBytes = property(_newtonPy.ndConvexHullInfo_m_strideInBytes_get, _newtonPy.ndConvexHullInfo_m_strideInBytes_set)
    m_faceCount = property(_newtonPy.ndConvexHullInfo_m_faceCount_get, _newtonPy.ndConvexHullInfo_m_faceCount_set)
    m_vertex = property(_newtonPy.ndConvexHullInfo_m_vertex_get, _newtonPy.ndConvexHullInfo_m_vertex_set)

    def __init__(self):
        _newtonPy.ndConvexHullInfo_swiginit(self, _newtonPy.new_ndConvexHullInfo())
    __swig_destroy__ = _newtonPy.delete_ndConvexHullInfo

# Register ndConvexHullInfo in _newtonPy:
_newtonPy.ndConvexHullInfo_swigregister(ndConvexHullInfo)

class ndCoumpoundInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newtonPy.ndCoumpoundInfo_m_noUsed_get, _newtonPy.ndCoumpoundInfo_m_noUsed_set)

    def __init__(self):
        _newtonPy.ndCoumpoundInfo_swiginit(self, _newtonPy.new_ndCoumpoundInfo())
    __swig_destroy__ = _newtonPy.delete_ndCoumpoundInfo

# Register ndCoumpoundInfo in _newtonPy:
_newtonPy.ndCoumpoundInfo_swigregister(ndCoumpoundInfo)

class ndProceduralInfoInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newtonPy.ndProceduralInfoInfo_m_noUsed_get, _newtonPy.ndProceduralInfoInfo_m_noUsed_set)

    def __init__(self):
        _newtonPy.ndProceduralInfoInfo_swiginit(self, _newtonPy.new_ndProceduralInfoInfo())
    __swig_destroy__ = _newtonPy.delete_ndProceduralInfoInfo

# Register ndProceduralInfoInfo in _newtonPy:
_newtonPy.ndProceduralInfoInfo_swigregister(ndProceduralInfoInfo)

class ndCollisionBvhInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newtonPy.ndCollisionBvhInfo_m_vertexCount_get, _newtonPy.ndCollisionBvhInfo_m_vertexCount_set)
    m_indexCount = property(_newtonPy.ndCollisionBvhInfo_m_indexCount_get, _newtonPy.ndCollisionBvhInfo_m_indexCount_set)

    def __init__(self):
        _newtonPy.ndCollisionBvhInfo_swiginit(self, _newtonPy.new_ndCollisionBvhInfo())
    __swig_destroy__ = _newtonPy.delete_ndCollisionBvhInfo

# Register ndCollisionBvhInfo in _newtonPy:
_newtonPy.ndCollisionBvhInfo_swigregister(ndCollisionBvhInfo)

class ndHeighfieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_width = property(_newtonPy.ndHeighfieldInfo_m_width_get, _newtonPy.ndHeighfieldInfo_m_width_set)
    m_height = property(_newtonPy.ndHeighfieldInfo_m_height_get, _newtonPy.ndHeighfieldInfo_m_height_set)
    m_gridsDiagonals = property(_newtonPy.ndHeighfieldInfo_m_gridsDiagonals_get, _newtonPy.ndHeighfieldInfo_m_gridsDiagonals_set)
    m_verticalScale = property(_newtonPy.ndHeighfieldInfo_m_verticalScale_get, _newtonPy.ndHeighfieldInfo_m_verticalScale_set)
    m_horizonalScale_x = property(_newtonPy.ndHeighfieldInfo_m_horizonalScale_x_get, _newtonPy.ndHeighfieldInfo_m_horizonalScale_x_set)
    m_horizonalScale_z = property(_newtonPy.ndHeighfieldInfo_m_horizonalScale_z_get, _newtonPy.ndHeighfieldInfo_m_horizonalScale_z_set)
    m_elevation = property(_newtonPy.ndHeighfieldInfo_m_elevation_get, _newtonPy.ndHeighfieldInfo_m_elevation_set)
    m_atributes = property(_newtonPy.ndHeighfieldInfo_m_atributes_get, _newtonPy.ndHeighfieldInfo_m_atributes_set)

    def __init__(self):
        _newtonPy.ndHeighfieldInfo_swiginit(self, _newtonPy.new_ndHeighfieldInfo())
    __swig_destroy__ = _newtonPy.delete_ndHeighfieldInfo

# Register ndHeighfieldInfo in _newtonPy:
_newtonPy.ndHeighfieldInfo_swigregister(ndHeighfieldInfo)

class ndShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_offsetMatrix = property(_newtonPy.ndShapeInfo_m_offsetMatrix_get, _newtonPy.ndShapeInfo_m_offsetMatrix_set)
    m_scale = property(_newtonPy.ndShapeInfo_m_scale_get, _newtonPy.ndShapeInfo_m_scale_set)
    m_shapeMaterial = property(_newtonPy.ndShapeInfo_m_shapeMaterial_get, _newtonPy.ndShapeInfo_m_shapeMaterial_set)
    m_collisionType = property(_newtonPy.ndShapeInfo_m_collisionType_get, _newtonPy.ndShapeInfo_m_collisionType_set)

    def __init__(self):
        _newtonPy.ndShapeInfo_swiginit(self, _newtonPy.new_ndShapeInfo())
    __swig_destroy__ = _newtonPy.delete_ndShapeInfo

# Register ndShapeInfo in _newtonPy:
_newtonPy.ndShapeInfo_swigregister(ndShapeInfo)

class ndShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRefCount(self):
        return _newtonPy.ndShape_GetRefCount(self)

    def Release(self):
        return _newtonPy.ndShape_Release(self)

    def AddRef(self):
        return _newtonPy.ndShape_AddRef(self)

    def GetAsShapeBox(self):
        return _newtonPy.ndShape_GetAsShapeBox(self)

    def GetAsShapeNull(self):
        return _newtonPy.ndShape_GetAsShapeNull(self)

    def GetAsShapeCone(self):
        return _newtonPy.ndShape_GetAsShapeCone(self)

    def GetAsShapePoint(self):
        return _newtonPy.ndShape_GetAsShapePoint(self)

    def GetAsShapeConvex(self):
        return _newtonPy.ndShape_GetAsShapeConvex(self)

    def GetAsShapeSphere(self):
        return _newtonPy.ndShape_GetAsShapeSphere(self)

    def GetAsShapeCapsule(self):
        return _newtonPy.ndShape_GetAsShapeCapsule(self)

    def GetAsShapeCylinder(self):
        return _newtonPy.ndShape_GetAsShapeCylinder(self)

    def GetAsShapeCompound(self):
        return _newtonPy.ndShape_GetAsShapeCompound(self)

    def GetAsShapeStaticBVH(self):
        return _newtonPy.ndShape_GetAsShapeStaticBVH(self)

    def GetAsShapeStaticMesh(self):
        return _newtonPy.ndShape_GetAsShapeStaticMesh(self)

    def GetAsShapeHeightfield(self):
        return _newtonPy.ndShape_GetAsShapeHeightfield(self)

    def GetAsShapeAsConvexPolygon(self):
        return _newtonPy.ndShape_GetAsShapeAsConvexPolygon(self)

    def GetAsShapeChamferCylinder(self):
        return _newtonPy.ndShape_GetAsShapeChamferCylinder(self)

    def GetAsShapeStaticProceduralMesh(self):
        return _newtonPy.ndShape_GetAsShapeStaticProceduralMesh(self)

    def GetConvexVertexCount(self):
        return _newtonPy.ndShape_GetConvexVertexCount(self)

    def GetObbSize(self):
        return _newtonPy.ndShape_GetObbSize(self)

    def GetObbOrigin(self):
        return _newtonPy.ndShape_GetObbOrigin(self)

    def GetUmbraClipSize(self):
        return _newtonPy.ndShape_GetUmbraClipSize(self)

    def MassProperties(self):
        return _newtonPy.ndShape_MassProperties(self)

    def DebugShape(self, matrix, debugCallback):
        return _newtonPy.ndShape_DebugShape(self, matrix, debugCallback)

    def GetShapeInfo(self):
        return _newtonPy.ndShape_GetShapeInfo(self)

    def GetVolume(self):
        return _newtonPy.ndShape_GetVolume(self)

    def GetBoxMinRadius(self):
        return _newtonPy.ndShape_GetBoxMinRadius(self)

    def GetBoxMaxRadius(self):
        return _newtonPy.ndShape_GetBoxMaxRadius(self)

    def CalculateAabb(self, matrix, p0, p1):
        return _newtonPy.ndShape_CalculateAabb(self, matrix, p0, p1)

    def SupportVertex(self, dir, vertexIndex):
        return _newtonPy.ndShape_SupportVertex(self, dir, vertexIndex)

    def SupportVertexSpecialProjectPoint(self, point, dir):
        return _newtonPy.ndShape_SupportVertexSpecialProjectPoint(self, point, dir)

    def SupportVertexSpecial(self, dir, skinSkinThickness, vertexIndex):
        return _newtonPy.ndShape_SupportVertexSpecial(self, dir, skinSkinThickness, vertexIndex)

    def CalculatePlaneIntersection(self, normal, point, contactsOut):
        return _newtonPy.ndShape_CalculatePlaneIntersection(self, normal, point, contactsOut)

    def CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale):
        return _newtonPy.ndShape_CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale)

    def RayCast(self, callback, localP0, localP1, maxT, body, contactOut):
        return _newtonPy.ndShape_RayCast(self, callback, localP0, localP1, maxT, body, contactOut)

    def CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix):
        return _newtonPy.ndShape_CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix)

    def CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass):
        return _newtonPy.ndShape_CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass)

    def Save(self, desc):
        return _newtonPy.ndShape_Save(self, desc)

# Register ndShape in _newtonPy:
_newtonPy.ndShape_swigregister(ndShape)

class ndShapeBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeBox_swiginit(self, _newtonPy.new_ndShapeBox(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeBox

    def GetAsShapeBox(self):
        return _newtonPy.ndShapeBox_GetAsShapeBox(self)

# Register ndShapeBox in _newtonPy:
_newtonPy.ndShapeBox_swigregister(ndShapeBox)

D_CONE_SEGMENTS = _newtonPy.D_CONE_SEGMENTS
class ndShapeCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeCone_swiginit(self, _newtonPy.new_ndShapeCone(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeCone

    def GetAsShapeCone(self):
        return _newtonPy.ndShapeCone_GetAsShapeCone(self)

# Register ndShapeCone in _newtonPy:
_newtonPy.ndShapeCone_swigregister(ndShapeCone)

D_CLIP_MAX_COUNT = _newtonPy.D_CLIP_MAX_COUNT
D_CLIP_MAX_POINT_COUNT = _newtonPy.D_CLIP_MAX_POINT_COUNT
class ndShapeConvex(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register ndShapeConvex in _newtonPy:
_newtonPy.ndShapeConvex_swigregister(ndShapeConvex)

D_SPHERE_VERTEX_COUNT = _newtonPy.D_SPHERE_VERTEX_COUNT
class ndShapeSphere(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeSphere_swiginit(self, _newtonPy.new_ndShapeSphere(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeSphere

    def GetAsShapeSphere(self):
        return _newtonPy.ndShapeSphere_GetAsShapeSphere(self)

# Register ndShapeSphere in _newtonPy:
_newtonPy.ndShapeSphere_swigregister(ndShapeSphere)

class ndShapeCapsule(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeCapsule_swiginit(self, _newtonPy.new_ndShapeCapsule(*args))

    def GetAsShapeCapsule(self):
        return _newtonPy.ndShapeCapsule_GetAsShapeCapsule(self)
    __swig_destroy__ = _newtonPy.delete_ndShapeCapsule

# Register ndShapeCapsule in _newtonPy:
_newtonPy.ndShapeCapsule_swigregister(ndShapeCapsule)

D_COMPOUND_STACK_DEPTH = _newtonPy.D_COMPOUND_STACK_DEPTH
class ndShapeCompound(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_leaf = _newtonPy.ndShapeCompound_m_leaf
    m_node = _newtonPy.ndShapeCompound_m_node

    def __init__(self, *args):
        _newtonPy.ndShapeCompound_swiginit(self, _newtonPy.new_ndShapeCompound(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeCompound

    def SetOwner(self, myInstance):
        return _newtonPy.ndShapeCompound_SetOwner(self, myInstance)

    def GetTree(self):
        return _newtonPy.ndShapeCompound_GetTree(self)

    def BeginAddRemove(self):
        return _newtonPy.ndShapeCompound_BeginAddRemove(self)

    def AddCollision(self, part):
        return _newtonPy.ndShapeCompound_AddCollision(self, part)

    def EndAddRemove(self):
        return _newtonPy.ndShapeCompound_EndAddRemove(self)

# Register ndShapeCompound in _newtonPy:
_newtonPy.ndShapeCompound_swigregister(ndShapeCompound)

D_TAPED_CYLINDER_SEGMENTS = _newtonPy.D_TAPED_CYLINDER_SEGMENTS
class ndShapeCylinder(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeCylinder_swiginit(self, _newtonPy.new_ndShapeCylinder(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeCylinder

    def GetAsShapeCylinder(self):
        return _newtonPy.ndShapeCylinder_GetAsShapeCylinder(self)

# Register ndShapeCylinder in _newtonPy:
_newtonPy.ndShapeCylinder_swigregister(ndShapeCylinder)

class ndShapeStatic_bvh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeStatic_bvh_swiginit(self, _newtonPy.new_ndShapeStatic_bvh(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeStatic_bvh

# Register ndShapeStatic_bvh in _newtonPy:
_newtonPy.ndShapeStatic_bvh_swigregister(ndShapeStatic_bvh)

D_MAX_COLLIDING_FACES = _newtonPy.D_MAX_COLLIDING_FACES
D_MAX_COLLIDING_INDICES = _newtonPy.D_MAX_COLLIDING_INDICES
class ndPolygonMeshDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndPolygonMeshDesc_swiginit(self, _newtonPy.new_ndPolygonMeshDesc(*args))

    def SortFaceArray(self):
        return _newtonPy.ndPolygonMeshDesc_SortFaceArray(self)

    def GetSeparetionDistance(self):
        return _newtonPy.ndPolygonMeshDesc_GetSeparetionDistance(self)

    def SetDistanceTravel(self, distanceInGlobalSpace):
        return _newtonPy.ndPolygonMeshDesc_SetDistanceTravel(self, distanceInGlobalSpace)

    def GetFaceIndexCount(self, indexCount):
        return _newtonPy.ndPolygonMeshDesc_GetFaceIndexCount(self, indexCount)

    def GetAdjacentFaceEdgeNormalArray(self, faceIndexArray, indexCount):
        return _newtonPy.ndPolygonMeshDesc_GetAdjacentFaceEdgeNormalArray(self, faceIndexArray, indexCount)

    def GetNormalIndex(self, faceIndexArray, indexCount):
        return _newtonPy.ndPolygonMeshDesc_GetNormalIndex(self, faceIndexArray, indexCount)

    def GetFaceId(self, faceIndexArray, indexCount):
        return _newtonPy.ndPolygonMeshDesc_GetFaceId(self, faceIndexArray, indexCount)

    def GetFaceSize(self, faceIndexArray, indexCount):
        return _newtonPy.ndPolygonMeshDesc_GetFaceSize(self, faceIndexArray, indexCount)
    m_boxDistanceTravelInMeshSpace = property(_newtonPy.ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_get, _newtonPy.ndPolygonMeshDesc_m_boxDistanceTravelInMeshSpace_set)
    m_faceCount = property(_newtonPy.ndPolygonMeshDesc_m_faceCount_get, _newtonPy.ndPolygonMeshDesc_m_faceCount_set)
    m_vertexStrideInBytes = property(_newtonPy.ndPolygonMeshDesc_m_vertexStrideInBytes_get, _newtonPy.ndPolygonMeshDesc_m_vertexStrideInBytes_set)
    m_skinThickness = property(_newtonPy.ndPolygonMeshDesc_m_skinThickness_get, _newtonPy.ndPolygonMeshDesc_m_skinThickness_set)
    m_userData = property(_newtonPy.ndPolygonMeshDesc_m_userData_get, _newtonPy.ndPolygonMeshDesc_m_userData_set)
    m_convexInstance = property(_newtonPy.ndPolygonMeshDesc_m_convexInstance_get, _newtonPy.ndPolygonMeshDesc_m_convexInstance_set)
    m_polySoupInstance = property(_newtonPy.ndPolygonMeshDesc_m_polySoupInstance_get, _newtonPy.ndPolygonMeshDesc_m_polySoupInstance_set)
    m_vertex = property(_newtonPy.ndPolygonMeshDesc_m_vertex_get, _newtonPy.ndPolygonMeshDesc_m_vertex_set)
    m_faceIndexCount = property(_newtonPy.ndPolygonMeshDesc_m_faceIndexCount_get, _newtonPy.ndPolygonMeshDesc_m_faceIndexCount_set)
    m_faceVertexIndex = property(_newtonPy.ndPolygonMeshDesc_m_faceVertexIndex_get, _newtonPy.ndPolygonMeshDesc_m_faceVertexIndex_set)
    m_faceIndexStart = property(_newtonPy.ndPolygonMeshDesc_m_faceIndexStart_get, _newtonPy.ndPolygonMeshDesc_m_faceIndexStart_set)
    m_hitDistance = property(_newtonPy.ndPolygonMeshDesc_m_hitDistance_get, _newtonPy.ndPolygonMeshDesc_m_hitDistance_set)
    m_me = property(_newtonPy.ndPolygonMeshDesc_m_me_get, _newtonPy.ndPolygonMeshDesc_m_me_set)
    m_globalIndexCount = property(_newtonPy.ndPolygonMeshDesc_m_globalIndexCount_get, _newtonPy.ndPolygonMeshDesc_m_globalIndexCount_set)
    m_maxT = property(_newtonPy.ndPolygonMeshDesc_m_maxT_get, _newtonPy.ndPolygonMeshDesc_m_maxT_set)
    m_doContinuesCollisionTest = property(_newtonPy.ndPolygonMeshDesc_m_doContinuesCollisionTest_get, _newtonPy.ndPolygonMeshDesc_m_doContinuesCollisionTest_set)
    m_globalFaceVertexIndex = property(_newtonPy.ndPolygonMeshDesc_m_globalFaceVertexIndex_get, _newtonPy.ndPolygonMeshDesc_m_globalFaceVertexIndex_set)
    m_meshData = property(_newtonPy.ndPolygonMeshDesc_m_meshData_get, _newtonPy.ndPolygonMeshDesc_m_meshData_set)
    __swig_destroy__ = _newtonPy.delete_ndPolygonMeshDesc

# Register ndPolygonMeshDesc in _newtonPy:
_newtonPy.ndPolygonMeshDesc_swigregister(ndPolygonMeshDesc)

class ndShapeStaticMesh(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeStaticMesh_swiginit(self, _newtonPy.new_ndShapeStaticMesh(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeStaticMesh

    def GetCollidingFaces(self, data):
        return _newtonPy.ndShapeStaticMesh_GetCollidingFaces(self, data)

# Register ndShapeStaticMesh in _newtonPy:
_newtonPy.ndShapeStaticMesh_swigregister(ndShapeStaticMesh)

class ndShapeConvexHull(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeConvexHull_swiginit(self, _newtonPy.new_ndShapeConvexHull(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeConvexHull

# Register ndShapeConvexHull in _newtonPy:
_newtonPy.ndShapeConvexHull_swigregister(ndShapeConvexHull)

class ndShapeHeightfield(ndShapeStaticMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_normalDiagonals = _newtonPy.ndShapeHeightfield_m_normalDiagonals
    m_invertedDiagonals = _newtonPy.ndShapeHeightfield_m_invertedDiagonals

    def __init__(self, *args):
        _newtonPy.ndShapeHeightfield_swiginit(self, _newtonPy.new_ndShapeHeightfield(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeHeightfield

    def GetElevationMap(self, *args):
        return _newtonPy.ndShapeHeightfield_GetElevationMap(self, *args)

    def UpdateElevationMapAabb(self):
        return _newtonPy.ndShapeHeightfield_UpdateElevationMapAabb(self)

    def GetLocalAabb(self, p0, p1, boxP0, boxP1):
        return _newtonPy.ndShapeHeightfield_GetLocalAabb(self, p0, p1, boxP0, boxP1)

# Register ndShapeHeightfield in _newtonPy:
_newtonPy.ndShapeHeightfield_swigregister(ndShapeHeightfield)

DG_CHAMFERCYLINDER_SLICES = _newtonPy.DG_CHAMFERCYLINDER_SLICES
DG_CHAMFERCYLINDER_BRAKES = _newtonPy.DG_CHAMFERCYLINDER_BRAKES
DG_MAX_CHAMFERCYLINDER_DIR_COUNT = _newtonPy.DG_MAX_CHAMFERCYLINDER_DIR_COUNT
class ndShapeChamferCylinder(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndShapeChamferCylinder_swiginit(self, _newtonPy.new_ndShapeChamferCylinder(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeChamferCylinder

    def GetAsShapeChamferCylinder(self):
        return _newtonPy.ndShapeChamferCylinder_GetAsShapeChamferCylinder(self)

# Register ndShapeChamferCylinder in _newtonPy:
_newtonPy.ndShapeChamferCylinder_swigregister(ndShapeChamferCylinder)

class ndShapeDebugCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    m_shared = _newtonPy.ndShapeDebugCallback_m_shared
    m_open = _newtonPy.ndShapeDebugCallback_m_open
    __swig_destroy__ = _newtonPy.delete_ndShapeDebugCallback

    def DrawPolygon(self, vertexCount, faceArray, edgeType):
        return _newtonPy.ndShapeDebugCallback_DrawPolygon(self, vertexCount, faceArray, edgeType)
    m_instance = property(_newtonPy.ndShapeDebugCallback_m_instance_get, _newtonPy.ndShapeDebugCallback_m_instance_set)

# Register ndShapeDebugCallback in _newtonPy:
_newtonPy.ndShapeDebugCallback_swigregister(ndShapeDebugCallback)

class ndShapeInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_unit = _newtonPy.ndShapeInstance_m_unit
    m_uniform = _newtonPy.ndShapeInstance_m_uniform
    m_nonUniform = _newtonPy.ndShapeInstance_m_nonUniform
    m_global = _newtonPy.ndShapeInstance_m_global

    def __init__(self, *args):
        _newtonPy.ndShapeInstance_swiginit(self, _newtonPy.new_ndShapeInstance(*args))
    __swig_destroy__ = _newtonPy.delete_ndShapeInstance

    def Assigment(self, src):
        return _newtonPy.ndShapeInstance_Assigment(self, src)

    def CalculateInertia(self):
        return _newtonPy.ndShapeInstance_CalculateInertia(self)

    def CalculateObb(self, origin, size):
        return _newtonPy.ndShapeInstance_CalculateObb(self, origin, size)

    def CalculateAabb(self, matrix, minP, maxP):
        return _newtonPy.ndShapeInstance_CalculateAabb(self, matrix, minP, maxP)

    def DebugShape(self, matrix, debugCallback):
        return _newtonPy.ndShapeInstance_DebugShape(self, matrix, debugCallback)

    def RayCast(self, callback, localP0, localP1, body, contactOut):
        return _newtonPy.ndShapeInstance_RayCast(self, callback, localP0, localP1, body, contactOut)

    def GetShapeInfo(self):
        return _newtonPy.ndShapeInstance_GetShapeInfo(self)

    def Save(self, desc):
        return _newtonPy.ndShapeInstance_Save(self, desc)

    def CalculateBuoyancyCenterOfPresure(self, com, matrix, fluidPlane):
        return _newtonPy.ndShapeInstance_CalculateBuoyancyCenterOfPresure(self, com, matrix, fluidPlane)

    @staticmethod
    def GetBoxPadding():
        return _newtonPy.ndShapeInstance_GetBoxPadding()

    def GetShape(self, *args):
        return _newtonPy.ndShapeInstance_GetShape(self, *args)

    def SupportVertex(self, dir):
        return _newtonPy.ndShapeInstance_SupportVertex(self, dir)

    def GetScaledTransform(self, matrix):
        return _newtonPy.ndShapeInstance_GetScaledTransform(self, matrix)

    def SupportVertexSpecial(self, dir, vertexIndex):
        return _newtonPy.ndShapeInstance_SupportVertexSpecial(self, dir, vertexIndex)

    def SupportVertexSpecialProjectPoint(self, point, dir):
        return _newtonPy.ndShapeInstance_SupportVertexSpecialProjectPoint(self, point, dir)

    def GetLocalMatrix(self):
        return _newtonPy.ndShapeInstance_GetLocalMatrix(self)

    def SetLocalMatrix(self, matrix):
        return _newtonPy.ndShapeInstance_SetLocalMatrix(self, matrix)

    def GetGlobalMatrix(self):
        return _newtonPy.ndShapeInstance_GetGlobalMatrix(self)

    def SetGlobalMatrix(self, scale):
        return _newtonPy.ndShapeInstance_SetGlobalMatrix(self, scale)

    def GetCollisionMode(self):
        return _newtonPy.ndShapeInstance_GetCollisionMode(self)

    def SetCollisionMode(self, mode):
        return _newtonPy.ndShapeInstance_SetCollisionMode(self, mode)

    def GetConvexVertexCount(self):
        return _newtonPy.ndShapeInstance_GetConvexVertexCount(self)

    def GetMaterial(self):
        return _newtonPy.ndShapeInstance_GetMaterial(self)

    def SetMaterial(self, material):
        return _newtonPy.ndShapeInstance_SetMaterial(self, material)

    def GetScale(self):
        return _newtonPy.ndShapeInstance_GetScale(self)

    def GetInvScale(self):
        return _newtonPy.ndShapeInstance_GetInvScale(self)

    def SetScale(self, scale):
        return _newtonPy.ndShapeInstance_SetScale(self, scale)

    def SetGlobalScale(self, scale):
        return _newtonPy.ndShapeInstance_SetGlobalScale(self, scale)

    def CalculatePlaneIntersection(self, normal, point, contactsOut):
        return _newtonPy.ndShapeInstance_CalculatePlaneIntersection(self, normal, point, contactsOut)

    def GetVolume(self):
        return _newtonPy.ndShapeInstance_GetVolume(self)

    def GetBoxMinRadius(self):
        return _newtonPy.ndShapeInstance_GetBoxMinRadius(self)

    def GetBoxMaxRadius(self):
        return _newtonPy.ndShapeInstance_GetBoxMaxRadius(self)

    def GetScaleType(self):
        return _newtonPy.ndShapeInstance_GetScaleType(self)

    def GetUmbraClipSize(self):
        return _newtonPy.ndShapeInstance_GetUmbraClipSize(self)

    def GetUserDataID(self):
        return _newtonPy.ndShapeInstance_GetUserDataID(self)
    m_globalMatrix = property(_newtonPy.ndShapeInstance_m_globalMatrix_get, _newtonPy.ndShapeInstance_m_globalMatrix_set)
    m_localMatrix = property(_newtonPy.ndShapeInstance_m_localMatrix_get, _newtonPy.ndShapeInstance_m_localMatrix_set)
    m_aligmentMatrix = property(_newtonPy.ndShapeInstance_m_aligmentMatrix_get, _newtonPy.ndShapeInstance_m_aligmentMatrix_set)
    m_scale = property(_newtonPy.ndShapeInstance_m_scale_get, _newtonPy.ndShapeInstance_m_scale_set)
    m_invScale = property(_newtonPy.ndShapeInstance_m_invScale_get, _newtonPy.ndShapeInstance_m_invScale_set)
    m_maxScale = property(_newtonPy.ndShapeInstance_m_maxScale_get, _newtonPy.ndShapeInstance_m_maxScale_set)
    m_shapeMaterial = property(_newtonPy.ndShapeInstance_m_shapeMaterial_get, _newtonPy.ndShapeInstance_m_shapeMaterial_set)
    m_shape = property(_newtonPy.ndShapeInstance_m_shape_get, _newtonPy.ndShapeInstance_m_shape_set)
    m_ownerBody = property(_newtonPy.ndShapeInstance_m_ownerBody_get, _newtonPy.ndShapeInstance_m_ownerBody_set)
    m_subCollisionHandle = property(_newtonPy.ndShapeInstance_m_subCollisionHandle_get, _newtonPy.ndShapeInstance_m_subCollisionHandle_set)
    m_parent = property(_newtonPy.ndShapeInstance_m_parent_get, _newtonPy.ndShapeInstance_m_parent_set)
    m_skinThickness = property(_newtonPy.ndShapeInstance_m_skinThickness_get, _newtonPy.ndShapeInstance_m_skinThickness_set)
    m_scaleType = property(_newtonPy.ndShapeInstance_m_scaleType_get, _newtonPy.ndShapeInstance_m_scaleType_set)
    m_collisionMode = property(_newtonPy.ndShapeInstance_m_collisionMode_get, _newtonPy.ndShapeInstance_m_collisionMode_set)

# Register ndShapeInstance in _newtonPy:
_newtonPy.ndShapeInstance_swigregister(ndShapeInstance)

def ndShapeInstance_GetBoxPadding():
    return _newtonPy.ndShapeInstance_GetBoxPadding()

class ndBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _newtonPy.delete_ndBody

    def GetAsBody(self):
        return _newtonPy.ndBody_GetAsBody(self)

    def GetAsBodyDynamic(self):
        return _newtonPy.ndBody_GetAsBodyDynamic(self)

    def GetAsBodySentinel(self):
        return _newtonPy.ndBody_GetAsBodySentinel(self)

    def GetAsBodyKinematic(self):
        return _newtonPy.ndBody_GetAsBodyKinematic(self)

    def GetAsBodyPlayerCapsule(self):
        return _newtonPy.ndBody_GetAsBodyPlayerCapsule(self)

    def GetAsBodySphFluid(self):
        return _newtonPy.ndBody_GetAsBodySphFluid(self)

    def GetAsBodyParticleSet(self):
        return _newtonPy.ndBody_GetAsBodyParticleSet(self)

    def GetAsBodyTriggerVolume(self):
        return _newtonPy.ndBody_GetAsBodyTriggerVolume(self)

    def GetId(self):
        return _newtonPy.ndBody_GetId(self)

    def GetAABB(self, p0, p1):
        return _newtonPy.ndBody_GetAABB(self, p0, p1)

    def GetInvMass(self):
        return _newtonPy.ndBody_GetInvMass(self)

    def RayCast(self, callback, ray, maxT):
        return _newtonPy.ndBody_RayCast(self, callback, ray, maxT)

    def GetCentreOfMass(self):
        return _newtonPy.ndBody_GetCentreOfMass(self)

    def SetCentreOfMass(self, com):
        return _newtonPy.ndBody_SetCentreOfMass(self, com)

    def GetNotifyCallback(self):
        return _newtonPy.ndBody_GetNotifyCallback(self)

    def SetNotifyCallback(self, notify):
        return _newtonPy.ndBody_SetNotifyCallback(self, notify)

    def GetOmega(self):
        return _newtonPy.ndBody_GetOmega(self)

    def SetOmega(self, veloc):
        return _newtonPy.ndBody_SetOmega(self, veloc)

    def GetVelocity(self):
        return _newtonPy.ndBody_GetVelocity(self)

    def SetVelocity(self, veloc):
        return _newtonPy.ndBody_SetVelocity(self, veloc)

    def GetMatrix(self):
        return _newtonPy.ndBody_GetMatrix(self)

    def SetMatrix(self, matrix):
        return _newtonPy.ndBody_SetMatrix(self, matrix)

    def GetRotation(self):
        return _newtonPy.ndBody_GetRotation(self)

    def Save(self, desc):
        return _newtonPy.ndBody_Save(self, desc)

    def GetVelocityAtPoint(self, point):
        return _newtonPy.ndBody_GetVelocityAtPoint(self, point)

# Register ndBody in _newtonPy:
_newtonPy.ndBody_swigregister(ndBody)

class ndBodyKinematic(ndBody):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndBodyKinematic_swiginit(self, _newtonPy.new_ndBodyKinematic(*args))
    __swig_destroy__ = _newtonPy.delete_ndBodyKinematic

    def GetScene(self):
        return _newtonPy.ndBodyKinematic_GetScene(self)

    def GetIndex(self):
        return _newtonPy.ndBodyKinematic_GetIndex(self)

    def GetInvMass(self):
        return _newtonPy.ndBodyKinematic_GetInvMass(self)

    def GetInvInertia(self):
        return _newtonPy.ndBodyKinematic_GetInvInertia(self)

    def GetInvInertiaMatrix(self):
        return _newtonPy.ndBodyKinematic_GetInvInertiaMatrix(self)

    def GetGyroAlpha(self):
        return _newtonPy.ndBodyKinematic_GetGyroAlpha(self)

    def GetSleepState(self):
        return _newtonPy.ndBodyKinematic_GetSleepState(self)

    def RestoreSleepState(self, state):
        return _newtonPy.ndBodyKinematic_RestoreSleepState(self, state)

    def SetSleepState(self, state):
        return _newtonPy.ndBodyKinematic_SetSleepState(self, state)

    def GetAutoSleep(self):
        return _newtonPy.ndBodyKinematic_GetAutoSleep(self)

    def SetAutoSleep(self, state):
        return _newtonPy.ndBodyKinematic_SetAutoSleep(self, state)

    def SetDebugMaxAngularIntegrationSteepAndLinearSpeed(self, angleInRadian, speedInMitersPerSeconds):
        return _newtonPy.ndBodyKinematic_SetDebugMaxAngularIntegrationSteepAndLinearSpeed(self, angleInRadian, speedInMitersPerSeconds)

    def GetLinearDamping(self):
        return _newtonPy.ndBodyKinematic_GetLinearDamping(self)

    def SetLinearDamping(self, linearDamp):
        return _newtonPy.ndBodyKinematic_SetLinearDamping(self, linearDamp)

    def GetAngularDamping(self):
        return _newtonPy.ndBodyKinematic_GetAngularDamping(self)

    def SetAngularDamping(self, angularDamp):
        return _newtonPy.ndBodyKinematic_SetAngularDamping(self, angularDamp)

    def GetCollisionShape(self, *args):
        return _newtonPy.ndBodyKinematic_GetCollisionShape(self, *args)

    def SetCollisionShape(self, shapeInstance):
        return _newtonPy.ndBodyKinematic_SetCollisionShape(self, shapeInstance)

    def RayCast(self, callback, ray, maxT):
        return _newtonPy.ndBodyKinematic_RayCast(self, callback, ray, maxT)

    def CalculateLinearMomentum(self):
        return _newtonPy.ndBodyKinematic_CalculateLinearMomentum(self)

    def CalculateAngularMomentum(self):
        return _newtonPy.ndBodyKinematic_CalculateAngularMomentum(self)

    def TotalEnergy(self):
        return _newtonPy.ndBodyKinematic_TotalEnergy(self)

    def CalculateInertiaMatrix(self):
        return _newtonPy.ndBodyKinematic_CalculateInertiaMatrix(self)

    def CalculateInvInertiaMatrix(self):
        return _newtonPy.ndBodyKinematic_CalculateInvInertiaMatrix(self)

    def UpdateInvInertiaMatrix(self):
        return _newtonPy.ndBodyKinematic_UpdateInvInertiaMatrix(self)

    def IntegrateVelocity(self, timestep):
        return _newtonPy.ndBodyKinematic_IntegrateVelocity(self, timestep)

    def Save(self, desc):
        return _newtonPy.ndBodyKinematic_Save(self, desc)

    def SetMassMatrix(self, *args):
        return _newtonPy.ndBodyKinematic_SetMassMatrix(self, *args)

    def GetMassMatrix(self, *args):
        return _newtonPy.ndBodyKinematic_GetMassMatrix(self, *args)

    def FindContact(self, otherBody):
        return _newtonPy.ndBodyKinematic_FindContact(self, otherBody)

    def GetAsBodyKinematic(self):
        return _newtonPy.ndBodyKinematic_GetAsBodyKinematic(self)

    def GetSkeleton(self):
        return _newtonPy.ndBodyKinematic_GetSkeleton(self)

    def SetSkeleton(self, skeleton):
        return _newtonPy.ndBodyKinematic_SetSkeleton(self, skeleton)

    def GetForce(self):
        return _newtonPy.ndBodyKinematic_GetForce(self)

    def GetTorque(self):
        return _newtonPy.ndBodyKinematic_GetTorque(self)

    def SetForce(self, force):
        return _newtonPy.ndBodyKinematic_SetForce(self, force)

    def SetTorque(self, torque):
        return _newtonPy.ndBodyKinematic_SetTorque(self, torque)

    def SetAccel(self, accel):
        return _newtonPy.ndBodyKinematic_SetAccel(self, accel)

    def SetAlpha(self, alpha):
        return _newtonPy.ndBodyKinematic_SetAlpha(self, alpha)

    def GetJointList(self):
        return _newtonPy.ndBodyKinematic_GetJointList(self)

    def GetContactMap(self, *args):
        return _newtonPy.ndBodyKinematic_GetContactMap(self, *args)

# Register ndBodyKinematic in _newtonPy:
_newtonPy.ndBodyKinematic_swigregister(ndBodyKinematic)

class ndBodyTriggerVolume(ndBodyKinematic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndBodyTriggerVolume_swiginit(self, _newtonPy.new_ndBodyTriggerVolume(*args))
    __swig_destroy__ = _newtonPy.delete_ndBodyTriggerVolume

    def GetAsBodyTriggerVolume(self):
        return _newtonPy.ndBodyTriggerVolume_GetAsBodyTriggerVolume(self)

    def OnTrigger(self, body, timestep):
        return _newtonPy.ndBodyTriggerVolume_OnTrigger(self, body, timestep)

    def OnTriggerEnter(self, body, timestep):
        return _newtonPy.ndBodyTriggerVolume_OnTriggerEnter(self, body, timestep)

    def OnTriggerExit(self, body, timestep):
        return _newtonPy.ndBodyTriggerVolume_OnTriggerExit(self, body, timestep)

    def Save(self, desc):
        return _newtonPy.ndBodyTriggerVolume_Save(self, desc)

# Register ndBodyTriggerVolume in _newtonPy:
_newtonPy.ndBodyTriggerVolume_swigregister(ndBodyTriggerVolume)

class ndBodyPlayerCapsule(ndBodyKinematic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndBodyPlayerCapsule_swiginit(self, _newtonPy.new_ndBodyPlayerCapsule(*args))
    __swig_destroy__ = _newtonPy.delete_ndBodyPlayerCapsule

    def GetAsBodyPlayerCapsule(self):
        return _newtonPy.ndBodyPlayerCapsule_GetAsBodyPlayerCapsule(self)

    def GetForwardSpeed(self):
        return _newtonPy.ndBodyPlayerCapsule_GetForwardSpeed(self)

    def SetForwardSpeed(self, speed):
        return _newtonPy.ndBodyPlayerCapsule_SetForwardSpeed(self, speed)

    def GetLateralSpeed(self):
        return _newtonPy.ndBodyPlayerCapsule_GetLateralSpeed(self)

    def SetLateralSpeed(self, speed):
        return _newtonPy.ndBodyPlayerCapsule_SetLateralSpeed(self, speed)

    def GetHeadingAngle(self):
        return _newtonPy.ndBodyPlayerCapsule_GetHeadingAngle(self)

    def SetHeadingAngle(self, angle):
        return _newtonPy.ndBodyPlayerCapsule_SetHeadingAngle(self, angle)

    def IsOnFloor(self):
        return _newtonPy.ndBodyPlayerCapsule_IsOnFloor(self)

    def ApplyInputs(self, timestep):
        return _newtonPy.ndBodyPlayerCapsule_ApplyInputs(self, timestep)

    def ContactFrictionCallback(self, position, normal, contactId, otherbody):
        return _newtonPy.ndBodyPlayerCapsule_ContactFrictionCallback(self, position, normal, contactId, otherbody)

# Register ndBodyPlayerCapsule in _newtonPy:
_newtonPy.ndBodyPlayerCapsule_swigregister(ndBodyPlayerCapsule)

class ndBodyNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newtonPy.ndBodyNotify_swiginit(self, _newtonPy.new_ndBodyNotify(*args))
    __swig_destroy__ = _newtonPy.delete_ndBodyNotify

    def GetBody(self, *args):
        return _newtonPy.ndBodyNotify_GetBody(self, *args)

    def GetUserData(self):
        return _newtonPy.ndBodyNotify_GetUserData(self)

    def GetGravity(self):
        return _newtonPy.ndBodyNotify_GetGravity(self)

    def SetGravity(self, defualtGravity):
        return _newtonPy.ndBodyNotify_SetGravity(self, defualtGravity)

    def OnTransform(self, threadIndex, matrix):
        return _newtonPy.ndBodyNotify_OnTransform(self, threadIndex, matrix)

    def Save(self, desc):
        return _newtonPy.ndBodyNotify_Save(self, desc)

    def OnApplyExternalForce(self, threadIndex, timestep):
        return _newtonPy.ndBodyNotify_OnApplyExternalForce(self, threadIndex, timestep)

# Register ndBodyNotify in _newtonPy:
_newtonPy.ndBodyNotify_swigregister(ndBodyNotify)

class ndMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newtonPy.ndMaterial_swiginit(self, _newtonPy.new_ndMaterial())
    m_restitution = property(_newtonPy.ndMaterial_m_restitution_get, _newtonPy.ndMaterial_m_restitution_set)
    m_staticFriction0 = property(_newtonPy.ndMaterial_m_staticFriction0_get, _newtonPy.ndMaterial_m_staticFriction0_set)
    m_staticFriction1 = property(_newtonPy.ndMaterial_m_staticFriction1_get, _newtonPy.ndMaterial_m_staticFriction1_set)
    m_dynamicFriction0 = property(_newtonPy.ndMaterial_m_dynamicFriction0_get, _newtonPy.ndMaterial_m_dynamicFriction0_set)
    m_dynamicFriction1 = property(_newtonPy.ndMaterial_m_dynamicFriction1_get, _newtonPy.ndMaterial_m_dynamicFriction1_set)
    m_softness = property(_newtonPy.ndMaterial_m_softness_get, _newtonPy.ndMaterial_m_softness_set)
    m_skinThickness = property(_newtonPy.ndMaterial_m_skinThickness_get, _newtonPy.ndMaterial_m_skinThickness_set)
    m_flags = property(_newtonPy.ndMaterial_m_flags_get, _newtonPy.ndMaterial_m_flags_set)
    m_userFlags = property(_newtonPy.ndMaterial_m_userFlags_get, _newtonPy.ndMaterial_m_userFlags_set)
    __swig_destroy__ = _newtonPy.delete_ndMaterial

# Register ndMaterial in _newtonPy:
_newtonPy.ndMaterial_swigregister(ndMaterial)

class ndContactNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newtonPy.ndContactNotify_swiginit(self, _newtonPy.new_ndContactNotify())
    __swig_destroy__ = _newtonPy.delete_ndContactNotify

    def OnBodyAdded(self, arg2):
        return _newtonPy.ndContactNotify_OnBodyAdded(self, arg2)

    def OnBodyRemoved(self, arg2):
        return _newtonPy.ndContactNotify_OnBodyRemoved(self, arg2)

    def GetMaterial(self, arg2, arg3, arg4):
        return _newtonPy.ndContactNotify_GetMaterial(self, arg2, arg3, arg4)

    def OnCompoundSubShapeOverlap(self, arg2, arg3, arg4, arg5):
        return _newtonPy.ndContactNotify_OnCompoundSubShapeOverlap(self, arg2, arg3, arg4, arg5)

    def OnAabbOverlap(self, arg2, arg3):
        return _newtonPy.ndContactNotify_OnAabbOverlap(self, arg2, arg3)

    def OnContactCallback(self, arg2, arg3, arg4):
        return _newtonPy.ndContactNotify_OnContactCallback(self, arg2, arg3, arg4)

# Register ndContactNotify in _newtonPy:
_newtonPy.ndContactNotify_swigregister(ndContactNotify)

class ndRayCastNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _newtonPy.delete_ndRayCastNotify

    def TraceShape(self, globalOrigin, globalDestination, shapeInstance, shapeGlobal):
        return _newtonPy.ndRayCastNotify_TraceShape(self, globalOrigin, globalDestination, shapeInstance, shapeGlobal)

    def OnRayPrecastAction(self, arg2, arg3):
        return _newtonPy.ndRayCastNotify_OnRayPrecastAction(self, arg2, arg3)

    def OnRayCastAction(self, contact, intersetParam):
        return _newtonPy.ndRayCastNotify_OnRayCastAction(self, contact, intersetParam)
    m_contact = property(_newtonPy.ndRayCastNotify_m_contact_get, _newtonPy.ndRayCastNotify_m_contact_set)
    m_param = property(_newtonPy.ndRayCastNotify_m_param_get, _newtonPy.ndRayCastNotify_m_param_set)

# Register ndRayCastNotify in _newtonPy:
_newtonPy.ndRayCastNotify_swigregister(ndRayCastNotify)

class ndRayCastClosestHitCallback(ndRayCastNotify):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newtonPy.ndRayCastClosestHitCallback_swiginit(self, _newtonPy.new_ndRayCastClosestHitCallback())

    def OnRayPrecastAction(self, body, arg3):
        return _newtonPy.ndRayCastClosestHitCallback_OnRayPrecastAction(self, body, arg3)

    def OnRayCastAction(self, contact, intersetParam):
        return _newtonPy.ndRayCastClosestHitCallback_OnRayCastAction(self, contact, intersetParam)
    __swig_destroy__ = _newtonPy.delete_ndRayCastClosestHitCallback

# Register ndRayCastClosestHitCallback in _newtonPy:
_newtonPy.ndRayCastClosestHitCallback_swigregister(ndRayCastClosestHitCallback)

class ndBodiesInAabbNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newtonPy.ndBodiesInAabbNotify_swiginit(self, _newtonPy.new_ndBodiesInAabbNotify())
    __swig_destroy__ = _newtonPy.delete_ndBodiesInAabbNotify

    def OnOverlap(self, arg2):
        return _newtonPy.ndBodiesInAabbNotify_OnOverlap(self, arg2)
    m_bodyArray = property(_newtonPy.ndBodiesInAabbNotify_m_bodyArray_get, _newtonPy.ndBodiesInAabbNotify_m_bodyArray_set)

# Register ndBodiesInAabbNotify in _newtonPy:
_newtonPy.ndBodiesInAabbNotify_swigregister(ndBodiesInAabbNotify)

D_NEWTON_ENGINE_MAJOR_VERSION = _newtonPy.D_NEWTON_ENGINE_MAJOR_VERSION
D_NEWTON_ENGINE_MINOR_VERSION = _newtonPy.D_NEWTON_ENGINE_MINOR_VERSION
D_SLEEP_ENTRIES = _newtonPy.D_SLEEP_ENTRIES
class ndWorld(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndStandardSolver = _newtonPy.ndWorld_ndStandardSolver
    ndSimdSoaSolver = _newtonPy.ndWorld_ndSimdSoaSolver
    ndSimdAvx2Solver = _newtonPy.ndWorld_ndSimdAvx2Solver
    ndOpenclSolver = _newtonPy.ndWorld_ndOpenclSolver

    def __init__(self):
        _newtonPy.ndWorld_swiginit(self, _newtonPy.new_ndWorld())
    __swig_destroy__ = _newtonPy.delete_ndWorld

    def CleanUp(self):
        return _newtonPy.ndWorld_CleanUp(self)

    def GetEngineVersion(self):
        return _newtonPy.ndWorld_GetEngineVersion(self)

    def Sync(self):
        return _newtonPy.ndWorld_Sync(self)

    def Update(self, timestep):
        return _newtonPy.ndWorld_Update(self, timestep)

    def OnPostUpdate(self, timestep):
        return _newtonPy.ndWorld_OnPostUpdate(self, timestep)

    def UpdateTransformsLock(self):
        return _newtonPy.ndWorld_UpdateTransformsLock(self)

    def UpdateTransformsUnlock(self):
        return _newtonPy.ndWorld_UpdateTransformsUnlock(self)

    def GetThreadCount(self):
        return _newtonPy.ndWorld_GetThreadCount(self)

    def SetThreadCount(self, count):
        return _newtonPy.ndWorld_SetThreadCount(self, count)

    def GetSubSteps(self):
        return _newtonPy.ndWorld_GetSubSteps(self)

    def SetSubSteps(self, subSteps):
        return _newtonPy.ndWorld_SetSubSteps(self, subSteps)

    def GetSelectedSolver(self):
        return _newtonPy.ndWorld_GetSelectedSolver(self)

    def SelectSolver(self, solverMode):
        return _newtonPy.ndWorld_SelectSolver(self, solverMode)

    def GetSolverString(self):
        return _newtonPy.ndWorld_GetSolverString(self)

    def AddBody(self, body):
        return _newtonPy.ndWorld_AddBody(self, body)

    def RemoveBody(self, body):
        return _newtonPy.ndWorld_RemoveBody(self, body)

    def DeleteBody(self, body):
        return _newtonPy.ndWorld_DeleteBody(self, body)

    def AddJoint(self, joint):
        return _newtonPy.ndWorld_AddJoint(self, joint)

    def RemoveJoint(self, joint):
        return _newtonPy.ndWorld_RemoveJoint(self, joint)

    def AddModel(self, model):
        return _newtonPy.ndWorld_AddModel(self, model)

    def RemoveModel(self, model):
        return _newtonPy.ndWorld_RemoveModel(self, model)

    def GetBodyList(self):
        return _newtonPy.ndWorld_GetBodyList(self)

    def GetJointList(self):
        return _newtonPy.ndWorld_GetJointList(self)

    def GetModelList(self):
        return _newtonPy.ndWorld_GetModelList(self)

    def GetContactList(self):
        return _newtonPy.ndWorld_GetContactList(self)

    def GetSkeletonList(self):
        return _newtonPy.ndWorld_GetSkeletonList(self)

    def GetParticleList(self):
        return _newtonPy.ndWorld_GetParticleList(self)

    def GetSentinelBody(self):
        return _newtonPy.ndWorld_GetSentinelBody(self)

    def GetSolverIterations(self):
        return _newtonPy.ndWorld_GetSolverIterations(self)

    def SetSolverIterations(self, iterations):
        return _newtonPy.ndWorld_SetSolverIterations(self, iterations)

    def GetScene(self):
        return _newtonPy.ndWorld_GetScene(self)

    def GetUpdateTime(self):
        return _newtonPy.ndWorld_GetUpdateTime(self)

    def GetFrameIndex(self):
        return _newtonPy.ndWorld_GetFrameIndex(self)

    def GetAverageUpdateTime(self):
        return _newtonPy.ndWorld_GetAverageUpdateTime(self)

    def GetContactNotify(self):
        return _newtonPy.ndWorld_GetContactNotify(self)

    def SetContactNotify(self, notify):
        return _newtonPy.ndWorld_SetContactNotify(self, notify)

    def DebugScene(self, notify):
        return _newtonPy.ndWorld_DebugScene(self, notify)

    def ClearCache(self):
        return _newtonPy.ndWorld_ClearCache(self)

    def BodiesInAabb(self, callback):
        return _newtonPy.ndWorld_BodiesInAabb(self, callback)

    def RayCast(self, callback, globalOrigin, globalDest):
        return _newtonPy.ndWorld_RayCast(self, callback, globalOrigin, globalDest)

    def ConvexCast(self, callback, convexShape, globalOrigin, globalDest):
        return _newtonPy.ndWorld_ConvexCast(self, callback, convexShape, globalOrigin, globalDest)

# Register ndWorld in _newtonPy:
_newtonPy.ndWorld_swigregister(ndWorld)



