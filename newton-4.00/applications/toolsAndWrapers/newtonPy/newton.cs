//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class newton {
  public static void dGetWorkingFileName(string name, string outPathName) {
    newtonPINVOKE.dGetWorkingFileName(name, outPathName);
  }

  public static ndMatrix dGetZeroMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.dGetZeroMatrix(), false);
    return ret;
  }

  public static ndMatrix dGetIdentityMatrix() {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.dGetIdentityMatrix(), false);
    return ret;
  }

  public static ndMatrix dPitchMatrix(SWIGTYPE_p_ndFloat32 ang) {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.dPitchMatrix(SWIGTYPE_p_ndFloat32.getCPtr(ang)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ndMatrix dYawMatrix(SWIGTYPE_p_ndFloat32 ang) {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.dYawMatrix(SWIGTYPE_p_ndFloat32.getCPtr(ang)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ndMatrix dRollMatrix(SWIGTYPE_p_ndFloat32 ang) {
    ndMatrix ret = new ndMatrix(newtonPINVOKE.dRollMatrix(SWIGTYPE_p_ndFloat32.getCPtr(ang)), true);
    if (newtonPINVOKE.SWIGPendingException.Pending) throw newtonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int D_CONE_SEGMENTS = newtonPINVOKE.D_CONE_SEGMENTS_get();
  public static readonly int D_CLIP_MAX_COUNT = newtonPINVOKE.D_CLIP_MAX_COUNT_get();
  public static readonly int D_CLIP_MAX_POINT_COUNT = newtonPINVOKE.D_CLIP_MAX_POINT_COUNT_get();
  public static readonly int D_SPHERE_VERTEX_COUNT = newtonPINVOKE.D_SPHERE_VERTEX_COUNT_get();
  public static readonly int D_COMPOUND_STACK_DEPTH = newtonPINVOKE.D_COMPOUND_STACK_DEPTH_get();
  public static readonly int D_TAPED_CYLINDER_SEGMENTS = newtonPINVOKE.D_TAPED_CYLINDER_SEGMENTS_get();
  public static readonly int D_MAX_COLLIDING_FACES = newtonPINVOKE.D_MAX_COLLIDING_FACES_get();
  public static readonly int D_MAX_COLLIDING_INDICES = newtonPINVOKE.D_MAX_COLLIDING_INDICES_get();
  public static readonly int DG_CHAMFERCYLINDER_SLICES = newtonPINVOKE.DG_CHAMFERCYLINDER_SLICES_get();
  public static readonly int DG_CHAMFERCYLINDER_BRAKES = newtonPINVOKE.DG_CHAMFERCYLINDER_BRAKES_get();
  public static readonly int DG_MAX_CHAMFERCYLINDER_DIR_COUNT = newtonPINVOKE.DG_MAX_CHAMFERCYLINDER_DIR_COUNT_get();
  public static readonly double NOMINAL_FPS = newtonPINVOKE.NOMINAL_FPS_get();
}
